/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Acl {
    /// Type of ACL
    #[serde(rename = "type")]
    pub r#type: Type,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Schema version
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    /// Name of the ACL
    #[serde(rename = "aclName")]
    pub acl_name: String,
    /// Human-readable description of the ACL
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// List of rules in this ACL
    #[serde(rename = "rules")]
    pub rules: Vec<models::AclRule>,
    #[serde(rename = "statistics", skip_serializing_if = "Option::is_none")]
    pub statistics: Option<Box<models::AclAllOfStatistics>>,
}

impl Acl {
    pub fn new(r#type: Type, timestamp: String, schema_version: String, acl_name: String, rules: Vec<models::AclRule>) -> Acl {
        Acl {
            r#type,
            timestamp,
            schema_version,
            acl_name,
            description: None,
            rules,
            statistics: None,
        }
    }
}
/// Type of ACL
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "extended")]
    Extended,
    #[serde(rename = "mac")]
    Mac,
    #[serde(rename = "ipv6")]
    Ipv6,
}

impl Default for Type {
    fn default() -> Type {
        Self::Standard
    }
}

