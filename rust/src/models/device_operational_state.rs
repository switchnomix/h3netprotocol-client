/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceOperationalState {
    #[serde(rename = "deviceId")]
    pub device_id: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "lastSeen", skip_serializing_if = "Option::is_none")]
    pub last_seen: Option<String>,
    #[serde(rename = "uptime", skip_serializing_if = "Option::is_none")]
    pub uptime: Option<String>,
    #[serde(rename = "interfaces", skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<models::InterfaceOperationalState>>,
}

impl DeviceOperationalState {
    pub fn new(device_id: String, status: Status) -> DeviceOperationalState {
        DeviceOperationalState {
            device_id,
            status,
            last_seen: None,
            uptime: None,
            interfaces: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "online")]
    Online,
    #[serde(rename = "offline")]
    Offline,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "maintenance")]
    Maintenance,
    #[serde(rename = "rebooting")]
    Rebooting,
}

impl Default for Status {
    fn default() -> Status {
        Self::Online
    }
}

