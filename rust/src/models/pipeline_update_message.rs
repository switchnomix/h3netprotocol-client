/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineUpdateMessage {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    #[serde(rename = "pipelineConfig", skip_serializing_if = "Option::is_none")]
    pub pipeline_config: Option<Box<models::PipelineConfig>>,
    /// Defines the type of operation for flow rule management
    #[serde(rename = "operationType")]
    pub operation_type: OperationType,
    /// List of flow entries to be added, updated, or deleted
    #[serde(rename = "flowEntries")]
    pub flow_entries: Vec<models::FlowEntry>,
    #[serde(rename = "applyImmediately")]
    pub apply_immediately: bool,
}

impl PipelineUpdateMessage {
    pub fn new(r#type: Type, timestamp: String, schema_version: String, operation_type: OperationType, flow_entries: Vec<models::FlowEntry>, apply_immediately: bool) -> PipelineUpdateMessage {
        PipelineUpdateMessage {
            r#type,
            timestamp,
            schema_version,
            pipeline_config: None,
            operation_type,
            flow_entries,
            apply_immediately,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PIPELINE_UPDATE")]
    PipelineUpdate,
}

impl Default for Type {
    fn default() -> Type {
        Self::PipelineUpdate
    }
}
/// Defines the type of operation for flow rule management
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OperationType {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "delete")]
    Delete,
}

impl Default for OperationType {
    fn default() -> OperationType {
        Self::Add
    }
}

