/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NetworkInterface : Network interface configuration and status information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkInterface {
    /// Interface name/identifier
    #[serde(rename = "name")]
    pub name: String,
    /// Human-readable interface description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Administrative state of the interface
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "speed", skip_serializing_if = "Option::is_none")]
    pub speed: Option<models::InterfaceSpeed>,
    /// Interface type/media
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Maximum Transmission Unit in bytes
    #[serde(rename = "mtu", skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i32>,
    /// MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
    #[serde(rename = "mac", skip_serializing_if = "Option::is_none")]
    pub mac: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<models::InterfaceState>,
    #[serde(rename = "adminState", skip_serializing_if = "Option::is_none")]
    pub admin_state: Option<models::AdminState>,
}

impl NetworkInterface {
    /// Network interface configuration and status information
    pub fn new(name: String, enabled: bool) -> NetworkInterface {
        NetworkInterface {
            name,
            description: None,
            enabled,
            speed: None,
            r#type: None,
            mtu: None,
            mac: None,
            state: None,
            admin_state: None,
        }
    }
}
/// Interface type/media
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ethernet")]
    Ethernet,
    #[serde(rename = "fiber")]
    Fiber,
    #[serde(rename = "wireless")]
    Wireless,
    #[serde(rename = "loopback")]
    Loopback,
    #[serde(rename = "vlan")]
    Vlan,
    #[serde(rename = "tunnel")]
    Tunnel,
}

impl Default for Type {
    fn default() -> Type {
        Self::Ethernet
    }
}

