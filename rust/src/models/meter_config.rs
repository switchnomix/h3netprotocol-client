/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MeterConfig {
    #[serde(rename = "meterId")]
    pub meter_id: i32,
    /// Rate in kbps
    #[serde(rename = "rate")]
    pub rate: i32,
    /// Burst size in bytes
    #[serde(rename = "burst_size")]
    pub burst_size: i32,
    /// Meter action when threshold is exceeded
    #[serde(rename = "action")]
    pub action: Action,
}

impl MeterConfig {
    pub fn new(meter_id: i32, rate: i32, burst_size: i32, action: Action) -> MeterConfig {
        MeterConfig {
            meter_id,
            rate,
            burst_size,
            action,
        }
    }
}
/// Meter action when threshold is exceeded
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "remark")]
    Remark,
    #[serde(rename = "police")]
    Police,
}

impl Default for Action {
    fn default() -> Action {
        Self::Drop
    }
}

