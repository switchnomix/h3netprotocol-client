/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateRoutingConfig200Response {
    #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
    pub valid: Option<bool>,
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<models::ValidateRoutingConfig200ResponseErrorsInner>>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<models::ValidateRoutingConfig200ResponseErrorsInner>>,
}

impl ValidateRoutingConfig200Response {
    pub fn new() -> ValidateRoutingConfig200Response {
        ValidateRoutingConfig200Response {
            valid: None,
            errors: None,
            warnings: None,
        }
    }
}

