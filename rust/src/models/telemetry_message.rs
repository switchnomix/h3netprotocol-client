/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TelemetryMessage {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Schema version
    #[serde(rename = "schemaVersion", skip_serializing_if = "Option::is_none")]
    pub schema_version: Option<String>,
    #[serde(rename = "device")]
    pub device: Box<models::TelemetryMessageDevice>,
    #[serde(rename = "metrics")]
    pub metrics: Box<models::TelemetryMessageMetrics>,
}

impl TelemetryMessage {
    pub fn new(r#type: Type, timestamp: String, device: models::TelemetryMessageDevice, metrics: models::TelemetryMessageMetrics) -> TelemetryMessage {
        TelemetryMessage {
            r#type,
            timestamp,
            schema_version: None,
            device: Box::new(device),
            metrics: Box::new(metrics),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "TELEMETRY")]
    Telemetry,
}

impl Default for Type {
    fn default() -> Type {
        Self::Telemetry
    }
}

