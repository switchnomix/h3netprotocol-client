/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RoutingConfigOspfAreasInner {
    /// Represents either an IPv4 or IPv6 address
    #[serde(rename = "areaId")]
    pub area_id: String,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "interfaces", skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<String>>,
}

impl RoutingConfigOspfAreasInner {
    pub fn new(area_id: String) -> RoutingConfigOspfAreasInner {
        RoutingConfigOspfAreasInner {
            area_id,
            r#type: None,
            interfaces: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "stub")]
    Stub,
    #[serde(rename = "nssa")]
    Nssa,
    #[serde(rename = "totally-stub")]
    TotallyStub,
}

impl Default for Type {
    fn default() -> Type {
        Self::Normal
    }
}

