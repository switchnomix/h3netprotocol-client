/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RouteEntry : Route entry configuration
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RouteEntry {
    #[serde(rename = "destination")]
    pub destination: Box<models::IpAddressWithPrefix>,
    /// Represents either an IPv4 or IPv6 address
    #[serde(rename = "nextHop", skip_serializing_if = "Option::is_none")]
    pub next_hop: Option<String>,
    #[serde(rename = "metric", skip_serializing_if = "Option::is_none")]
    pub metric: Option<i32>,
    #[serde(rename = "interface", skip_serializing_if = "Option::is_none")]
    pub interface: Option<Box<models::NetworkInterface>>,
    #[serde(rename = "adminDistance", skip_serializing_if = "Option::is_none")]
    pub admin_distance: Option<i32>,
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<i32>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "track", skip_serializing_if = "Option::is_none")]
    pub track: Option<i32>,
    #[serde(rename = "bfd", skip_serializing_if = "Option::is_none")]
    pub bfd: Option<Box<models::RouteEntryBfd>>,
}

impl RouteEntry {
    /// Route entry configuration
    pub fn new(destination: models::IpAddressWithPrefix) -> RouteEntry {
        RouteEntry {
            destination: Box::new(destination),
            next_hop: None,
            metric: None,
            interface: None,
            admin_distance: None,
            tag: None,
            description: None,
            track: None,
            bfd: None,
        }
    }
}

