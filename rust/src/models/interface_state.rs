/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InterfaceState : Interface operational states as per IF-MIB
/// Interface operational states as per IF-MIB
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InterfaceState {
    #[serde(rename = "up")]
    Up,
    #[serde(rename = "down")]
    Down,
    #[serde(rename = "testing")]
    Testing,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "dormant")]
    Dormant,
    #[serde(rename = "notPresent")]
    NotPresent,
    #[serde(rename = "lowerLayerDown")]
    LowerLayerDown,

}

impl std::fmt::Display for InterfaceState {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Up => write!(f, "up"),
            Self::Down => write!(f, "down"),
            Self::Testing => write!(f, "testing"),
            Self::Unknown => write!(f, "unknown"),
            Self::Dormant => write!(f, "dormant"),
            Self::NotPresent => write!(f, "notPresent"),
            Self::LowerLayerDown => write!(f, "lowerLayerDown"),
        }
    }
}

impl Default for InterfaceState {
    fn default() -> InterfaceState {
        Self::Up
    }
}

