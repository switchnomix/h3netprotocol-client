/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ErrorStats : Detailed error statistics
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorStats {
    #[serde(rename = "crc", skip_serializing_if = "Option::is_none")]
    pub crc: Option<f64>,
    #[serde(rename = "fragment", skip_serializing_if = "Option::is_none")]
    pub fragment: Option<f64>,
    #[serde(rename = "jabber", skip_serializing_if = "Option::is_none")]
    pub jabber: Option<f64>,
    #[serde(rename = "alignment", skip_serializing_if = "Option::is_none")]
    pub alignment: Option<f64>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<f64>,
    #[serde(rename = "unknown", skip_serializing_if = "Option::is_none")]
    pub unknown: Option<f64>,
}

impl ErrorStats {
    /// Detailed error statistics
    pub fn new() -> ErrorStats {
        ErrorStats {
            crc: None,
            fragment: None,
            jabber: None,
            alignment: None,
            symbol: None,
            unknown: None,
        }
    }
}

