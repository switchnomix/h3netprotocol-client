/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineConfig {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "switchId")]
    pub switch_id: String,
    #[serde(rename = "tables")]
    pub tables: Vec<models::MatchActionTable>,
    #[serde(rename = "vlans", skip_serializing_if = "Option::is_none")]
    pub vlans: Option<Vec<models::Vlan>>,
    #[serde(rename = "acls", skip_serializing_if = "Option::is_none")]
    pub acls: Option<Vec<models::Acl>>,
}

impl PipelineConfig {
    pub fn new(switch_id: String, tables: Vec<models::MatchActionTable>) -> PipelineConfig {
        PipelineConfig {
            r#type: None,
            timestamp: None,
            switch_id,
            tables,
            vlans: None,
            acls: None,
        }
    }
}

