/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeviceRoleEnum {
    #[serde(rename = "Switch")]
    Switch,
    #[serde(rename = "Router")]
    Router,
    #[serde(rename = "L2 Switch")]
    L2Switch,
    #[serde(rename = "Firewall")]
    Firewall,
    #[serde(rename = "Wireless Access Point")]
    WirelessAccessPoint,
    #[serde(rename = "VoIP")]
    VoIp,
    #[serde(rename = "Load Balancer")]
    LoadBalancer,
    #[serde(rename = "VPN Gateway")]
    VpnGateway,
    #[serde(rename = "UTM")]
    Utm,
    #[serde(rename = "PDU")]
    Pdu,

}

impl std::fmt::Display for DeviceRoleEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Switch => write!(f, "Switch"),
            Self::Router => write!(f, "Router"),
            Self::L2Switch => write!(f, "L2 Switch"),
            Self::Firewall => write!(f, "Firewall"),
            Self::WirelessAccessPoint => write!(f, "Wireless Access Point"),
            Self::VoIp => write!(f, "VoIP"),
            Self::LoadBalancer => write!(f, "Load Balancer"),
            Self::VpnGateway => write!(f, "VPN Gateway"),
            Self::Utm => write!(f, "UTM"),
            Self::Pdu => write!(f, "PDU"),
        }
    }
}

impl Default for DeviceRoleEnum {
    fn default() -> DeviceRoleEnum {
        Self::Switch
    }
}

