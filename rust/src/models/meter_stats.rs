/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MeterStats : Meter statistics
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MeterStats {
    /// Device identifier
    #[serde(rename = "deviceId")]
    pub device_id: String,
    /// Meter identifier
    #[serde(rename = "meterId")]
    pub meter_id: String,
    /// Meter name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of meter
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Current rate
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<f64>,
    /// Burst size
    #[serde(rename = "burstSize", skip_serializing_if = "Option::is_none")]
    pub burst_size: Option<f64>,
    #[serde(rename = "bands", skip_serializing_if = "Option::is_none")]
    pub bands: Option<Vec<models::MeterStatsBandsInner>>,
    /// Total packet count
    #[serde(rename = "packetCount", skip_serializing_if = "Option::is_none")]
    pub packet_count: Option<f64>,
    /// Total byte count
    #[serde(rename = "byteCount", skip_serializing_if = "Option::is_none")]
    pub byte_count: Option<f64>,
    /// Duration in seconds
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<f64>,
    /// Last update timestamp
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
}

impl MeterStats {
    /// Meter statistics
    pub fn new(device_id: String, meter_id: String) -> MeterStats {
        MeterStats {
            device_id,
            meter_id,
            name: None,
            r#type: None,
            rate: None,
            burst_size: None,
            bands: None,
            packet_count: None,
            byte_count: None,
            duration: None,
            last_updated: None,
        }
    }
}
/// Type of meter
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "bytes")]
    Bytes,
    #[serde(rename = "packets")]
    Packets,
    #[serde(rename = "flows")]
    Flows,
}

impl Default for Type {
    fn default() -> Type {
        Self::Bytes
    }
}

