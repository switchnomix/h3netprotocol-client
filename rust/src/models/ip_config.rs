/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IpConfig : IP configuration for an interface
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpConfig {
    #[serde(rename = "primary")]
    pub primary: Box<models::IpAddressWithPrefix>,
    /// Secondary IP addresses
    #[serde(rename = "secondary", skip_serializing_if = "Option::is_none")]
    pub secondary: Option<Vec<models::IpAddressWithPrefix>>,
    /// Virtual IP addresses for VRRP/HSRP
    #[serde(rename = "virtualIPs", skip_serializing_if = "Option::is_none")]
    pub virtual_ips: Option<Vec<models::IpAddressWithPrefix>>,
    /// Whether DHCP is enabled
    #[serde(rename = "dhcp", skip_serializing_if = "Option::is_none")]
    pub dhcp: Option<bool>,
    /// Whether IPv6 autoconfig is enabled
    #[serde(rename = "autoconfig", skip_serializing_if = "Option::is_none")]
    pub autoconfig: Option<bool>,
}

impl IpConfig {
    /// IP configuration for an interface
    pub fn new(primary: models::IpAddressWithPrefix) -> IpConfig {
        IpConfig {
            primary: Box::new(primary),
            secondary: None,
            virtual_ips: None,
            dhcp: None,
            autoconfig: None,
        }
    }
}

