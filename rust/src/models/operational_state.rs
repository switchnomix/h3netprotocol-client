/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationalState {
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "devices", skip_serializing_if = "Option::is_none")]
    pub devices: Option<Vec<models::DeviceOperationalState>>,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
}

impl OperationalState {
    pub fn new(status: Status, timestamp: String) -> OperationalState {
        OperationalState {
            status,
            devices: None,
            timestamp,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "maintenance")]
    Maintenance,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

