/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CapabilityRequestMessage {
    #[serde(rename = "type")]
    pub r#type: Type,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Schema version
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    #[serde(rename = "requestedCapabilities", skip_serializing_if = "Option::is_none")]
    pub requested_capabilities: Option<Vec<String>>,
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<Detail>,
}

impl CapabilityRequestMessage {
    pub fn new(r#type: Type, timestamp: String, schema_version: String) -> CapabilityRequestMessage {
        CapabilityRequestMessage {
            r#type,
            timestamp,
            schema_version,
            requested_capabilities: None,
            detail: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CAPABILITY_REQUEST")]
    CapabilityRequest,
}

impl Default for Type {
    fn default() -> Type {
        Self::CapabilityRequest
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Detail {
    #[serde(rename = "basic")]
    Basic,
    #[serde(rename = "detailed")]
    Detailed,
    #[serde(rename = "full")]
    Full,
}

impl Default for Detail {
    fn default() -> Detail {
        Self::Basic
    }
}

