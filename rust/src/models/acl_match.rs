/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AclMatch : ACL match criteria
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AclMatch {
    /// Ethernet type
    #[serde(rename = "eth_type", skip_serializing_if = "Option::is_none")]
    pub eth_type: Option<i32>,
    /// IP protocol number
    #[serde(rename = "ip_proto", skip_serializing_if = "Option::is_none")]
    pub ip_proto: Option<i32>,
    #[serde(rename = "src_ip", skip_serializing_if = "Option::is_none")]
    pub src_ip: Option<Box<models::IpAddressWithPrefix>>,
    #[serde(rename = "dst_ip", skip_serializing_if = "Option::is_none")]
    pub dst_ip: Option<Box<models::IpAddressWithPrefix>>,
    /// TCP source port
    #[serde(rename = "tcp_src", skip_serializing_if = "Option::is_none")]
    pub tcp_src: Option<i32>,
    /// TCP destination port
    #[serde(rename = "tcp_dst", skip_serializing_if = "Option::is_none")]
    pub tcp_dst: Option<i32>,
    /// UDP source port
    #[serde(rename = "udp_src", skip_serializing_if = "Option::is_none")]
    pub udp_src: Option<i32>,
    /// UDP destination port
    #[serde(rename = "udp_dst", skip_serializing_if = "Option::is_none")]
    pub udp_dst: Option<i32>,
    /// ICMP message type
    #[serde(rename = "icmp_type", skip_serializing_if = "Option::is_none")]
    pub icmp_type: Option<i32>,
    /// ICMP message code
    #[serde(rename = "icmp_code", skip_serializing_if = "Option::is_none")]
    pub icmp_code: Option<i32>,
    /// ICMPv6 message type
    #[serde(rename = "icmpv6_type", skip_serializing_if = "Option::is_none")]
    pub icmpv6_type: Option<i32>,
    /// ICMPv6 message code
    #[serde(rename = "icmpv6_code", skip_serializing_if = "Option::is_none")]
    pub icmpv6_code: Option<i32>,
    /// VLAN ID
    #[serde(rename = "vlan_id", skip_serializing_if = "Option::is_none")]
    pub vlan_id: Option<i32>,
    /// Differentiated Services Code Point
    #[serde(rename = "dscp", skip_serializing_if = "Option::is_none")]
    pub dscp: Option<i32>,
    /// TCP flags to match
    #[serde(rename = "tcp_flags", skip_serializing_if = "Option::is_none")]
    pub tcp_flags: Option<Vec<TcpFlags>>,
}

impl AclMatch {
    /// ACL match criteria
    pub fn new() -> AclMatch {
        AclMatch {
            eth_type: None,
            ip_proto: None,
            src_ip: None,
            dst_ip: None,
            tcp_src: None,
            tcp_dst: None,
            udp_src: None,
            udp_dst: None,
            icmp_type: None,
            icmp_code: None,
            icmpv6_type: None,
            icmpv6_code: None,
            vlan_id: None,
            dscp: None,
            tcp_flags: None,
        }
    }
}
/// TCP flags to match
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TcpFlags {
    #[serde(rename = "FIN")]
    Fin,
    #[serde(rename = "SYN")]
    Syn,
    #[serde(rename = "RST")]
    Rst,
    #[serde(rename = "PSH")]
    Psh,
    #[serde(rename = "ACK")]
    Ack,
    #[serde(rename = "URG")]
    Urg,
}

impl Default for TcpFlags {
    fn default() -> TcpFlags {
        Self::Fin
    }
}

