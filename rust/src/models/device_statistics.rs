/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DeviceStatistics : Device statistics
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceStatistics {
    /// Device identifier
    #[serde(rename = "deviceId", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    /// Device name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Device type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Whether the device is enabled
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Device operational status
    #[serde(rename = "operStatus", skip_serializing_if = "Option::is_none")]
    pub oper_status: Option<OperStatus>,
    /// Device administrative status
    #[serde(rename = "adminStatus", skip_serializing_if = "Option::is_none")]
    pub admin_status: Option<AdminStatus>,
    /// List of VLAN IDs
    #[serde(rename = "vlanIds", skip_serializing_if = "Option::is_none")]
    pub vlan_ids: Option<Vec<i32>>,
    /// Last time the device flapped
    #[serde(rename = "lastFlapped", skip_serializing_if = "Option::is_none")]
    pub last_flapped: Option<f64>,
    #[serde(rename = "counters", skip_serializing_if = "Option::is_none")]
    pub counters: Option<Box<models::InterfaceCounters>>,
    #[serde(rename = "qosStats", skip_serializing_if = "Option::is_none")]
    pub qos_stats: Option<Box<models::QoSStats>>,
    #[serde(rename = "errorStats", skip_serializing_if = "Option::is_none")]
    pub error_stats: Option<Box<models::ErrorStats>>,
    #[serde(rename = "opticalStats", skip_serializing_if = "Option::is_none")]
    pub optical_stats: Option<Box<models::DeviceStatisticsOpticalStats>>,
    #[serde(rename = "rateStats", skip_serializing_if = "Option::is_none")]
    pub rate_stats: Option<Box<models::DeviceStatisticsRateStats>>,
}

impl DeviceStatistics {
    /// Device statistics
    pub fn new() -> DeviceStatistics {
        DeviceStatistics {
            device_id: None,
            name: None,
            r#type: None,
            enabled: None,
            oper_status: None,
            admin_status: None,
            vlan_ids: None,
            last_flapped: None,
            counters: None,
            qos_stats: None,
            error_stats: None,
            optical_stats: None,
            rate_stats: None,
        }
    }
}
/// Device operational status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OperStatus {
    #[serde(rename = "up")]
    Up,
    #[serde(rename = "down")]
    Down,
    #[serde(rename = "testing")]
    Testing,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "dormant")]
    Dormant,
    #[serde(rename = "notPresent")]
    NotPresent,
}

impl Default for OperStatus {
    fn default() -> OperStatus {
        Self::Up
    }
}
/// Device administrative status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdminStatus {
    #[serde(rename = "up")]
    Up,
    #[serde(rename = "down")]
    Down,
    #[serde(rename = "testing")]
    Testing,
}

impl Default for AdminStatus {
    fn default() -> AdminStatus {
        Self::Up
    }
}

