/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RebootCommandMessage {
    #[serde(rename = "type")]
    pub r#type: Type,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Schema version
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    #[serde(rename = "device")]
    pub device: Box<models::Device>,
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
    /// Optional scheduled time for reboot
    #[serde(rename = "scheduledTime", skip_serializing_if = "Option::is_none")]
    pub scheduled_time: Option<String>,
}

impl RebootCommandMessage {
    pub fn new(r#type: Type, timestamp: String, schema_version: String, device: models::Device) -> RebootCommandMessage {
        RebootCommandMessage {
            r#type,
            timestamp,
            schema_version,
            device: Box::new(device),
            force: None,
            scheduled_time: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "REBOOT_COMMAND")]
    RebootCommand,
}

impl Default for Type {
    fn default() -> Type {
        Self::RebootCommand
    }
}

