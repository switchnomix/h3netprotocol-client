/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DeviceStatisticsOpticalStats : Optical device statistics
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceStatisticsOpticalStats {
    /// Received optical power
    #[serde(rename = "rxPower", skip_serializing_if = "Option::is_none")]
    pub rx_power: Option<f64>,
    /// Transmitted optical power
    #[serde(rename = "txPower", skip_serializing_if = "Option::is_none")]
    pub tx_power: Option<f64>,
    /// Device temperature
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    /// Device voltage
    #[serde(rename = "voltage", skip_serializing_if = "Option::is_none")]
    pub voltage: Option<f64>,
    /// Device bias
    #[serde(rename = "bias", skip_serializing_if = "Option::is_none")]
    pub bias: Option<f64>,
}

impl DeviceStatisticsOpticalStats {
    /// Optical device statistics
    pub fn new() -> DeviceStatisticsOpticalStats {
        DeviceStatisticsOpticalStats {
            rx_power: None,
            tx_power: None,
            temperature: None,
            voltage: None,
            bias: None,
        }
    }
}

