/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SwitchFeatures : Optional switch features and capabilities
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchFeatures {
    #[serde(rename = "stacking", skip_serializing_if = "Option::is_none")]
    pub stacking: Option<Box<models::SwitchFeaturesStacking>>,
    #[serde(rename = "portChannels", skip_serializing_if = "Option::is_none")]
    pub port_channels: Option<Box<models::SwitchFeaturesPortChannels>>,
    #[serde(rename = "spanningTree", skip_serializing_if = "Option::is_none")]
    pub spanning_tree: Option<Box<models::SpanningTreeConfig>>,
}

impl SwitchFeatures {
    /// Optional switch features and capabilities
    pub fn new() -> SwitchFeatures {
        SwitchFeatures {
            stacking: None,
            port_channels: None,
            spanning_tree: None,
        }
    }
}

