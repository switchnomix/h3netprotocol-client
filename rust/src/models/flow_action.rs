/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlowAction {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "output_port", skip_serializing_if = "Option::is_none")]
    pub output_port: Option<i32>,
    /// Action related to VLAN handling
    #[serde(rename = "vlan_action", skip_serializing_if = "Option::is_none")]
    pub vlan_action: Option<VlanAction>,
}

impl FlowAction {
    pub fn new(action: Action) -> FlowAction {
        FlowAction {
            action,
            output_port: None,
            vlan_action: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "forward")]
    Forward,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "modify")]
    Modify,
    #[serde(rename = "flood")]
    Flood,
    #[serde(rename = "set_vlan")]
    SetVlan,
    #[serde(rename = "strip_vlan")]
    StripVlan,
}

impl Default for Action {
    fn default() -> Action {
        Self::Forward
    }
}
/// Action related to VLAN handling
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VlanAction {
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "pop")]
    Pop,
    #[serde(rename = "modify")]
    Modify,
}

impl Default for VlanAction {
    fn default() -> VlanAction {
        Self::Push
    }
}

