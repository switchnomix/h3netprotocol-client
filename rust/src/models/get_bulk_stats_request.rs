/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetBulkStatsRequest {
    #[serde(rename = "interfaces")]
    pub interfaces: Vec<models::GetBulkStatsRequestInterfacesInner>,
    #[serde(rename = "statsTypes", skip_serializing_if = "Option::is_none")]
    pub stats_types: Option<Vec<StatsTypes>>,
}

impl GetBulkStatsRequest {
    pub fn new(interfaces: Vec<models::GetBulkStatsRequestInterfacesInner>) -> GetBulkStatsRequest {
        GetBulkStatsRequest {
            interfaces,
            stats_types: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatsTypes {
    #[serde(rename = "counters")]
    Counters,
    #[serde(rename = "qos")]
    Qos,
    #[serde(rename = "errors")]
    Errors,
}

impl Default for StatsTypes {
    fn default() -> StatsTypes {
        Self::Counters
    }
}

