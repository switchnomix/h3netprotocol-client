/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdempotencyConflictError {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "errorCode")]
    pub error_code: ErrorCode,
    #[serde(rename = "errorMessage")]
    pub error_message: String,
    /// Details of the original request that used this idempotency key
    #[serde(rename = "originalRequest")]
    pub original_request: serde_json::Value,
    /// Response from the original request
    #[serde(rename = "originalResponse", skip_serializing_if = "Option::is_none")]
    pub original_response: Option<serde_json::Value>,
}

impl IdempotencyConflictError {
    pub fn new(r#type: Type, timestamp: String, error_code: ErrorCode, error_message: String, original_request: serde_json::Value) -> IdempotencyConflictError {
        IdempotencyConflictError {
            r#type,
            timestamp,
            error_code,
            error_message,
            original_request,
            original_response: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "IDEMPOTENCY_CONFLICT")]
    IdempotencyConflict,
}

impl Default for Type {
    fn default() -> Type {
        Self::IdempotencyConflict
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ErrorCode {
    #[serde(rename = "409")]
    Variant409,
}

impl Default for ErrorCode {
    fn default() -> ErrorCode {
        Self::Variant409
    }
}

