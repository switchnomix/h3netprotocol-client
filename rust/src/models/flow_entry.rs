/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlowEntry {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// Device identifier
    #[serde(rename = "deviceId")]
    pub device_id: String,
    /// Table identifier
    #[serde(rename = "tableId")]
    pub table_id: i32,
    /// Flow entry priority, higher values take precedence
    #[serde(rename = "priority")]
    pub priority: i32,
    #[serde(rename = "match")]
    pub r#match: Box<models::FlowMatch>,
    #[serde(rename = "actions")]
    pub actions: Box<models::FlowAction>,
    /// Identifier of the next table to evaluate if this entry matches
    #[serde(rename = "nextTable", skip_serializing_if = "Option::is_none")]
    pub next_table: Option<i32>,
    /// Count of packets matched by this flow entry
    #[serde(rename = "packetCounter", skip_serializing_if = "Option::is_none")]
    pub packet_counter: Option<i32>,
    /// Total bytes matched by this flow entry
    #[serde(rename = "byteCounter", skip_serializing_if = "Option::is_none")]
    pub byte_counter: Option<i32>,
}

impl FlowEntry {
    pub fn new(device_id: String, table_id: i32, priority: i32, r#match: models::FlowMatch, actions: models::FlowAction) -> FlowEntry {
        FlowEntry {
            r#type: None,
            timestamp: None,
            device_id,
            table_id,
            priority,
            r#match: Box::new(r#match),
            actions: Box::new(actions),
            next_table: None,
            packet_counter: None,
            byte_counter: None,
        }
    }
}

