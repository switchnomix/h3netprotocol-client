/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkDiscoveryOptions {
    /// Discovery depth limit
    #[serde(rename = "depth", skip_serializing_if = "Option::is_none")]
    pub depth: Option<i32>,
    /// Specific protocols to use for discovery
    #[serde(rename = "protocols", skip_serializing_if = "Option::is_none")]
    pub protocols: Option<Vec<Protocols>>,
    /// Discovery timeout in seconds
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i32>,
    /// Number of discovery retries
    #[serde(rename = "retries", skip_serializing_if = "Option::is_none")]
    pub retries: Option<i32>,
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Box<models::NetworkDiscoveryOptionsFilters>>,
}

impl NetworkDiscoveryOptions {
    pub fn new() -> NetworkDiscoveryOptions {
        NetworkDiscoveryOptions {
            depth: None,
            protocols: None,
            timeout: None,
            retries: None,
            filters: None,
        }
    }
}
/// Specific protocols to use for discovery
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Protocols {
    #[serde(rename = "lldp")]
    Lldp,
    #[serde(rename = "cdp")]
    Cdp,
    #[serde(rename = "fdb")]
    Fdb,
    #[serde(rename = "bgp_neighbors")]
    BgpNeighbors,
}

impl Default for Protocols {
    fn default() -> Protocols {
        Self::Lldp
    }
}

