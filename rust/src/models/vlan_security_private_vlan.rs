/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VlanSecurityPrivateVlan {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "primaryVlan", skip_serializing_if = "Option::is_none")]
    pub primary_vlan: Option<i32>,
    #[serde(rename = "secondaryVlans", skip_serializing_if = "Option::is_none")]
    pub secondary_vlans: Option<Vec<i32>>,
}

impl VlanSecurityPrivateVlan {
    pub fn new() -> VlanSecurityPrivateVlan {
        VlanSecurityPrivateVlan {
            r#type: None,
            primary_vlan: None,
            secondary_vlans: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "primary")]
    Primary,
    #[serde(rename = "isolated")]
    Isolated,
    #[serde(rename = "community")]
    Community,
}

impl Default for Type {
    fn default() -> Type {
        Self::Primary
    }
}

