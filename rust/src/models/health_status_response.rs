/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HealthStatusResponse {
    #[serde(rename = "type")]
    pub r#type: Type,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Schema version
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    #[serde(rename = "status")]
    pub status: Box<models::HealthStatusMessage>,
    /// Original request ID
    #[serde(rename = "requestId", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
}

impl HealthStatusResponse {
    pub fn new(r#type: Type, timestamp: String, schema_version: String, status: models::HealthStatusMessage) -> HealthStatusResponse {
        HealthStatusResponse {
            r#type,
            timestamp,
            schema_version,
            status: Box::new(status),
            request_id: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "HEALTH_STATUS")]
    HealthStatus,
}

impl Default for Type {
    fn default() -> Type {
        Self::HealthStatus
    }
}

