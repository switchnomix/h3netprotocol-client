/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceSettings {
    /// Type of device configuration message
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Timestamp of the message
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Unique identifier of the device
    #[serde(rename = "deviceId")]
    pub device_id: String,
    #[serde(rename = "hostname")]
    pub hostname: String,
    /// Represents either an IPv4 or IPv6 address
    #[serde(rename = "managementIp", skip_serializing_if = "Option::is_none")]
    pub management_ip: Option<String>,
    #[serde(rename = "snmpCommunity", skip_serializing_if = "Option::is_none")]
    pub snmp_community: Option<String>,
    /// List of NTP servers (can be IP addresses or FQDNs)
    #[serde(rename = "ntpServers", skip_serializing_if = "Option::is_none")]
    pub ntp_servers: Option<Vec<models::DeviceSettingsNtpServersInner>>,
    /// List of syslog servers
    #[serde(rename = "syslogServers", skip_serializing_if = "Option::is_none")]
    pub syslog_servers: Option<Vec<models::DeviceSettingsNtpServersInner>>,
    #[serde(rename = "dnsSettings", skip_serializing_if = "Option::is_none")]
    pub dns_settings: Option<Box<models::DeviceSettingsDnsSettings>>,
}

impl DeviceSettings {
    pub fn new(r#type: Type, timestamp: String, device_id: String, hostname: String) -> DeviceSettings {
        DeviceSettings {
            r#type,
            timestamp,
            device_id,
            hostname,
            management_ip: None,
            snmp_community: None,
            ntp_servers: None,
            syslog_servers: None,
            dns_settings: None,
        }
    }
}
/// Type of device configuration message
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "DEVICE_INFO_REQUEST")]
    DeviceInfoRequest,
    #[serde(rename = "DEVICE_INFO_RESPONSE")]
    DeviceInfoResponse,
    #[serde(rename = "DEVICE_SETTINGS_UPDATE")]
    DeviceSettingsUpdate,
}

impl Default for Type {
    fn default() -> Type {
        Self::DeviceInfoRequest
    }
}

