/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DiscoveredNeighborConnectionDetails : Connection information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscoveredNeighborConnectionDetails {
    #[serde(rename = "localPort", skip_serializing_if = "Option::is_none")]
    pub local_port: Option<String>,
    #[serde(rename = "remotePort", skip_serializing_if = "Option::is_none")]
    pub remote_port: Option<String>,
    #[serde(rename = "linkType", skip_serializing_if = "Option::is_none")]
    pub link_type: Option<String>,
    /// Represents either an IPv4 or IPv6 address
    #[serde(rename = "localAddress", skip_serializing_if = "Option::is_none")]
    pub local_address: Option<String>,
    /// Represents either an IPv4 or IPv6 address
    #[serde(rename = "remoteAddress", skip_serializing_if = "Option::is_none")]
    pub remote_address: Option<String>,
}

impl DiscoveredNeighborConnectionDetails {
    /// Connection information
    pub fn new() -> DiscoveredNeighborConnectionDetails {
        DiscoveredNeighborConnectionDetails {
            local_port: None,
            remote_port: None,
            link_type: None,
            local_address: None,
            remote_address: None,
        }
    }
}

