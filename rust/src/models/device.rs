/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Device {
    /// Unique identifier for the device
    #[serde(rename = "deviceId")]
    pub device_id: String,
    /// Valid hostname according to RFC 1123
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// Represents either an IPv4 or IPv6 address
    #[serde(rename = "managementIp", skip_serializing_if = "Option::is_none")]
    pub management_ip: Option<String>,
    /// MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
    #[serde(rename = "macAddress", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<String>,
    #[serde(rename = "deviceRoles")]
    pub device_roles: Vec<models::DeviceRoleEnum>,
}

impl Device {
    pub fn new(device_id: String, device_roles: Vec<models::DeviceRoleEnum>) -> Device {
        Device {
            device_id,
            hostname: None,
            management_ip: None,
            mac_address: None,
            device_roles,
        }
    }
}

