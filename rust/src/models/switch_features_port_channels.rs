/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchFeaturesPortChannels {
    #[serde(rename = "maxGroups", skip_serializing_if = "Option::is_none")]
    pub max_groups: Option<i32>,
    #[serde(rename = "supportedProtocols", skip_serializing_if = "Option::is_none")]
    pub supported_protocols: Option<Vec<SupportedProtocols>>,
}

impl SwitchFeaturesPortChannels {
    pub fn new() -> SwitchFeaturesPortChannels {
        SwitchFeaturesPortChannels {
            max_groups: None,
            supported_protocols: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SupportedProtocols {
    #[serde(rename = "lacp")]
    Lacp,
    #[serde(rename = "pagp")]
    Pagp,
    #[serde(rename = "static")]
    Static,
}

impl Default for SupportedProtocols {
    fn default() -> SupportedProtocols {
        Self::Lacp
    }
}

