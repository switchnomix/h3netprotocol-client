/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateDeviceRolesRequest {
    #[serde(rename = "type")]
    pub r#type: String,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Client-generated request ID for tracking
    #[serde(rename = "requestId")]
    pub request_id: uuid::Uuid,
    /// Schema version
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    #[serde(rename = "device")]
    pub device: Box<models::Device>,
    #[serde(rename = "newRoles")]
    pub new_roles: Vec<models::Role>,
}

impl UpdateDeviceRolesRequest {
    pub fn new(r#type: String, timestamp: String, request_id: uuid::Uuid, schema_version: String, device: models::Device, new_roles: Vec<models::Role>) -> UpdateDeviceRolesRequest {
        UpdateDeviceRolesRequest {
            r#type,
            timestamp,
            request_id,
            schema_version,
            device: Box::new(device),
            new_roles,
        }
    }
}

