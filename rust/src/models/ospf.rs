/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Ospf {
    #[serde(rename = "processId", skip_serializing_if = "Option::is_none")]
    pub process_id: Option<i32>,
    /// Represents either an IPv4 or IPv6 address
    #[serde(rename = "routerId", skip_serializing_if = "Option::is_none")]
    pub router_id: Option<String>,
    #[serde(rename = "areas", skip_serializing_if = "Option::is_none")]
    pub areas: Option<Vec<models::RoutingConfigOspfAreasInner>>,
}

impl Ospf {
    pub fn new() -> Ospf {
        Ospf {
            process_id: None,
            router_id: None,
            areas: None,
        }
    }
}

