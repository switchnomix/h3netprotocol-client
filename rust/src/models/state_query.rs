/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StateQuery {
    #[serde(rename = "queryType")]
    pub query_type: QueryType,
}

impl StateQuery {
    pub fn new(query_type: QueryType) -> StateQuery {
        StateQuery {
            query_type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QueryType {
    #[serde(rename = "interface_status")]
    InterfaceStatus,
    #[serde(rename = "table_entries")]
    TableEntries,
    #[serde(rename = "arp_table")]
    ArpTable,
    #[serde(rename = "mac_address_table")]
    MacAddressTable,
    #[serde(rename = "route_table")]
    RouteTable,
    #[serde(rename = "optics")]
    Optics,
    #[serde(rename = "environment")]
    Environment,
    #[serde(rename = "bgp_neighbors")]
    BgpNeighbors,
    #[serde(rename = "lldp_neighbors")]
    LldpNeighbors,
    #[serde(rename = "firewallRules")]
    FirewallRules,
    #[serde(rename = "vlans")]
    Vlans,
}

impl Default for QueryType {
    fn default() -> QueryType {
        Self::InterfaceStatus
    }
}

