/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscoveredNeighbor {
    #[serde(rename = "device")]
    pub device: Box<models::Device>,
    #[serde(rename = "discoveryProtocol")]
    pub discovery_protocol: DiscoveryProtocol,
    /// Hops from start point
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<i32>,
    /// Last time device was discovered
    #[serde(rename = "lastSeen", skip_serializing_if = "Option::is_none")]
    pub last_seen: Option<String>,
    /// Discovery confidence score
    #[serde(rename = "confidence", skip_serializing_if = "Option::is_none")]
    pub confidence: Option<f64>,
    #[serde(rename = "connectionDetails", skip_serializing_if = "Option::is_none")]
    pub connection_details: Option<Box<models::DiscoveredNeighborConnectionDetails>>,
}

impl DiscoveredNeighbor {
    pub fn new(device: models::Device, discovery_protocol: DiscoveryProtocol) -> DiscoveredNeighbor {
        DiscoveredNeighbor {
            device: Box::new(device),
            discovery_protocol,
            distance: None,
            last_seen: None,
            confidence: None,
            connection_details: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DiscoveryProtocol {
    #[serde(rename = "lldp")]
    Lldp,
    #[serde(rename = "cdp")]
    Cdp,
    #[serde(rename = "fdb")]
    Fdb,
    #[serde(rename = "bgp_neighbors")]
    BgpNeighbors,
}

impl Default for DiscoveryProtocol {
    fn default() -> DiscoveryProtocol {
        Self::Lldp
    }
}

