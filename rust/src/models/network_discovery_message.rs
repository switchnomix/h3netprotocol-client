/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkDiscoveryMessage {
    #[serde(rename = "type")]
    pub r#type: Type,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Schema version
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    #[serde(rename = "discoveryType")]
    pub discovery_type: DiscoveryType,
    /// Starting points for discovery
    #[serde(rename = "startPoints", skip_serializing_if = "Option::is_none")]
    pub start_points: Option<Vec<String>>,
    /// Subnets to discover
    #[serde(rename = "subnets", skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<models::IpAddressWithPrefix>>,
}

impl NetworkDiscoveryMessage {
    pub fn new(r#type: Type, timestamp: String, schema_version: String, discovery_type: DiscoveryType) -> NetworkDiscoveryMessage {
        NetworkDiscoveryMessage {
            r#type,
            timestamp,
            schema_version,
            discovery_type,
            start_points: None,
            subnets: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "NETWORK_DISCOVERY")]
    NetworkDiscovery,
}

impl Default for Type {
    fn default() -> Type {
        Self::NetworkDiscovery
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DiscoveryType {
    #[serde(rename = "lldp")]
    Lldp,
    #[serde(rename = "cdp")]
    Cdp,
    #[serde(rename = "fdb")]
    Fdb,
    #[serde(rename = "bgp_neighbors")]
    BgpNeighbors,
}

impl Default for DiscoveryType {
    fn default() -> DiscoveryType {
        Self::Lldp
    }
}

