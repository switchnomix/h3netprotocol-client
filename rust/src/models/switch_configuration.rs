/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchConfiguration {
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(rename = "managementIp", skip_serializing_if = "Option::is_none")]
    pub management_ip: Option<String>,
    #[serde(rename = "deviceMode", skip_serializing_if = "Option::is_none")]
    pub device_mode: Option<DeviceMode>,
    #[serde(rename = "systemSettings", skip_serializing_if = "Option::is_none")]
    pub system_settings: Option<Box<models::SystemSettings>>,
}

impl SwitchConfiguration {
    pub fn new() -> SwitchConfiguration {
        SwitchConfiguration {
            hostname: None,
            management_ip: None,
            device_mode: None,
            system_settings: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeviceMode {
    #[serde(rename = "STANDALONE")]
    Standalone,
    #[serde(rename = "STACKED")]
    Stacked,
}

impl Default for DeviceMode {
    fn default() -> DeviceMode {
        Self::Standalone
    }
}

