/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchActionTable {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// Schema version
    #[serde(rename = "schemaVersion", skip_serializing_if = "Option::is_none")]
    pub schema_version: Option<String>,
    /// Device identifier
    #[serde(rename = "deviceId")]
    pub device_id: String,
    /// Unique table identifier for this device
    #[serde(rename = "tableId")]
    pub table_id: i32,
    /// Human-readable table name
    #[serde(rename = "name")]
    pub name: String,
    /// ID of the next table in the chain
    #[serde(rename = "nextTableId", skip_serializing_if = "Option::is_none")]
    pub next_table_id: Option<i32>,
    /// Request identifier for tracking
    #[serde(rename = "requestId", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    #[serde(rename = "flowEntries", skip_serializing_if = "Option::is_none")]
    pub flow_entries: Option<Vec<models::FlowEntry>>,
}

impl MatchActionTable {
    pub fn new(device_id: String, table_id: i32, name: String) -> MatchActionTable {
        MatchActionTable {
            r#type: None,
            timestamp: None,
            schema_version: None,
            device_id,
            table_id,
            name,
            next_table_id: None,
            request_id: None,
            flow_entries: None,
        }
    }
}

