/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MeterStatsBandsInner {
    /// Band rate
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<f64>,
    /// Band burst size
    #[serde(rename = "burstSize", skip_serializing_if = "Option::is_none")]
    pub burst_size: Option<f64>,
    /// Number of packets processed by this band
    #[serde(rename = "packetCount", skip_serializing_if = "Option::is_none")]
    pub packet_count: Option<f64>,
    /// Number of bytes processed by this band
    #[serde(rename = "byteCount", skip_serializing_if = "Option::is_none")]
    pub byte_count: Option<f64>,
}

impl MeterStatsBandsInner {
    pub fn new() -> MeterStatsBandsInner {
        MeterStatsBandsInner {
            rate: None,
            burst_size: None,
            packet_count: None,
            byte_count: None,
        }
    }
}

