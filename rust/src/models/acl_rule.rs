/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AclRule : ACL rule definition
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AclRule {
    /// Unique identifier for the rule
    #[serde(rename = "ruleId")]
    pub rule_id: i32,
    /// Human-readable description of the rule
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "matches")]
    pub matches: Box<models::AclMatch>,
    #[serde(rename = "actions")]
    pub actions: Box<models::AclAction>,
    /// Whether the rule is enabled
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Number of times this rule has been matched
    #[serde(rename = "hitCount", skip_serializing_if = "Option::is_none")]
    pub hit_count: Option<i32>,
    /// Timestamp of the last match
    #[serde(rename = "lastHit", skip_serializing_if = "Option::is_none")]
    pub last_hit: Option<String>,
}

impl AclRule {
    /// ACL rule definition
    pub fn new(rule_id: i32, matches: models::AclMatch, actions: models::AclAction) -> AclRule {
        AclRule {
            rule_id,
            description: None,
            matches: Box::new(matches),
            actions: Box::new(actions),
            enabled: None,
            hit_count: None,
            last_hit: None,
        }
    }
}

