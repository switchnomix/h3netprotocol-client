/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchDevice {
    #[serde(rename = "deviceId")]
    pub device_id: String,
    #[serde(rename = "deviceModel", skip_serializing_if = "Option::is_none")]
    pub device_model: Option<String>,
    #[serde(rename = "firmwareVersion", skip_serializing_if = "Option::is_none")]
    pub firmware_version: Option<String>,
    #[serde(rename = "networkInterfaces", skip_serializing_if = "Option::is_none")]
    pub network_interfaces: Option<Vec<models::SchemasNetworkInterface>>,
    #[serde(rename = "deviceConfig", skip_serializing_if = "Option::is_none")]
    pub device_config: Option<Box<models::SwitchConfiguration>>,
}

impl SwitchDevice {
    pub fn new(device_id: String) -> SwitchDevice {
        SwitchDevice {
            device_id,
            device_model: None,
            firmware_version: None,
            network_interfaces: None,
            device_config: None,
        }
    }
}

