/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Vlan {
    #[serde(rename = "vlanId")]
    pub vlan_id: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "ports")]
    pub ports: Box<models::VlanPorts>,
    /// Ingress ACL applied to VLAN
    #[serde(rename = "aclIn", skip_serializing_if = "Option::is_none")]
    pub acl_in: Option<String>,
    /// Egress ACL applied to VLAN
    #[serde(rename = "aclOut", skip_serializing_if = "Option::is_none")]
    pub acl_out: Option<String>,
    /// MAC address for the VLAN's router interface
    #[serde(rename = "vVLANRouterMac", skip_serializing_if = "Option::is_none")]
    pub v_vlan_router_mac: Option<String>,
    #[serde(rename = "interVLANRoutingVips", skip_serializing_if = "Option::is_none")]
    pub inter_vlan_routing_vips: Option<Vec<models::IpConfig>>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Box<models::VlanProperties>>,
    #[serde(rename = "security", skip_serializing_if = "Option::is_none")]
    pub security: Option<Box<models::VlanSecurity>>,
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<Box<models::VlanQos>>,
}

impl Vlan {
    pub fn new(vlan_id: i32, name: String, ports: models::VlanPorts) -> Vlan {
        Vlan {
            vlan_id,
            name,
            description: None,
            status: None,
            ports: Box::new(ports),
            acl_in: None,
            acl_out: None,
            v_vlan_router_mac: None,
            inter_vlan_routing_vips: None,
            properties: None,
            security: None,
            qos: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "suspend")]
    Suspend,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

