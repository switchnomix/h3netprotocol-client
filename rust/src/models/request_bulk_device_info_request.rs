/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestBulkDeviceInfoRequest {
    /// Must be DEVICE_INFO_REQUEST
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Request timestamp
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// List of device IDs
    #[serde(rename = "devices")]
    pub devices: Vec<String>,
    /// Schema version
    #[serde(rename = "schemaVersion", skip_serializing_if = "Option::is_none")]
    pub schema_version: Option<String>,
}

impl RequestBulkDeviceInfoRequest {
    pub fn new(r#type: Type, devices: Vec<String>) -> RequestBulkDeviceInfoRequest {
        RequestBulkDeviceInfoRequest {
            r#type,
            timestamp: None,
            devices,
            schema_version: None,
        }
    }
}
/// Must be DEVICE_INFO_REQUEST
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "DEVICE_INFO_REQUEST")]
    DeviceInfoRequest,
}

impl Default for Type {
    fn default() -> Type {
        Self::DeviceInfoRequest
    }
}

