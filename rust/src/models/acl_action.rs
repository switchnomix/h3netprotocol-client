/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AclAction : ACL action configuration
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AclAction {
    /// Allow traffic matching this rule
    #[serde(rename = "allow", skip_serializing_if = "Option::is_none")]
    pub allow: Option<bool>,
    /// Deny traffic matching this rule
    #[serde(rename = "deny", skip_serializing_if = "Option::is_none")]
    pub deny: Option<bool>,
    /// Mirror traffic to specified port
    #[serde(rename = "mirror", skip_serializing_if = "Option::is_none")]
    pub mirror: Option<i32>,
    /// Output port for matching traffic
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<i32>,
    #[serde(rename = "ratelimit", skip_serializing_if = "Option::is_none")]
    pub ratelimit: Option<Box<models::AclActionRatelimit>>,
    #[serde(rename = "redirect", skip_serializing_if = "Option::is_none")]
    pub redirect: Option<Box<models::AclActionRedirect>>,
    #[serde(rename = "logging", skip_serializing_if = "Option::is_none")]
    pub logging: Option<Box<models::AclActionLogging>>,
}

impl AclAction {
    /// ACL action configuration
    pub fn new() -> AclAction {
        AclAction {
            allow: None,
            deny: None,
            mirror: None,
            output: None,
            ratelimit: None,
            redirect: None,
            logging: None,
        }
    }
}

