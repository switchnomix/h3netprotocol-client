/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventNotificationMessage {
    /// Message type identifier
    #[serde(rename = "type")]
    pub r#type: String,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Schema version
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    /// Type of event notification
    #[serde(rename = "eventType")]
    pub event_type: EventType,
    /// Event severity level
    #[serde(rename = "severity")]
    pub severity: Severity,
    #[serde(rename = "source")]
    pub source: Box<models::EventNotificationMessageAllOfSource>,
    /// Event description
    #[serde(rename = "description")]
    pub description: String,
    /// Event-specific data
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl EventNotificationMessage {
    pub fn new(r#type: String, timestamp: String, schema_version: String, event_type: EventType, severity: Severity, source: models::EventNotificationMessageAllOfSource, description: String) -> EventNotificationMessage {
        EventNotificationMessage {
            r#type,
            timestamp,
            schema_version,
            event_type,
            severity,
            source: Box::new(source),
            description,
            data: None,
        }
    }
}
/// Type of event notification
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "CONFIG_CHANGE")]
    ConfigChange,
    #[serde(rename = "STATE_CHANGE")]
    StateChange,
    #[serde(rename = "ALARM")]
    Alarm,
    #[serde(rename = "THRESHOLD_BREACH")]
    ThresholdBreach,
    #[serde(rename = "SECURITY_EVENT")]
    SecurityEvent,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::ConfigChange
    }
}
/// Event severity level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Info
    }
}

