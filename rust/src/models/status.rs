/*
 * H3Net Protocol API
 *
 * H3Net Protocol schema with various messages and configurations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: h3netprotocol@googlegroups.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Status : Status information with type and timestamp
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Status {
    #[serde(rename = "type")]
    pub r#type: Type,
    /// ISO 8601 formatted timestamp with timezone
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Current state of the component or system
    #[serde(rename = "state")]
    pub state: State,
}

impl Status {
    /// Status information with type and timestamp
    pub fn new(r#type: Type, timestamp: String, state: State) -> Status {
        Status {
            r#type,
            timestamp,
            state,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "STATUS")]
    Status,
}

impl Default for Type {
    fn default() -> Type {
        Self::Status
    }
}
/// Current state of the component or system
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "healthy")]
    Healthy,
    #[serde(rename = "degraded")]
    Degraded,
    #[serde(rename = "unhealthy")]
    Unhealthy,
}

impl Default for State {
    fn default() -> State {
        Self::Healthy
    }
}

