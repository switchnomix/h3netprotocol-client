/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MetricData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricData{}

// MetricData Generic metric data structure
type MetricData struct {
	Name string `json:"name"`
	Value float32 `json:"value"`
	Unit *string `json:"unit,omitempty"`
	Timestamp time.Time `json:"timestamp"`
}

type _MetricData MetricData

// NewMetricData instantiates a new MetricData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricData(name string, value float32, timestamp time.Time) *MetricData {
	this := MetricData{}
	this.Name = name
	this.Value = value
	this.Timestamp = timestamp
	return &this
}

// NewMetricDataWithDefaults instantiates a new MetricData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDataWithDefaults() *MetricData {
	this := MetricData{}
	return &this
}

// GetName returns the Name field value
func (o *MetricData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetricData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetricData) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *MetricData) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MetricData) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MetricData) SetValue(v float32) {
	o.Value = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *MetricData) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricData) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *MetricData) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *MetricData) SetUnit(v string) {
	o.Unit = &v
}

// GetTimestamp returns the Timestamp field value
func (o *MetricData) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *MetricData) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *MetricData) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o MetricData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *MetricData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricData := _MetricData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricData)

	if err != nil {
		return err
	}

	*o = MetricData(varMetricData)

	return err
}

type NullableMetricData struct {
	value *MetricData
	isSet bool
}

func (v NullableMetricData) Get() *MetricData {
	return v.value
}

func (v *NullableMetricData) Set(val *MetricData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricData(val *MetricData) *NullableMetricData {
	return &NullableMetricData{value: val, isSet: true}
}

func (v NullableMetricData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


