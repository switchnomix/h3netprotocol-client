/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the NetworkTopology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkTopology{}

// NetworkTopology Network topology information
type NetworkTopology struct {
	// Network nodes/devices
	Nodes []Device `json:"nodes"`
	// Network links between devices
	Links []NetworkTopologyLinksInner `json:"links"`
	// Timestamp of last topology update
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

type _NetworkTopology NetworkTopology

// NewNetworkTopology instantiates a new NetworkTopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTopology(nodes []Device, links []NetworkTopologyLinksInner) *NetworkTopology {
	this := NetworkTopology{}
	this.Nodes = nodes
	this.Links = links
	return &this
}

// NewNetworkTopologyWithDefaults instantiates a new NetworkTopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTopologyWithDefaults() *NetworkTopology {
	this := NetworkTopology{}
	return &this
}

// GetNodes returns the Nodes field value
func (o *NetworkTopology) GetNodes() []Device {
	if o == nil {
		var ret []Device
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *NetworkTopology) GetNodesOk() ([]Device, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nodes, true
}

// SetNodes sets field value
func (o *NetworkTopology) SetNodes(v []Device) {
	o.Nodes = v
}

// GetLinks returns the Links field value
func (o *NetworkTopology) GetLinks() []NetworkTopologyLinksInner {
	if o == nil {
		var ret []NetworkTopologyLinksInner
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *NetworkTopology) GetLinksOk() ([]NetworkTopologyLinksInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *NetworkTopology) SetLinks(v []NetworkTopologyLinksInner) {
	o.Links = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *NetworkTopology) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTopology) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *NetworkTopology) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *NetworkTopology) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o NetworkTopology) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkTopology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodes"] = o.Nodes
	toSerialize["links"] = o.Links
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return toSerialize, nil
}

func (o *NetworkTopology) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodes",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkTopology := _NetworkTopology{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkTopology)

	if err != nil {
		return err
	}

	*o = NetworkTopology(varNetworkTopology)

	return err
}

type NullableNetworkTopology struct {
	value *NetworkTopology
	isSet bool
}

func (v NullableNetworkTopology) Get() *NetworkTopology {
	return v.value
}

func (v *NullableNetworkTopology) Set(val *NetworkTopology) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTopology) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTopology(val *NetworkTopology) *NullableNetworkTopology {
	return &NullableNetworkTopology{value: val, isSet: true}
}

func (v NullableNetworkTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


