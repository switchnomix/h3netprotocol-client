/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the SwitchDeviceConfigAllOfPowerSupplies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchDeviceConfigAllOfPowerSupplies{}

// SwitchDeviceConfigAllOfPowerSupplies struct for SwitchDeviceConfigAllOfPowerSupplies
type SwitchDeviceConfigAllOfPowerSupplies struct {
	Id *string `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewSwitchDeviceConfigAllOfPowerSupplies instantiates a new SwitchDeviceConfigAllOfPowerSupplies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchDeviceConfigAllOfPowerSupplies() *SwitchDeviceConfigAllOfPowerSupplies {
	this := SwitchDeviceConfigAllOfPowerSupplies{}
	return &this
}

// NewSwitchDeviceConfigAllOfPowerSuppliesWithDefaults instantiates a new SwitchDeviceConfigAllOfPowerSupplies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchDeviceConfigAllOfPowerSuppliesWithDefaults() *SwitchDeviceConfigAllOfPowerSupplies {
	this := SwitchDeviceConfigAllOfPowerSupplies{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SwitchDeviceConfigAllOfPowerSupplies) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfigAllOfPowerSupplies) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SwitchDeviceConfigAllOfPowerSupplies) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SwitchDeviceConfigAllOfPowerSupplies) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SwitchDeviceConfigAllOfPowerSupplies) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfigAllOfPowerSupplies) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SwitchDeviceConfigAllOfPowerSupplies) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SwitchDeviceConfigAllOfPowerSupplies) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SwitchDeviceConfigAllOfPowerSupplies) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfigAllOfPowerSupplies) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SwitchDeviceConfigAllOfPowerSupplies) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SwitchDeviceConfigAllOfPowerSupplies) SetType(v string) {
	o.Type = &v
}

func (o SwitchDeviceConfigAllOfPowerSupplies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchDeviceConfigAllOfPowerSupplies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSwitchDeviceConfigAllOfPowerSupplies struct {
	value *SwitchDeviceConfigAllOfPowerSupplies
	isSet bool
}

func (v NullableSwitchDeviceConfigAllOfPowerSupplies) Get() *SwitchDeviceConfigAllOfPowerSupplies {
	return v.value
}

func (v *NullableSwitchDeviceConfigAllOfPowerSupplies) Set(val *SwitchDeviceConfigAllOfPowerSupplies) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchDeviceConfigAllOfPowerSupplies) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchDeviceConfigAllOfPowerSupplies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchDeviceConfigAllOfPowerSupplies(val *SwitchDeviceConfigAllOfPowerSupplies) *NullableSwitchDeviceConfigAllOfPowerSupplies {
	return &NullableSwitchDeviceConfigAllOfPowerSupplies{value: val, isSet: true}
}

func (v NullableSwitchDeviceConfigAllOfPowerSupplies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchDeviceConfigAllOfPowerSupplies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


