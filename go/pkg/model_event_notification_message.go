/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EventNotificationMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotificationMessage{}

// EventNotificationMessage struct for EventNotificationMessage
type EventNotificationMessage struct {
	// Message type identifier
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	// Type of event notification
	EventType string `json:"eventType"`
	// Event severity level
	Severity string `json:"severity"`
	Source EventNotificationMessageAllOfSource `json:"source"`
	// Event description
	Description string `json:"description"`
	// Event-specific data
	Data map[string]interface{} `json:"data,omitempty"`
}

type _EventNotificationMessage EventNotificationMessage

// NewEventNotificationMessage instantiates a new EventNotificationMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotificationMessage(type_ string, timestamp time.Time, schemaVersion string, eventType string, severity string, source EventNotificationMessageAllOfSource, description string) *EventNotificationMessage {
	this := EventNotificationMessage{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.EventType = eventType
	this.Severity = severity
	this.Source = source
	this.Description = description
	return &this
}

// NewEventNotificationMessageWithDefaults instantiates a new EventNotificationMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationMessageWithDefaults() *EventNotificationMessage {
	this := EventNotificationMessage{}
	return &this
}

// GetType returns the Type field value
func (o *EventNotificationMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventNotificationMessage) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *EventNotificationMessage) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventNotificationMessage) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *EventNotificationMessage) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *EventNotificationMessage) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetEventType returns the EventType field value
func (o *EventNotificationMessage) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventNotificationMessage) SetEventType(v string) {
	o.EventType = v
}

// GetSeverity returns the Severity field value
func (o *EventNotificationMessage) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *EventNotificationMessage) SetSeverity(v string) {
	o.Severity = v
}

// GetSource returns the Source field value
func (o *EventNotificationMessage) GetSource() EventNotificationMessageAllOfSource {
	if o == nil {
		var ret EventNotificationMessageAllOfSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetSourceOk() (*EventNotificationMessageAllOfSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *EventNotificationMessage) SetSource(v EventNotificationMessageAllOfSource) {
	o.Source = v
}

// GetDescription returns the Description field value
func (o *EventNotificationMessage) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EventNotificationMessage) SetDescription(v string) {
	o.Description = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventNotificationMessage) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotificationMessage) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventNotificationMessage) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *EventNotificationMessage) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o EventNotificationMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotificationMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["eventType"] = o.EventType
	toSerialize["severity"] = o.Severity
	toSerialize["source"] = o.Source
	toSerialize["description"] = o.Description
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *EventNotificationMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"eventType",
		"severity",
		"source",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventNotificationMessage := _EventNotificationMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventNotificationMessage)

	if err != nil {
		return err
	}

	*o = EventNotificationMessage(varEventNotificationMessage)

	return err
}

type NullableEventNotificationMessage struct {
	value *EventNotificationMessage
	isSet bool
}

func (v NullableEventNotificationMessage) Get() *EventNotificationMessage {
	return v.value
}

func (v *NullableEventNotificationMessage) Set(val *EventNotificationMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotificationMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotificationMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotificationMessage(val *EventNotificationMessage) *NullableEventNotificationMessage {
	return &NullableEventNotificationMessage{value: val, isSet: true}
}

func (v NullableEventNotificationMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotificationMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


