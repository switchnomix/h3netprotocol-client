/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DeviceOperationalState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceOperationalState{}

// DeviceOperationalState struct for DeviceOperationalState
type DeviceOperationalState struct {
	DeviceId string `json:"deviceId"`
	Status string `json:"status"`
	LastSeen *time.Time `json:"lastSeen,omitempty"`
	Uptime *string `json:"uptime,omitempty"`
	Interfaces []InterfaceOperationalState `json:"interfaces,omitempty"`
}

type _DeviceOperationalState DeviceOperationalState

// NewDeviceOperationalState instantiates a new DeviceOperationalState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceOperationalState(deviceId string, status string) *DeviceOperationalState {
	this := DeviceOperationalState{}
	this.DeviceId = deviceId
	this.Status = status
	return &this
}

// NewDeviceOperationalStateWithDefaults instantiates a new DeviceOperationalState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceOperationalStateWithDefaults() *DeviceOperationalState {
	this := DeviceOperationalState{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *DeviceOperationalState) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *DeviceOperationalState) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *DeviceOperationalState) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetStatus returns the Status field value
func (o *DeviceOperationalState) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DeviceOperationalState) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DeviceOperationalState) SetStatus(v string) {
	o.Status = v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *DeviceOperationalState) GetLastSeen() time.Time {
	if o == nil || IsNil(o.LastSeen) {
		var ret time.Time
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOperationalState) GetLastSeenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *DeviceOperationalState) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given time.Time and assigns it to the LastSeen field.
func (o *DeviceOperationalState) SetLastSeen(v time.Time) {
	o.LastSeen = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *DeviceOperationalState) GetUptime() string {
	if o == nil || IsNil(o.Uptime) {
		var ret string
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOperationalState) GetUptimeOk() (*string, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *DeviceOperationalState) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given string and assigns it to the Uptime field.
func (o *DeviceOperationalState) SetUptime(v string) {
	o.Uptime = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *DeviceOperationalState) GetInterfaces() []InterfaceOperationalState {
	if o == nil || IsNil(o.Interfaces) {
		var ret []InterfaceOperationalState
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOperationalState) GetInterfacesOk() ([]InterfaceOperationalState, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *DeviceOperationalState) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []InterfaceOperationalState and assigns it to the Interfaces field.
func (o *DeviceOperationalState) SetInterfaces(v []InterfaceOperationalState) {
	o.Interfaces = v
}

func (o DeviceOperationalState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceOperationalState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["status"] = o.Status
	if !IsNil(o.LastSeen) {
		toSerialize["lastSeen"] = o.LastSeen
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	return toSerialize, nil
}

func (o *DeviceOperationalState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceId",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceOperationalState := _DeviceOperationalState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceOperationalState)

	if err != nil {
		return err
	}

	*o = DeviceOperationalState(varDeviceOperationalState)

	return err
}

type NullableDeviceOperationalState struct {
	value *DeviceOperationalState
	isSet bool
}

func (v NullableDeviceOperationalState) Get() *DeviceOperationalState {
	return v.value
}

func (v *NullableDeviceOperationalState) Set(val *DeviceOperationalState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceOperationalState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceOperationalState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceOperationalState(val *DeviceOperationalState) *NullableDeviceOperationalState {
	return &NullableDeviceOperationalState{value: val, isSet: true}
}

func (v NullableDeviceOperationalState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceOperationalState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


