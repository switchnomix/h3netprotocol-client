/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the InterfaceCounters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceCounters{}

// InterfaceCounters Interface counter statistics
type InterfaceCounters struct {
	RxBytes *float32 `json:"rxBytes,omitempty"`
	RxPackets *float32 `json:"rxPackets,omitempty"`
	RxErrors *float32 `json:"rxErrors,omitempty"`
	RxDropped *float32 `json:"rxDropped,omitempty"`
	RxOverruns *float32 `json:"rxOverruns,omitempty"`
	RxFrame *float32 `json:"rxFrame,omitempty"`
	TxBytes *float32 `json:"txBytes,omitempty"`
	TxPackets *float32 `json:"txPackets,omitempty"`
	TxErrors *float32 `json:"txErrors,omitempty"`
	TxDropped *float32 `json:"txDropped,omitempty"`
	TxOverruns *float32 `json:"txOverruns,omitempty"`
	TxCollisions *float32 `json:"txCollisions,omitempty"`
	Multicast *float32 `json:"multicast,omitempty"`
	Broadcast *float32 `json:"broadcast,omitempty"`
}

// NewInterfaceCounters instantiates a new InterfaceCounters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceCounters() *InterfaceCounters {
	this := InterfaceCounters{}
	return &this
}

// NewInterfaceCountersWithDefaults instantiates a new InterfaceCounters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceCountersWithDefaults() *InterfaceCounters {
	this := InterfaceCounters{}
	return &this
}

// GetRxBytes returns the RxBytes field value if set, zero value otherwise.
func (o *InterfaceCounters) GetRxBytes() float32 {
	if o == nil || IsNil(o.RxBytes) {
		var ret float32
		return ret
	}
	return *o.RxBytes
}

// GetRxBytesOk returns a tuple with the RxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetRxBytesOk() (*float32, bool) {
	if o == nil || IsNil(o.RxBytes) {
		return nil, false
	}
	return o.RxBytes, true
}

// HasRxBytes returns a boolean if a field has been set.
func (o *InterfaceCounters) HasRxBytes() bool {
	if o != nil && !IsNil(o.RxBytes) {
		return true
	}

	return false
}

// SetRxBytes gets a reference to the given float32 and assigns it to the RxBytes field.
func (o *InterfaceCounters) SetRxBytes(v float32) {
	o.RxBytes = &v
}

// GetRxPackets returns the RxPackets field value if set, zero value otherwise.
func (o *InterfaceCounters) GetRxPackets() float32 {
	if o == nil || IsNil(o.RxPackets) {
		var ret float32
		return ret
	}
	return *o.RxPackets
}

// GetRxPacketsOk returns a tuple with the RxPackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetRxPacketsOk() (*float32, bool) {
	if o == nil || IsNil(o.RxPackets) {
		return nil, false
	}
	return o.RxPackets, true
}

// HasRxPackets returns a boolean if a field has been set.
func (o *InterfaceCounters) HasRxPackets() bool {
	if o != nil && !IsNil(o.RxPackets) {
		return true
	}

	return false
}

// SetRxPackets gets a reference to the given float32 and assigns it to the RxPackets field.
func (o *InterfaceCounters) SetRxPackets(v float32) {
	o.RxPackets = &v
}

// GetRxErrors returns the RxErrors field value if set, zero value otherwise.
func (o *InterfaceCounters) GetRxErrors() float32 {
	if o == nil || IsNil(o.RxErrors) {
		var ret float32
		return ret
	}
	return *o.RxErrors
}

// GetRxErrorsOk returns a tuple with the RxErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetRxErrorsOk() (*float32, bool) {
	if o == nil || IsNil(o.RxErrors) {
		return nil, false
	}
	return o.RxErrors, true
}

// HasRxErrors returns a boolean if a field has been set.
func (o *InterfaceCounters) HasRxErrors() bool {
	if o != nil && !IsNil(o.RxErrors) {
		return true
	}

	return false
}

// SetRxErrors gets a reference to the given float32 and assigns it to the RxErrors field.
func (o *InterfaceCounters) SetRxErrors(v float32) {
	o.RxErrors = &v
}

// GetRxDropped returns the RxDropped field value if set, zero value otherwise.
func (o *InterfaceCounters) GetRxDropped() float32 {
	if o == nil || IsNil(o.RxDropped) {
		var ret float32
		return ret
	}
	return *o.RxDropped
}

// GetRxDroppedOk returns a tuple with the RxDropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetRxDroppedOk() (*float32, bool) {
	if o == nil || IsNil(o.RxDropped) {
		return nil, false
	}
	return o.RxDropped, true
}

// HasRxDropped returns a boolean if a field has been set.
func (o *InterfaceCounters) HasRxDropped() bool {
	if o != nil && !IsNil(o.RxDropped) {
		return true
	}

	return false
}

// SetRxDropped gets a reference to the given float32 and assigns it to the RxDropped field.
func (o *InterfaceCounters) SetRxDropped(v float32) {
	o.RxDropped = &v
}

// GetRxOverruns returns the RxOverruns field value if set, zero value otherwise.
func (o *InterfaceCounters) GetRxOverruns() float32 {
	if o == nil || IsNil(o.RxOverruns) {
		var ret float32
		return ret
	}
	return *o.RxOverruns
}

// GetRxOverrunsOk returns a tuple with the RxOverruns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetRxOverrunsOk() (*float32, bool) {
	if o == nil || IsNil(o.RxOverruns) {
		return nil, false
	}
	return o.RxOverruns, true
}

// HasRxOverruns returns a boolean if a field has been set.
func (o *InterfaceCounters) HasRxOverruns() bool {
	if o != nil && !IsNil(o.RxOverruns) {
		return true
	}

	return false
}

// SetRxOverruns gets a reference to the given float32 and assigns it to the RxOverruns field.
func (o *InterfaceCounters) SetRxOverruns(v float32) {
	o.RxOverruns = &v
}

// GetRxFrame returns the RxFrame field value if set, zero value otherwise.
func (o *InterfaceCounters) GetRxFrame() float32 {
	if o == nil || IsNil(o.RxFrame) {
		var ret float32
		return ret
	}
	return *o.RxFrame
}

// GetRxFrameOk returns a tuple with the RxFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetRxFrameOk() (*float32, bool) {
	if o == nil || IsNil(o.RxFrame) {
		return nil, false
	}
	return o.RxFrame, true
}

// HasRxFrame returns a boolean if a field has been set.
func (o *InterfaceCounters) HasRxFrame() bool {
	if o != nil && !IsNil(o.RxFrame) {
		return true
	}

	return false
}

// SetRxFrame gets a reference to the given float32 and assigns it to the RxFrame field.
func (o *InterfaceCounters) SetRxFrame(v float32) {
	o.RxFrame = &v
}

// GetTxBytes returns the TxBytes field value if set, zero value otherwise.
func (o *InterfaceCounters) GetTxBytes() float32 {
	if o == nil || IsNil(o.TxBytes) {
		var ret float32
		return ret
	}
	return *o.TxBytes
}

// GetTxBytesOk returns a tuple with the TxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetTxBytesOk() (*float32, bool) {
	if o == nil || IsNil(o.TxBytes) {
		return nil, false
	}
	return o.TxBytes, true
}

// HasTxBytes returns a boolean if a field has been set.
func (o *InterfaceCounters) HasTxBytes() bool {
	if o != nil && !IsNil(o.TxBytes) {
		return true
	}

	return false
}

// SetTxBytes gets a reference to the given float32 and assigns it to the TxBytes field.
func (o *InterfaceCounters) SetTxBytes(v float32) {
	o.TxBytes = &v
}

// GetTxPackets returns the TxPackets field value if set, zero value otherwise.
func (o *InterfaceCounters) GetTxPackets() float32 {
	if o == nil || IsNil(o.TxPackets) {
		var ret float32
		return ret
	}
	return *o.TxPackets
}

// GetTxPacketsOk returns a tuple with the TxPackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetTxPacketsOk() (*float32, bool) {
	if o == nil || IsNil(o.TxPackets) {
		return nil, false
	}
	return o.TxPackets, true
}

// HasTxPackets returns a boolean if a field has been set.
func (o *InterfaceCounters) HasTxPackets() bool {
	if o != nil && !IsNil(o.TxPackets) {
		return true
	}

	return false
}

// SetTxPackets gets a reference to the given float32 and assigns it to the TxPackets field.
func (o *InterfaceCounters) SetTxPackets(v float32) {
	o.TxPackets = &v
}

// GetTxErrors returns the TxErrors field value if set, zero value otherwise.
func (o *InterfaceCounters) GetTxErrors() float32 {
	if o == nil || IsNil(o.TxErrors) {
		var ret float32
		return ret
	}
	return *o.TxErrors
}

// GetTxErrorsOk returns a tuple with the TxErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetTxErrorsOk() (*float32, bool) {
	if o == nil || IsNil(o.TxErrors) {
		return nil, false
	}
	return o.TxErrors, true
}

// HasTxErrors returns a boolean if a field has been set.
func (o *InterfaceCounters) HasTxErrors() bool {
	if o != nil && !IsNil(o.TxErrors) {
		return true
	}

	return false
}

// SetTxErrors gets a reference to the given float32 and assigns it to the TxErrors field.
func (o *InterfaceCounters) SetTxErrors(v float32) {
	o.TxErrors = &v
}

// GetTxDropped returns the TxDropped field value if set, zero value otherwise.
func (o *InterfaceCounters) GetTxDropped() float32 {
	if o == nil || IsNil(o.TxDropped) {
		var ret float32
		return ret
	}
	return *o.TxDropped
}

// GetTxDroppedOk returns a tuple with the TxDropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetTxDroppedOk() (*float32, bool) {
	if o == nil || IsNil(o.TxDropped) {
		return nil, false
	}
	return o.TxDropped, true
}

// HasTxDropped returns a boolean if a field has been set.
func (o *InterfaceCounters) HasTxDropped() bool {
	if o != nil && !IsNil(o.TxDropped) {
		return true
	}

	return false
}

// SetTxDropped gets a reference to the given float32 and assigns it to the TxDropped field.
func (o *InterfaceCounters) SetTxDropped(v float32) {
	o.TxDropped = &v
}

// GetTxOverruns returns the TxOverruns field value if set, zero value otherwise.
func (o *InterfaceCounters) GetTxOverruns() float32 {
	if o == nil || IsNil(o.TxOverruns) {
		var ret float32
		return ret
	}
	return *o.TxOverruns
}

// GetTxOverrunsOk returns a tuple with the TxOverruns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetTxOverrunsOk() (*float32, bool) {
	if o == nil || IsNil(o.TxOverruns) {
		return nil, false
	}
	return o.TxOverruns, true
}

// HasTxOverruns returns a boolean if a field has been set.
func (o *InterfaceCounters) HasTxOverruns() bool {
	if o != nil && !IsNil(o.TxOverruns) {
		return true
	}

	return false
}

// SetTxOverruns gets a reference to the given float32 and assigns it to the TxOverruns field.
func (o *InterfaceCounters) SetTxOverruns(v float32) {
	o.TxOverruns = &v
}

// GetTxCollisions returns the TxCollisions field value if set, zero value otherwise.
func (o *InterfaceCounters) GetTxCollisions() float32 {
	if o == nil || IsNil(o.TxCollisions) {
		var ret float32
		return ret
	}
	return *o.TxCollisions
}

// GetTxCollisionsOk returns a tuple with the TxCollisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetTxCollisionsOk() (*float32, bool) {
	if o == nil || IsNil(o.TxCollisions) {
		return nil, false
	}
	return o.TxCollisions, true
}

// HasTxCollisions returns a boolean if a field has been set.
func (o *InterfaceCounters) HasTxCollisions() bool {
	if o != nil && !IsNil(o.TxCollisions) {
		return true
	}

	return false
}

// SetTxCollisions gets a reference to the given float32 and assigns it to the TxCollisions field.
func (o *InterfaceCounters) SetTxCollisions(v float32) {
	o.TxCollisions = &v
}

// GetMulticast returns the Multicast field value if set, zero value otherwise.
func (o *InterfaceCounters) GetMulticast() float32 {
	if o == nil || IsNil(o.Multicast) {
		var ret float32
		return ret
	}
	return *o.Multicast
}

// GetMulticastOk returns a tuple with the Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetMulticastOk() (*float32, bool) {
	if o == nil || IsNil(o.Multicast) {
		return nil, false
	}
	return o.Multicast, true
}

// HasMulticast returns a boolean if a field has been set.
func (o *InterfaceCounters) HasMulticast() bool {
	if o != nil && !IsNil(o.Multicast) {
		return true
	}

	return false
}

// SetMulticast gets a reference to the given float32 and assigns it to the Multicast field.
func (o *InterfaceCounters) SetMulticast(v float32) {
	o.Multicast = &v
}

// GetBroadcast returns the Broadcast field value if set, zero value otherwise.
func (o *InterfaceCounters) GetBroadcast() float32 {
	if o == nil || IsNil(o.Broadcast) {
		var ret float32
		return ret
	}
	return *o.Broadcast
}

// GetBroadcastOk returns a tuple with the Broadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCounters) GetBroadcastOk() (*float32, bool) {
	if o == nil || IsNil(o.Broadcast) {
		return nil, false
	}
	return o.Broadcast, true
}

// HasBroadcast returns a boolean if a field has been set.
func (o *InterfaceCounters) HasBroadcast() bool {
	if o != nil && !IsNil(o.Broadcast) {
		return true
	}

	return false
}

// SetBroadcast gets a reference to the given float32 and assigns it to the Broadcast field.
func (o *InterfaceCounters) SetBroadcast(v float32) {
	o.Broadcast = &v
}

func (o InterfaceCounters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceCounters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RxBytes) {
		toSerialize["rxBytes"] = o.RxBytes
	}
	if !IsNil(o.RxPackets) {
		toSerialize["rxPackets"] = o.RxPackets
	}
	if !IsNil(o.RxErrors) {
		toSerialize["rxErrors"] = o.RxErrors
	}
	if !IsNil(o.RxDropped) {
		toSerialize["rxDropped"] = o.RxDropped
	}
	if !IsNil(o.RxOverruns) {
		toSerialize["rxOverruns"] = o.RxOverruns
	}
	if !IsNil(o.RxFrame) {
		toSerialize["rxFrame"] = o.RxFrame
	}
	if !IsNil(o.TxBytes) {
		toSerialize["txBytes"] = o.TxBytes
	}
	if !IsNil(o.TxPackets) {
		toSerialize["txPackets"] = o.TxPackets
	}
	if !IsNil(o.TxErrors) {
		toSerialize["txErrors"] = o.TxErrors
	}
	if !IsNil(o.TxDropped) {
		toSerialize["txDropped"] = o.TxDropped
	}
	if !IsNil(o.TxOverruns) {
		toSerialize["txOverruns"] = o.TxOverruns
	}
	if !IsNil(o.TxCollisions) {
		toSerialize["txCollisions"] = o.TxCollisions
	}
	if !IsNil(o.Multicast) {
		toSerialize["multicast"] = o.Multicast
	}
	if !IsNil(o.Broadcast) {
		toSerialize["broadcast"] = o.Broadcast
	}
	return toSerialize, nil
}

type NullableInterfaceCounters struct {
	value *InterfaceCounters
	isSet bool
}

func (v NullableInterfaceCounters) Get() *InterfaceCounters {
	return v.value
}

func (v *NullableInterfaceCounters) Set(val *InterfaceCounters) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceCounters) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceCounters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceCounters(val *InterfaceCounters) *NullableInterfaceCounters {
	return &NullableInterfaceCounters{value: val, isSet: true}
}

func (v NullableInterfaceCounters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceCounters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


