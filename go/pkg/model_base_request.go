/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BaseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseRequest{}

// BaseRequest struct for BaseRequest
type BaseRequest struct {
	Type string `json:"type"`
	Timestamp time.Time `json:"timestamp"`
	// Client-generated request ID for tracking
	RequestId string `json:"requestId"`
}

type _BaseRequest BaseRequest

// NewBaseRequest instantiates a new BaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseRequest(type_ string, timestamp time.Time, requestId string) *BaseRequest {
	this := BaseRequest{}
	this.Type = type_
	this.Timestamp = timestamp
	this.RequestId = requestId
	return &this
}

// NewBaseRequestWithDefaults instantiates a new BaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseRequestWithDefaults() *BaseRequest {
	this := BaseRequest{}
	return &this
}

// GetType returns the Type field value
func (o *BaseRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BaseRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BaseRequest) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *BaseRequest) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BaseRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BaseRequest) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetRequestId returns the RequestId field value
func (o *BaseRequest) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *BaseRequest) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *BaseRequest) SetRequestId(v string) {
	o.RequestId = v
}

func (o BaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["requestId"] = o.RequestId
	return toSerialize, nil
}

func (o *BaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"requestId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseRequest := _BaseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseRequest)

	if err != nil {
		return err
	}

	*o = BaseRequest(varBaseRequest)

	return err
}

type NullableBaseRequest struct {
	value *BaseRequest
	isSet bool
}

func (v NullableBaseRequest) Get() *BaseRequest {
	return v.value
}

func (v *NullableBaseRequest) Set(val *BaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseRequest(val *BaseRequest) *NullableBaseRequest {
	return &NullableBaseRequest{value: val, isSet: true}
}

func (v NullableBaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


