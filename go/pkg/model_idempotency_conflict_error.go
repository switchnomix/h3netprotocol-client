/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IdempotencyConflictError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdempotencyConflictError{}

// IdempotencyConflictError struct for IdempotencyConflictError
type IdempotencyConflictError struct {
	Type string `json:"type"`
	Timestamp time.Time `json:"timestamp"`
	ErrorCode int32 `json:"errorCode"`
	ErrorMessage string `json:"errorMessage"`
	// Details of the original request that used this idempotency key
	OriginalRequest map[string]interface{} `json:"originalRequest"`
	// Response from the original request
	OriginalResponse map[string]interface{} `json:"originalResponse,omitempty"`
}

type _IdempotencyConflictError IdempotencyConflictError

// NewIdempotencyConflictError instantiates a new IdempotencyConflictError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdempotencyConflictError(type_ string, timestamp time.Time, errorCode int32, errorMessage string, originalRequest map[string]interface{}) *IdempotencyConflictError {
	this := IdempotencyConflictError{}
	this.Type = type_
	this.Timestamp = timestamp
	this.ErrorCode = errorCode
	this.ErrorMessage = errorMessage
	this.OriginalRequest = originalRequest
	return &this
}

// NewIdempotencyConflictErrorWithDefaults instantiates a new IdempotencyConflictError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdempotencyConflictErrorWithDefaults() *IdempotencyConflictError {
	this := IdempotencyConflictError{}
	return &this
}

// GetType returns the Type field value
func (o *IdempotencyConflictError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IdempotencyConflictError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IdempotencyConflictError) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *IdempotencyConflictError) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *IdempotencyConflictError) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *IdempotencyConflictError) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetErrorCode returns the ErrorCode field value
func (o *IdempotencyConflictError) GetErrorCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *IdempotencyConflictError) GetErrorCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *IdempotencyConflictError) SetErrorCode(v int32) {
	o.ErrorCode = v
}

// GetErrorMessage returns the ErrorMessage field value
func (o *IdempotencyConflictError) GetErrorMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value
// and a boolean to check if the value has been set.
func (o *IdempotencyConflictError) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMessage, true
}

// SetErrorMessage sets field value
func (o *IdempotencyConflictError) SetErrorMessage(v string) {
	o.ErrorMessage = v
}

// GetOriginalRequest returns the OriginalRequest field value
func (o *IdempotencyConflictError) GetOriginalRequest() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.OriginalRequest
}

// GetOriginalRequestOk returns a tuple with the OriginalRequest field value
// and a boolean to check if the value has been set.
func (o *IdempotencyConflictError) GetOriginalRequestOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.OriginalRequest, true
}

// SetOriginalRequest sets field value
func (o *IdempotencyConflictError) SetOriginalRequest(v map[string]interface{}) {
	o.OriginalRequest = v
}

// GetOriginalResponse returns the OriginalResponse field value if set, zero value otherwise.
func (o *IdempotencyConflictError) GetOriginalResponse() map[string]interface{} {
	if o == nil || IsNil(o.OriginalResponse) {
		var ret map[string]interface{}
		return ret
	}
	return o.OriginalResponse
}

// GetOriginalResponseOk returns a tuple with the OriginalResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdempotencyConflictError) GetOriginalResponseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OriginalResponse) {
		return map[string]interface{}{}, false
	}
	return o.OriginalResponse, true
}

// HasOriginalResponse returns a boolean if a field has been set.
func (o *IdempotencyConflictError) HasOriginalResponse() bool {
	if o != nil && !IsNil(o.OriginalResponse) {
		return true
	}

	return false
}

// SetOriginalResponse gets a reference to the given map[string]interface{} and assigns it to the OriginalResponse field.
func (o *IdempotencyConflictError) SetOriginalResponse(v map[string]interface{}) {
	o.OriginalResponse = v
}

func (o IdempotencyConflictError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdempotencyConflictError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["errorMessage"] = o.ErrorMessage
	toSerialize["originalRequest"] = o.OriginalRequest
	if !IsNil(o.OriginalResponse) {
		toSerialize["originalResponse"] = o.OriginalResponse
	}
	return toSerialize, nil
}

func (o *IdempotencyConflictError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"errorCode",
		"errorMessage",
		"originalRequest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdempotencyConflictError := _IdempotencyConflictError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdempotencyConflictError)

	if err != nil {
		return err
	}

	*o = IdempotencyConflictError(varIdempotencyConflictError)

	return err
}

type NullableIdempotencyConflictError struct {
	value *IdempotencyConflictError
	isSet bool
}

func (v NullableIdempotencyConflictError) Get() *IdempotencyConflictError {
	return v.value
}

func (v *NullableIdempotencyConflictError) Set(val *IdempotencyConflictError) {
	v.value = val
	v.isSet = true
}

func (v NullableIdempotencyConflictError) IsSet() bool {
	return v.isSet
}

func (v *NullableIdempotencyConflictError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdempotencyConflictError(val *IdempotencyConflictError) *NullableIdempotencyConflictError {
	return &NullableIdempotencyConflictError{value: val, isSet: true}
}

func (v NullableIdempotencyConflictError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdempotencyConflictError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


