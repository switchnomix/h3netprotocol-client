/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwitchDeviceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchDeviceConfig{}

// SwitchDeviceConfig struct for SwitchDeviceConfig
type SwitchDeviceConfig struct {
	DeviceId string `json:"deviceId"`
	DeviceModel *string `json:"deviceModel,omitempty"`
	FirmwareVersion *string `json:"firmwareVersion,omitempty"`
	NetworkInterfaces []SchemasNetworkInterface `json:"networkInterfaces,omitempty"`
	DeviceConfig *SwitchConfiguration `json:"deviceConfig,omitempty"`
	DatapathId string `json:"datapathId"`
	NumTables int32 `json:"numTables"`
	NumPorts int32 `json:"numPorts"`
	Ports []PortConfig `json:"ports,omitempty"`
	Features *SwitchFeatures `json:"features,omitempty"`
	// Power supply information
	PowerSupplies []SwitchDeviceConfigAllOfPowerSupplies `json:"powerSupplies,omitempty"`
	// Fan information
	Fans []SwitchDeviceConfigAllOfFans `json:"fans,omitempty"`
}

type _SwitchDeviceConfig SwitchDeviceConfig

// NewSwitchDeviceConfig instantiates a new SwitchDeviceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchDeviceConfig(deviceId string, datapathId string, numTables int32, numPorts int32) *SwitchDeviceConfig {
	this := SwitchDeviceConfig{}
	this.DeviceId = deviceId
	this.DatapathId = datapathId
	this.NumTables = numTables
	this.NumPorts = numPorts
	return &this
}

// NewSwitchDeviceConfigWithDefaults instantiates a new SwitchDeviceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchDeviceConfigWithDefaults() *SwitchDeviceConfig {
	this := SwitchDeviceConfig{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *SwitchDeviceConfig) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *SwitchDeviceConfig) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetDeviceModel returns the DeviceModel field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetDeviceModel() string {
	if o == nil || IsNil(o.DeviceModel) {
		var ret string
		return ret
	}
	return *o.DeviceModel
}

// GetDeviceModelOk returns a tuple with the DeviceModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetDeviceModelOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceModel) {
		return nil, false
	}
	return o.DeviceModel, true
}

// HasDeviceModel returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasDeviceModel() bool {
	if o != nil && !IsNil(o.DeviceModel) {
		return true
	}

	return false
}

// SetDeviceModel gets a reference to the given string and assigns it to the DeviceModel field.
func (o *SwitchDeviceConfig) SetDeviceModel(v string) {
	o.DeviceModel = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *SwitchDeviceConfig) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

// GetNetworkInterfaces returns the NetworkInterfaces field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetNetworkInterfaces() []SchemasNetworkInterface {
	if o == nil || IsNil(o.NetworkInterfaces) {
		var ret []SchemasNetworkInterface
		return ret
	}
	return o.NetworkInterfaces
}

// GetNetworkInterfacesOk returns a tuple with the NetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetNetworkInterfacesOk() ([]SchemasNetworkInterface, bool) {
	if o == nil || IsNil(o.NetworkInterfaces) {
		return nil, false
	}
	return o.NetworkInterfaces, true
}

// HasNetworkInterfaces returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasNetworkInterfaces() bool {
	if o != nil && !IsNil(o.NetworkInterfaces) {
		return true
	}

	return false
}

// SetNetworkInterfaces gets a reference to the given []SchemasNetworkInterface and assigns it to the NetworkInterfaces field.
func (o *SwitchDeviceConfig) SetNetworkInterfaces(v []SchemasNetworkInterface) {
	o.NetworkInterfaces = v
}

// GetDeviceConfig returns the DeviceConfig field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetDeviceConfig() SwitchConfiguration {
	if o == nil || IsNil(o.DeviceConfig) {
		var ret SwitchConfiguration
		return ret
	}
	return *o.DeviceConfig
}

// GetDeviceConfigOk returns a tuple with the DeviceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetDeviceConfigOk() (*SwitchConfiguration, bool) {
	if o == nil || IsNil(o.DeviceConfig) {
		return nil, false
	}
	return o.DeviceConfig, true
}

// HasDeviceConfig returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasDeviceConfig() bool {
	if o != nil && !IsNil(o.DeviceConfig) {
		return true
	}

	return false
}

// SetDeviceConfig gets a reference to the given SwitchConfiguration and assigns it to the DeviceConfig field.
func (o *SwitchDeviceConfig) SetDeviceConfig(v SwitchConfiguration) {
	o.DeviceConfig = &v
}

// GetDatapathId returns the DatapathId field value
func (o *SwitchDeviceConfig) GetDatapathId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatapathId
}

// GetDatapathIdOk returns a tuple with the DatapathId field value
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetDatapathIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatapathId, true
}

// SetDatapathId sets field value
func (o *SwitchDeviceConfig) SetDatapathId(v string) {
	o.DatapathId = v
}

// GetNumTables returns the NumTables field value
func (o *SwitchDeviceConfig) GetNumTables() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumTables
}

// GetNumTablesOk returns a tuple with the NumTables field value
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetNumTablesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumTables, true
}

// SetNumTables sets field value
func (o *SwitchDeviceConfig) SetNumTables(v int32) {
	o.NumTables = v
}

// GetNumPorts returns the NumPorts field value
func (o *SwitchDeviceConfig) GetNumPorts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumPorts
}

// GetNumPortsOk returns a tuple with the NumPorts field value
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetNumPortsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumPorts, true
}

// SetNumPorts sets field value
func (o *SwitchDeviceConfig) SetNumPorts(v int32) {
	o.NumPorts = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetPorts() []PortConfig {
	if o == nil || IsNil(o.Ports) {
		var ret []PortConfig
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetPortsOk() ([]PortConfig, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []PortConfig and assigns it to the Ports field.
func (o *SwitchDeviceConfig) SetPorts(v []PortConfig) {
	o.Ports = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetFeatures() SwitchFeatures {
	if o == nil || IsNil(o.Features) {
		var ret SwitchFeatures
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetFeaturesOk() (*SwitchFeatures, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given SwitchFeatures and assigns it to the Features field.
func (o *SwitchDeviceConfig) SetFeatures(v SwitchFeatures) {
	o.Features = &v
}

// GetPowerSupplies returns the PowerSupplies field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetPowerSupplies() []SwitchDeviceConfigAllOfPowerSupplies {
	if o == nil || IsNil(o.PowerSupplies) {
		var ret []SwitchDeviceConfigAllOfPowerSupplies
		return ret
	}
	return o.PowerSupplies
}

// GetPowerSuppliesOk returns a tuple with the PowerSupplies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetPowerSuppliesOk() ([]SwitchDeviceConfigAllOfPowerSupplies, bool) {
	if o == nil || IsNil(o.PowerSupplies) {
		return nil, false
	}
	return o.PowerSupplies, true
}

// HasPowerSupplies returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasPowerSupplies() bool {
	if o != nil && !IsNil(o.PowerSupplies) {
		return true
	}

	return false
}

// SetPowerSupplies gets a reference to the given []SwitchDeviceConfigAllOfPowerSupplies and assigns it to the PowerSupplies field.
func (o *SwitchDeviceConfig) SetPowerSupplies(v []SwitchDeviceConfigAllOfPowerSupplies) {
	o.PowerSupplies = v
}

// GetFans returns the Fans field value if set, zero value otherwise.
func (o *SwitchDeviceConfig) GetFans() []SwitchDeviceConfigAllOfFans {
	if o == nil || IsNil(o.Fans) {
		var ret []SwitchDeviceConfigAllOfFans
		return ret
	}
	return o.Fans
}

// GetFansOk returns a tuple with the Fans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchDeviceConfig) GetFansOk() ([]SwitchDeviceConfigAllOfFans, bool) {
	if o == nil || IsNil(o.Fans) {
		return nil, false
	}
	return o.Fans, true
}

// HasFans returns a boolean if a field has been set.
func (o *SwitchDeviceConfig) HasFans() bool {
	if o != nil && !IsNil(o.Fans) {
		return true
	}

	return false
}

// SetFans gets a reference to the given []SwitchDeviceConfigAllOfFans and assigns it to the Fans field.
func (o *SwitchDeviceConfig) SetFans(v []SwitchDeviceConfigAllOfFans) {
	o.Fans = v
}

func (o SwitchDeviceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchDeviceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceId"] = o.DeviceId
	if !IsNil(o.DeviceModel) {
		toSerialize["deviceModel"] = o.DeviceModel
	}
	if !IsNil(o.FirmwareVersion) {
		toSerialize["firmwareVersion"] = o.FirmwareVersion
	}
	if !IsNil(o.NetworkInterfaces) {
		toSerialize["networkInterfaces"] = o.NetworkInterfaces
	}
	if !IsNil(o.DeviceConfig) {
		toSerialize["deviceConfig"] = o.DeviceConfig
	}
	toSerialize["datapathId"] = o.DatapathId
	toSerialize["numTables"] = o.NumTables
	toSerialize["numPorts"] = o.NumPorts
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.PowerSupplies) {
		toSerialize["powerSupplies"] = o.PowerSupplies
	}
	if !IsNil(o.Fans) {
		toSerialize["fans"] = o.Fans
	}
	return toSerialize, nil
}

func (o *SwitchDeviceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceId",
		"datapathId",
		"numTables",
		"numPorts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwitchDeviceConfig := _SwitchDeviceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwitchDeviceConfig)

	if err != nil {
		return err
	}

	*o = SwitchDeviceConfig(varSwitchDeviceConfig)

	return err
}

type NullableSwitchDeviceConfig struct {
	value *SwitchDeviceConfig
	isSet bool
}

func (v NullableSwitchDeviceConfig) Get() *SwitchDeviceConfig {
	return v.value
}

func (v *NullableSwitchDeviceConfig) Set(val *SwitchDeviceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchDeviceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchDeviceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchDeviceConfig(val *SwitchDeviceConfig) *NullableSwitchDeviceConfig {
	return &NullableSwitchDeviceConfig{value: val, isSet: true}
}

func (v NullableSwitchDeviceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchDeviceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


