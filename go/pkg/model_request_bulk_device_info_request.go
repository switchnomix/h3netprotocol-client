/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RequestBulkDeviceInfoRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestBulkDeviceInfoRequest{}

// RequestBulkDeviceInfoRequest struct for RequestBulkDeviceInfoRequest
type RequestBulkDeviceInfoRequest struct {
	// Must be DEVICE_INFO_REQUEST
	Type string `json:"type"`
	// Request timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// List of device IDs
	Devices []string `json:"devices"`
	// Schema version
	SchemaVersion *string `json:"schemaVersion,omitempty"`
}

type _RequestBulkDeviceInfoRequest RequestBulkDeviceInfoRequest

// NewRequestBulkDeviceInfoRequest instantiates a new RequestBulkDeviceInfoRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestBulkDeviceInfoRequest(type_ string, devices []string) *RequestBulkDeviceInfoRequest {
	this := RequestBulkDeviceInfoRequest{}
	this.Type = type_
	this.Devices = devices
	return &this
}

// NewRequestBulkDeviceInfoRequestWithDefaults instantiates a new RequestBulkDeviceInfoRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestBulkDeviceInfoRequestWithDefaults() *RequestBulkDeviceInfoRequest {
	this := RequestBulkDeviceInfoRequest{}
	return &this
}

// GetType returns the Type field value
func (o *RequestBulkDeviceInfoRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RequestBulkDeviceInfoRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RequestBulkDeviceInfoRequest) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *RequestBulkDeviceInfoRequest) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestBulkDeviceInfoRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *RequestBulkDeviceInfoRequest) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *RequestBulkDeviceInfoRequest) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetDevices returns the Devices field value
func (o *RequestBulkDeviceInfoRequest) GetDevices() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value
// and a boolean to check if the value has been set.
func (o *RequestBulkDeviceInfoRequest) GetDevicesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Devices, true
}

// SetDevices sets field value
func (o *RequestBulkDeviceInfoRequest) SetDevices(v []string) {
	o.Devices = v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *RequestBulkDeviceInfoRequest) GetSchemaVersion() string {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestBulkDeviceInfoRequest) GetSchemaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *RequestBulkDeviceInfoRequest) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *RequestBulkDeviceInfoRequest) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

func (o RequestBulkDeviceInfoRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestBulkDeviceInfoRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["devices"] = o.Devices
	if !IsNil(o.SchemaVersion) {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	return toSerialize, nil
}

func (o *RequestBulkDeviceInfoRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"devices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestBulkDeviceInfoRequest := _RequestBulkDeviceInfoRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestBulkDeviceInfoRequest)

	if err != nil {
		return err
	}

	*o = RequestBulkDeviceInfoRequest(varRequestBulkDeviceInfoRequest)

	return err
}

type NullableRequestBulkDeviceInfoRequest struct {
	value *RequestBulkDeviceInfoRequest
	isSet bool
}

func (v NullableRequestBulkDeviceInfoRequest) Get() *RequestBulkDeviceInfoRequest {
	return v.value
}

func (v *NullableRequestBulkDeviceInfoRequest) Set(val *RequestBulkDeviceInfoRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestBulkDeviceInfoRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestBulkDeviceInfoRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestBulkDeviceInfoRequest(val *RequestBulkDeviceInfoRequest) *NullableRequestBulkDeviceInfoRequest {
	return &NullableRequestBulkDeviceInfoRequest{value: val, isSet: true}
}

func (v NullableRequestBulkDeviceInfoRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestBulkDeviceInfoRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


