/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AclAPI interface {

	/*
	CreateAcl Create a new ACL

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AclAPICreateAclRequest
	*/
	CreateAcl(ctx context.Context) AclAPICreateAclRequest

	// CreateAclExecute executes the request
	//  @return ACL
	CreateAclExecute(r AclAPICreateAclRequest) (*ACL, *http.Response, error)

	/*
	CreateDeviceAcl Create a new ACL for a specific device

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param deviceId
	@return AclAPICreateDeviceAclRequest
	*/
	CreateDeviceAcl(ctx context.Context, deviceId string) AclAPICreateDeviceAclRequest

	// CreateDeviceAclExecute executes the request
	CreateDeviceAclExecute(r AclAPICreateDeviceAclRequest) (*http.Response, error)

	/*
	GetAclConfig Get ACL configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param aclId
	@return AclAPIGetAclConfigRequest
	*/
	GetAclConfig(ctx context.Context, aclId string) AclAPIGetAclConfigRequest

	// GetAclConfigExecute executes the request
	//  @return ACL
	GetAclConfigExecute(r AclAPIGetAclConfigRequest) (*ACL, *http.Response, error)

	/*
	GetAllAcls Get all ACLs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AclAPIGetAllAclsRequest
	*/
	GetAllAcls(ctx context.Context) AclAPIGetAllAclsRequest

	// GetAllAclsExecute executes the request
	//  @return []ACL
	GetAllAclsExecute(r AclAPIGetAllAclsRequest) ([]ACL, *http.Response, error)

	/*
	GetDeviceAcls Get all ACLs for a specific device

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param deviceId
	@return AclAPIGetDeviceAclsRequest
	*/
	GetDeviceAcls(ctx context.Context, deviceId string) AclAPIGetDeviceAclsRequest

	// GetDeviceAclsExecute executes the request
	//  @return []ACL
	GetDeviceAclsExecute(r AclAPIGetDeviceAclsRequest) ([]ACL, *http.Response, error)

	/*
	UpdateAclConfig Update ACL configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param aclId
	@return AclAPIUpdateAclConfigRequest
	*/
	UpdateAclConfig(ctx context.Context, aclId string) AclAPIUpdateAclConfigRequest

	// UpdateAclConfigExecute executes the request
	UpdateAclConfigExecute(r AclAPIUpdateAclConfigRequest) (*http.Response, error)
}

// AclAPIService AclAPI service
type AclAPIService service

type AclAPICreateAclRequest struct {
	ctx context.Context
	ApiService AclAPI
	idempotencyKey *string
	xClientTimestamp *string
	createAclRequest *CreateAclRequest
}

// Unique key for idempotent request handling
func (r AclAPICreateAclRequest) IdempotencyKey(idempotencyKey string) AclAPICreateAclRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

// Client-side timestamp for request ordering (RFC3339 format)
func (r AclAPICreateAclRequest) XClientTimestamp(xClientTimestamp string) AclAPICreateAclRequest {
	r.xClientTimestamp = &xClientTimestamp
	return r
}

func (r AclAPICreateAclRequest) CreateAclRequest(createAclRequest CreateAclRequest) AclAPICreateAclRequest {
	r.createAclRequest = &createAclRequest
	return r
}

func (r AclAPICreateAclRequest) Execute() (*ACL, *http.Response, error) {
	return r.ApiService.CreateAclExecute(r)
}

/*
CreateAcl Create a new ACL

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AclAPICreateAclRequest
*/
func (a *AclAPIService) CreateAcl(ctx context.Context) AclAPICreateAclRequest {
	return AclAPICreateAclRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ACL
func (a *AclAPIService) CreateAclExecute(r AclAPICreateAclRequest) (*ACL, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ACL
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.CreateAcl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/config/acls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.idempotencyKey == nil {
		return localVarReturnValue, nil, reportError("idempotencyKey is required and must be specified")
	}
	if r.xClientTimestamp == nil {
		return localVarReturnValue, nil, reportError("xClientTimestamp is required and must be specified")
	}
	if r.createAclRequest == nil {
		return localVarReturnValue, nil, reportError("createAclRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Idempotency-Key", r.idempotencyKey, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Client-Timestamp", r.xClientTimestamp, "simple", "")
	// body params
	localVarPostBody = r.createAclRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v IdempotencyConflictError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AclAPICreateDeviceAclRequest struct {
	ctx context.Context
	ApiService AclAPI
	deviceId string
	aCL *ACL
}

func (r AclAPICreateDeviceAclRequest) ACL(aCL ACL) AclAPICreateDeviceAclRequest {
	r.aCL = &aCL
	return r
}

func (r AclAPICreateDeviceAclRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateDeviceAclExecute(r)
}

/*
CreateDeviceAcl Create a new ACL for a specific device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceId
 @return AclAPICreateDeviceAclRequest
*/
func (a *AclAPIService) CreateDeviceAcl(ctx context.Context, deviceId string) AclAPICreateDeviceAclRequest {
	return AclAPICreateDeviceAclRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

// Execute executes the request
func (a *AclAPIService) CreateDeviceAclExecute(r AclAPICreateDeviceAclRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.CreateDeviceAcl")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/config/acls/device/{deviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aCL == nil {
		return nil, reportError("aCL is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aCL
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AclAPIGetAclConfigRequest struct {
	ctx context.Context
	ApiService AclAPI
	aclId string
}

func (r AclAPIGetAclConfigRequest) Execute() (*ACL, *http.Response, error) {
	return r.ApiService.GetAclConfigExecute(r)
}

/*
GetAclConfig Get ACL configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param aclId
 @return AclAPIGetAclConfigRequest
*/
func (a *AclAPIService) GetAclConfig(ctx context.Context, aclId string) AclAPIGetAclConfigRequest {
	return AclAPIGetAclConfigRequest{
		ApiService: a,
		ctx: ctx,
		aclId: aclId,
	}
}

// Execute executes the request
//  @return ACL
func (a *AclAPIService) GetAclConfigExecute(r AclAPIGetAclConfigRequest) (*ACL, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ACL
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.GetAclConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/config/acls/{aclId}"
	localVarPath = strings.Replace(localVarPath, "{"+"aclId"+"}", url.PathEscape(parameterValueToString(r.aclId, "aclId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AclAPIGetAllAclsRequest struct {
	ctx context.Context
	ApiService AclAPI
}

func (r AclAPIGetAllAclsRequest) Execute() ([]ACL, *http.Response, error) {
	return r.ApiService.GetAllAclsExecute(r)
}

/*
GetAllAcls Get all ACLs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AclAPIGetAllAclsRequest
*/
func (a *AclAPIService) GetAllAcls(ctx context.Context) AclAPIGetAllAclsRequest {
	return AclAPIGetAllAclsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ACL
func (a *AclAPIService) GetAllAclsExecute(r AclAPIGetAllAclsRequest) ([]ACL, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ACL
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.GetAllAcls")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/config/acls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AclAPIGetDeviceAclsRequest struct {
	ctx context.Context
	ApiService AclAPI
	deviceId string
}

func (r AclAPIGetDeviceAclsRequest) Execute() ([]ACL, *http.Response, error) {
	return r.ApiService.GetDeviceAclsExecute(r)
}

/*
GetDeviceAcls Get all ACLs for a specific device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceId
 @return AclAPIGetDeviceAclsRequest
*/
func (a *AclAPIService) GetDeviceAcls(ctx context.Context, deviceId string) AclAPIGetDeviceAclsRequest {
	return AclAPIGetDeviceAclsRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

// Execute executes the request
//  @return []ACL
func (a *AclAPIService) GetDeviceAclsExecute(r AclAPIGetDeviceAclsRequest) ([]ACL, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ACL
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.GetDeviceAcls")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/config/acls/device/{deviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AclAPIUpdateAclConfigRequest struct {
	ctx context.Context
	ApiService AclAPI
	aclId string
	idempotencyKey *string
	xClientTimestamp *string
	createAclRequest *CreateAclRequest
}

// Unique key for idempotent request handling
func (r AclAPIUpdateAclConfigRequest) IdempotencyKey(idempotencyKey string) AclAPIUpdateAclConfigRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

// Client-side timestamp for request ordering (RFC3339 format)
func (r AclAPIUpdateAclConfigRequest) XClientTimestamp(xClientTimestamp string) AclAPIUpdateAclConfigRequest {
	r.xClientTimestamp = &xClientTimestamp
	return r
}

func (r AclAPIUpdateAclConfigRequest) CreateAclRequest(createAclRequest CreateAclRequest) AclAPIUpdateAclConfigRequest {
	r.createAclRequest = &createAclRequest
	return r
}

func (r AclAPIUpdateAclConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateAclConfigExecute(r)
}

/*
UpdateAclConfig Update ACL configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param aclId
 @return AclAPIUpdateAclConfigRequest
*/
func (a *AclAPIService) UpdateAclConfig(ctx context.Context, aclId string) AclAPIUpdateAclConfigRequest {
	return AclAPIUpdateAclConfigRequest{
		ApiService: a,
		ctx: ctx,
		aclId: aclId,
	}
}

// Execute executes the request
func (a *AclAPIService) UpdateAclConfigExecute(r AclAPIUpdateAclConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.UpdateAclConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/config/acls/{aclId}"
	localVarPath = strings.Replace(localVarPath, "{"+"aclId"+"}", url.PathEscape(parameterValueToString(r.aclId, "aclId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.idempotencyKey == nil {
		return nil, reportError("idempotencyKey is required and must be specified")
	}
	if r.xClientTimestamp == nil {
		return nil, reportError("xClientTimestamp is required and must be specified")
	}
	if r.createAclRequest == nil {
		return nil, reportError("createAclRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Idempotency-Key", r.idempotencyKey, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Client-Timestamp", r.xClientTimestamp, "simple", "")
	// body params
	localVarPostBody = r.createAclRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v IdempotencyConflictError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
