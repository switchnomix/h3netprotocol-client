/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreateAclRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAclRequest{}

// CreateAclRequest struct for CreateAclRequest
type CreateAclRequest struct {
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Client-generated request ID for tracking
	RequestId string `json:"requestId"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	// Name of the ACL
	AclName string `json:"aclName"`
	// Human-readable description of the ACL
	Description *string `json:"description,omitempty"`
	// List of rules in this ACL
	Rules []ACLRule `json:"rules"`
	Statistics *ACLAllOfStatistics `json:"statistics,omitempty"`
}

type _CreateAclRequest CreateAclRequest

// NewCreateAclRequest instantiates a new CreateAclRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAclRequest(type_ string, timestamp time.Time, requestId string, schemaVersion string, aclName string, rules []ACLRule) *CreateAclRequest {
	this := CreateAclRequest{}
	this.Type = type_
	this.Timestamp = timestamp
	this.RequestId = requestId
	this.SchemaVersion = schemaVersion
	this.AclName = aclName
	this.Rules = rules
	return &this
}

// NewCreateAclRequestWithDefaults instantiates a new CreateAclRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAclRequestWithDefaults() *CreateAclRequest {
	this := CreateAclRequest{}
	return &this
}

// GetType returns the Type field value
func (o *CreateAclRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateAclRequest) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *CreateAclRequest) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CreateAclRequest) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetRequestId returns the RequestId field value
func (o *CreateAclRequest) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *CreateAclRequest) SetRequestId(v string) {
	o.RequestId = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *CreateAclRequest) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *CreateAclRequest) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetAclName returns the AclName field value
func (o *CreateAclRequest) GetAclName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AclName
}

// GetAclNameOk returns a tuple with the AclName field value
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetAclNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AclName, true
}

// SetAclName sets field value
func (o *CreateAclRequest) SetAclName(v string) {
	o.AclName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateAclRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateAclRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateAclRequest) SetDescription(v string) {
	o.Description = &v
}

// GetRules returns the Rules field value
func (o *CreateAclRequest) GetRules() []ACLRule {
	if o == nil {
		var ret []ACLRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetRulesOk() ([]ACLRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *CreateAclRequest) SetRules(v []ACLRule) {
	o.Rules = v
}

// GetStatistics returns the Statistics field value if set, zero value otherwise.
func (o *CreateAclRequest) GetStatistics() ACLAllOfStatistics {
	if o == nil || IsNil(o.Statistics) {
		var ret ACLAllOfStatistics
		return ret
	}
	return *o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAclRequest) GetStatisticsOk() (*ACLAllOfStatistics, bool) {
	if o == nil || IsNil(o.Statistics) {
		return nil, false
	}
	return o.Statistics, true
}

// HasStatistics returns a boolean if a field has been set.
func (o *CreateAclRequest) HasStatistics() bool {
	if o != nil && !IsNil(o.Statistics) {
		return true
	}

	return false
}

// SetStatistics gets a reference to the given ACLAllOfStatistics and assigns it to the Statistics field.
func (o *CreateAclRequest) SetStatistics(v ACLAllOfStatistics) {
	o.Statistics = &v
}

func (o CreateAclRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAclRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["requestId"] = o.RequestId
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["aclName"] = o.AclName
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["rules"] = o.Rules
	if !IsNil(o.Statistics) {
		toSerialize["statistics"] = o.Statistics
	}
	return toSerialize, nil
}

func (o *CreateAclRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"requestId",
		"schemaVersion",
		"aclName",
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAclRequest := _CreateAclRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAclRequest)

	if err != nil {
		return err
	}

	*o = CreateAclRequest(varCreateAclRequest)

	return err
}

type NullableCreateAclRequest struct {
	value *CreateAclRequest
	isSet bool
}

func (v NullableCreateAclRequest) Get() *CreateAclRequest {
	return v.value
}

func (v *NullableCreateAclRequest) Set(val *CreateAclRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAclRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAclRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAclRequest(val *CreateAclRequest) *NullableCreateAclRequest {
	return &NullableCreateAclRequest{value: val, isSet: true}
}

func (v NullableCreateAclRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAclRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


