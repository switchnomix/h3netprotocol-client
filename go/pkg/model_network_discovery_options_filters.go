/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the NetworkDiscoveryOptionsFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDiscoveryOptionsFilters{}

// NetworkDiscoveryOptionsFilters Discovery filters
type NetworkDiscoveryOptionsFilters struct {
	DeviceTypes []DeviceRoleEnum `json:"deviceTypes,omitempty"`
	Subnets []string `json:"subnets,omitempty"`
}

// NewNetworkDiscoveryOptionsFilters instantiates a new NetworkDiscoveryOptionsFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDiscoveryOptionsFilters() *NetworkDiscoveryOptionsFilters {
	this := NetworkDiscoveryOptionsFilters{}
	return &this
}

// NewNetworkDiscoveryOptionsFiltersWithDefaults instantiates a new NetworkDiscoveryOptionsFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDiscoveryOptionsFiltersWithDefaults() *NetworkDiscoveryOptionsFilters {
	this := NetworkDiscoveryOptionsFilters{}
	return &this
}

// GetDeviceTypes returns the DeviceTypes field value if set, zero value otherwise.
func (o *NetworkDiscoveryOptionsFilters) GetDeviceTypes() []DeviceRoleEnum {
	if o == nil || IsNil(o.DeviceTypes) {
		var ret []DeviceRoleEnum
		return ret
	}
	return o.DeviceTypes
}

// GetDeviceTypesOk returns a tuple with the DeviceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryOptionsFilters) GetDeviceTypesOk() ([]DeviceRoleEnum, bool) {
	if o == nil || IsNil(o.DeviceTypes) {
		return nil, false
	}
	return o.DeviceTypes, true
}

// HasDeviceTypes returns a boolean if a field has been set.
func (o *NetworkDiscoveryOptionsFilters) HasDeviceTypes() bool {
	if o != nil && !IsNil(o.DeviceTypes) {
		return true
	}

	return false
}

// SetDeviceTypes gets a reference to the given []DeviceRoleEnum and assigns it to the DeviceTypes field.
func (o *NetworkDiscoveryOptionsFilters) SetDeviceTypes(v []DeviceRoleEnum) {
	o.DeviceTypes = v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *NetworkDiscoveryOptionsFilters) GetSubnets() []string {
	if o == nil || IsNil(o.Subnets) {
		var ret []string
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryOptionsFilters) GetSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *NetworkDiscoveryOptionsFilters) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *NetworkDiscoveryOptionsFilters) SetSubnets(v []string) {
	o.Subnets = v
}

func (o NetworkDiscoveryOptionsFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDiscoveryOptionsFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceTypes) {
		toSerialize["deviceTypes"] = o.DeviceTypes
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	return toSerialize, nil
}

type NullableNetworkDiscoveryOptionsFilters struct {
	value *NetworkDiscoveryOptionsFilters
	isSet bool
}

func (v NullableNetworkDiscoveryOptionsFilters) Get() *NetworkDiscoveryOptionsFilters {
	return v.value
}

func (v *NullableNetworkDiscoveryOptionsFilters) Set(val *NetworkDiscoveryOptionsFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDiscoveryOptionsFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDiscoveryOptionsFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDiscoveryOptionsFilters(val *NetworkDiscoveryOptionsFilters) *NullableNetworkDiscoveryOptionsFilters {
	return &NullableNetworkDiscoveryOptionsFilters{value: val, isSet: true}
}

func (v NullableNetworkDiscoveryOptionsFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDiscoveryOptionsFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


