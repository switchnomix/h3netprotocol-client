/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the MeterStatsBandsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeterStatsBandsInner{}

// MeterStatsBandsInner struct for MeterStatsBandsInner
type MeterStatsBandsInner struct {
	// Band rate
	Rate *float32 `json:"rate,omitempty"`
	// Band burst size
	BurstSize *float32 `json:"burstSize,omitempty"`
	// Number of packets processed by this band
	PacketCount *float32 `json:"packetCount,omitempty"`
	// Number of bytes processed by this band
	ByteCount *float32 `json:"byteCount,omitempty"`
}

// NewMeterStatsBandsInner instantiates a new MeterStatsBandsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeterStatsBandsInner() *MeterStatsBandsInner {
	this := MeterStatsBandsInner{}
	return &this
}

// NewMeterStatsBandsInnerWithDefaults instantiates a new MeterStatsBandsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeterStatsBandsInnerWithDefaults() *MeterStatsBandsInner {
	this := MeterStatsBandsInner{}
	return &this
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *MeterStatsBandsInner) GetRate() float32 {
	if o == nil || IsNil(o.Rate) {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStatsBandsInner) GetRateOk() (*float32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *MeterStatsBandsInner) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *MeterStatsBandsInner) SetRate(v float32) {
	o.Rate = &v
}

// GetBurstSize returns the BurstSize field value if set, zero value otherwise.
func (o *MeterStatsBandsInner) GetBurstSize() float32 {
	if o == nil || IsNil(o.BurstSize) {
		var ret float32
		return ret
	}
	return *o.BurstSize
}

// GetBurstSizeOk returns a tuple with the BurstSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStatsBandsInner) GetBurstSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.BurstSize) {
		return nil, false
	}
	return o.BurstSize, true
}

// HasBurstSize returns a boolean if a field has been set.
func (o *MeterStatsBandsInner) HasBurstSize() bool {
	if o != nil && !IsNil(o.BurstSize) {
		return true
	}

	return false
}

// SetBurstSize gets a reference to the given float32 and assigns it to the BurstSize field.
func (o *MeterStatsBandsInner) SetBurstSize(v float32) {
	o.BurstSize = &v
}

// GetPacketCount returns the PacketCount field value if set, zero value otherwise.
func (o *MeterStatsBandsInner) GetPacketCount() float32 {
	if o == nil || IsNil(o.PacketCount) {
		var ret float32
		return ret
	}
	return *o.PacketCount
}

// GetPacketCountOk returns a tuple with the PacketCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStatsBandsInner) GetPacketCountOk() (*float32, bool) {
	if o == nil || IsNil(o.PacketCount) {
		return nil, false
	}
	return o.PacketCount, true
}

// HasPacketCount returns a boolean if a field has been set.
func (o *MeterStatsBandsInner) HasPacketCount() bool {
	if o != nil && !IsNil(o.PacketCount) {
		return true
	}

	return false
}

// SetPacketCount gets a reference to the given float32 and assigns it to the PacketCount field.
func (o *MeterStatsBandsInner) SetPacketCount(v float32) {
	o.PacketCount = &v
}

// GetByteCount returns the ByteCount field value if set, zero value otherwise.
func (o *MeterStatsBandsInner) GetByteCount() float32 {
	if o == nil || IsNil(o.ByteCount) {
		var ret float32
		return ret
	}
	return *o.ByteCount
}

// GetByteCountOk returns a tuple with the ByteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStatsBandsInner) GetByteCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ByteCount) {
		return nil, false
	}
	return o.ByteCount, true
}

// HasByteCount returns a boolean if a field has been set.
func (o *MeterStatsBandsInner) HasByteCount() bool {
	if o != nil && !IsNil(o.ByteCount) {
		return true
	}

	return false
}

// SetByteCount gets a reference to the given float32 and assigns it to the ByteCount field.
func (o *MeterStatsBandsInner) SetByteCount(v float32) {
	o.ByteCount = &v
}

func (o MeterStatsBandsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeterStatsBandsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.BurstSize) {
		toSerialize["burstSize"] = o.BurstSize
	}
	if !IsNil(o.PacketCount) {
		toSerialize["packetCount"] = o.PacketCount
	}
	if !IsNil(o.ByteCount) {
		toSerialize["byteCount"] = o.ByteCount
	}
	return toSerialize, nil
}

type NullableMeterStatsBandsInner struct {
	value *MeterStatsBandsInner
	isSet bool
}

func (v NullableMeterStatsBandsInner) Get() *MeterStatsBandsInner {
	return v.value
}

func (v *NullableMeterStatsBandsInner) Set(val *MeterStatsBandsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMeterStatsBandsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMeterStatsBandsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeterStatsBandsInner(val *MeterStatsBandsInner) *NullableMeterStatsBandsInner {
	return &NullableMeterStatsBandsInner{value: val, isSet: true}
}

func (v NullableMeterStatsBandsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeterStatsBandsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


