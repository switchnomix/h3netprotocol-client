/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the OperationalState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperationalState{}

// OperationalState struct for OperationalState
type OperationalState struct {
	Status string `json:"status"`
	Devices []DeviceOperationalState `json:"devices,omitempty"`
	Timestamp time.Time `json:"timestamp"`
}

type _OperationalState OperationalState

// NewOperationalState instantiates a new OperationalState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationalState(status string, timestamp time.Time) *OperationalState {
	this := OperationalState{}
	this.Status = status
	this.Timestamp = timestamp
	return &this
}

// NewOperationalStateWithDefaults instantiates a new OperationalState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationalStateWithDefaults() *OperationalState {
	this := OperationalState{}
	return &this
}

// GetStatus returns the Status field value
func (o *OperationalState) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OperationalState) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OperationalState) SetStatus(v string) {
	o.Status = v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *OperationalState) GetDevices() []DeviceOperationalState {
	if o == nil || IsNil(o.Devices) {
		var ret []DeviceOperationalState
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationalState) GetDevicesOk() ([]DeviceOperationalState, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *OperationalState) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []DeviceOperationalState and assigns it to the Devices field.
func (o *OperationalState) SetDevices(v []DeviceOperationalState) {
	o.Devices = v
}

// GetTimestamp returns the Timestamp field value
func (o *OperationalState) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *OperationalState) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *OperationalState) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o OperationalState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperationalState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *OperationalState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOperationalState := _OperationalState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOperationalState)

	if err != nil {
		return err
	}

	*o = OperationalState(varOperationalState)

	return err
}

type NullableOperationalState struct {
	value *OperationalState
	isSet bool
}

func (v NullableOperationalState) Get() *OperationalState {
	return v.value
}

func (v *NullableOperationalState) Set(val *OperationalState) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationalState) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationalState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationalState(val *OperationalState) *NullableOperationalState {
	return &NullableOperationalState{value: val, isSet: true}
}

func (v NullableOperationalState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationalState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


