/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IPConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPConfig{}

// IPConfig IP configuration for an interface
type IPConfig struct {
	Primary IPAddressWithPrefix `json:"primary"`
	// Secondary IP addresses
	Secondary []IPAddressWithPrefix `json:"secondary,omitempty"`
	// Virtual IP addresses for VRRP/HSRP
	VirtualIPs []IPAddressWithPrefix `json:"virtualIPs,omitempty"`
	// Whether DHCP is enabled
	Dhcp *bool `json:"dhcp,omitempty"`
	// Whether IPv6 autoconfig is enabled
	Autoconfig *bool `json:"autoconfig,omitempty"`
}

type _IPConfig IPConfig

// NewIPConfig instantiates a new IPConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPConfig(primary IPAddressWithPrefix) *IPConfig {
	this := IPConfig{}
	this.Primary = primary
	var dhcp bool = false
	this.Dhcp = &dhcp
	var autoconfig bool = false
	this.Autoconfig = &autoconfig
	return &this
}

// NewIPConfigWithDefaults instantiates a new IPConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPConfigWithDefaults() *IPConfig {
	this := IPConfig{}
	var dhcp bool = false
	this.Dhcp = &dhcp
	var autoconfig bool = false
	this.Autoconfig = &autoconfig
	return &this
}

// GetPrimary returns the Primary field value
func (o *IPConfig) GetPrimary() IPAddressWithPrefix {
	if o == nil {
		var ret IPAddressWithPrefix
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *IPConfig) GetPrimaryOk() (*IPAddressWithPrefix, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *IPConfig) SetPrimary(v IPAddressWithPrefix) {
	o.Primary = v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *IPConfig) GetSecondary() []IPAddressWithPrefix {
	if o == nil || IsNil(o.Secondary) {
		var ret []IPAddressWithPrefix
		return ret
	}
	return o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPConfig) GetSecondaryOk() ([]IPAddressWithPrefix, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *IPConfig) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given []IPAddressWithPrefix and assigns it to the Secondary field.
func (o *IPConfig) SetSecondary(v []IPAddressWithPrefix) {
	o.Secondary = v
}

// GetVirtualIPs returns the VirtualIPs field value if set, zero value otherwise.
func (o *IPConfig) GetVirtualIPs() []IPAddressWithPrefix {
	if o == nil || IsNil(o.VirtualIPs) {
		var ret []IPAddressWithPrefix
		return ret
	}
	return o.VirtualIPs
}

// GetVirtualIPsOk returns a tuple with the VirtualIPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPConfig) GetVirtualIPsOk() ([]IPAddressWithPrefix, bool) {
	if o == nil || IsNil(o.VirtualIPs) {
		return nil, false
	}
	return o.VirtualIPs, true
}

// HasVirtualIPs returns a boolean if a field has been set.
func (o *IPConfig) HasVirtualIPs() bool {
	if o != nil && !IsNil(o.VirtualIPs) {
		return true
	}

	return false
}

// SetVirtualIPs gets a reference to the given []IPAddressWithPrefix and assigns it to the VirtualIPs field.
func (o *IPConfig) SetVirtualIPs(v []IPAddressWithPrefix) {
	o.VirtualIPs = v
}

// GetDhcp returns the Dhcp field value if set, zero value otherwise.
func (o *IPConfig) GetDhcp() bool {
	if o == nil || IsNil(o.Dhcp) {
		var ret bool
		return ret
	}
	return *o.Dhcp
}

// GetDhcpOk returns a tuple with the Dhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPConfig) GetDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.Dhcp) {
		return nil, false
	}
	return o.Dhcp, true
}

// HasDhcp returns a boolean if a field has been set.
func (o *IPConfig) HasDhcp() bool {
	if o != nil && !IsNil(o.Dhcp) {
		return true
	}

	return false
}

// SetDhcp gets a reference to the given bool and assigns it to the Dhcp field.
func (o *IPConfig) SetDhcp(v bool) {
	o.Dhcp = &v
}

// GetAutoconfig returns the Autoconfig field value if set, zero value otherwise.
func (o *IPConfig) GetAutoconfig() bool {
	if o == nil || IsNil(o.Autoconfig) {
		var ret bool
		return ret
	}
	return *o.Autoconfig
}

// GetAutoconfigOk returns a tuple with the Autoconfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPConfig) GetAutoconfigOk() (*bool, bool) {
	if o == nil || IsNil(o.Autoconfig) {
		return nil, false
	}
	return o.Autoconfig, true
}

// HasAutoconfig returns a boolean if a field has been set.
func (o *IPConfig) HasAutoconfig() bool {
	if o != nil && !IsNil(o.Autoconfig) {
		return true
	}

	return false
}

// SetAutoconfig gets a reference to the given bool and assigns it to the Autoconfig field.
func (o *IPConfig) SetAutoconfig(v bool) {
	o.Autoconfig = &v
}

func (o IPConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["primary"] = o.Primary
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}
	if !IsNil(o.VirtualIPs) {
		toSerialize["virtualIPs"] = o.VirtualIPs
	}
	if !IsNil(o.Dhcp) {
		toSerialize["dhcp"] = o.Dhcp
	}
	if !IsNil(o.Autoconfig) {
		toSerialize["autoconfig"] = o.Autoconfig
	}
	return toSerialize, nil
}

func (o *IPConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"primary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIPConfig := _IPConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIPConfig)

	if err != nil {
		return err
	}

	*o = IPConfig(varIPConfig)

	return err
}

type NullableIPConfig struct {
	value *IPConfig
	isSet bool
}

func (v NullableIPConfig) Get() *IPConfig {
	return v.value
}

func (v *NullableIPConfig) Set(val *IPConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIPConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIPConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPConfig(val *IPConfig) *NullableIPConfig {
	return &NullableIPConfig{value: val, isSet: true}
}

func (v NullableIPConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


