/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RouteEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteEntry{}

// RouteEntry Route entry configuration
type RouteEntry struct {
	Destination IPAddressWithPrefix `json:"destination"`
	// Represents either an IPv4 or IPv6 address
	NextHop *string `json:"nextHop,omitempty"`
	Metric *int32 `json:"metric,omitempty"`
	Interface *NetworkInterface `json:"interface,omitempty"`
	AdminDistance *int32 `json:"adminDistance,omitempty"`
	Tag *int32 `json:"tag,omitempty"`
	Description *string `json:"description,omitempty"`
	Track *int32 `json:"track,omitempty"`
	Bfd *RouteEntryBfd `json:"bfd,omitempty"`
}

type _RouteEntry RouteEntry

// NewRouteEntry instantiates a new RouteEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteEntry(destination IPAddressWithPrefix) *RouteEntry {
	this := RouteEntry{}
	this.Destination = destination
	return &this
}

// NewRouteEntryWithDefaults instantiates a new RouteEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteEntryWithDefaults() *RouteEntry {
	this := RouteEntry{}
	return &this
}

// GetDestination returns the Destination field value
func (o *RouteEntry) GetDestination() IPAddressWithPrefix {
	if o == nil {
		var ret IPAddressWithPrefix
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetDestinationOk() (*IPAddressWithPrefix, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *RouteEntry) SetDestination(v IPAddressWithPrefix) {
	o.Destination = v
}

// GetNextHop returns the NextHop field value if set, zero value otherwise.
func (o *RouteEntry) GetNextHop() string {
	if o == nil || IsNil(o.NextHop) {
		var ret string
		return ret
	}
	return *o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetNextHopOk() (*string, bool) {
	if o == nil || IsNil(o.NextHop) {
		return nil, false
	}
	return o.NextHop, true
}

// HasNextHop returns a boolean if a field has been set.
func (o *RouteEntry) HasNextHop() bool {
	if o != nil && !IsNil(o.NextHop) {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given string and assigns it to the NextHop field.
func (o *RouteEntry) SetNextHop(v string) {
	o.NextHop = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *RouteEntry) GetMetric() int32 {
	if o == nil || IsNil(o.Metric) {
		var ret int32
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetMetricOk() (*int32, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *RouteEntry) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given int32 and assigns it to the Metric field.
func (o *RouteEntry) SetMetric(v int32) {
	o.Metric = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *RouteEntry) GetInterface() NetworkInterface {
	if o == nil || IsNil(o.Interface) {
		var ret NetworkInterface
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetInterfaceOk() (*NetworkInterface, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *RouteEntry) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given NetworkInterface and assigns it to the Interface field.
func (o *RouteEntry) SetInterface(v NetworkInterface) {
	o.Interface = &v
}

// GetAdminDistance returns the AdminDistance field value if set, zero value otherwise.
func (o *RouteEntry) GetAdminDistance() int32 {
	if o == nil || IsNil(o.AdminDistance) {
		var ret int32
		return ret
	}
	return *o.AdminDistance
}

// GetAdminDistanceOk returns a tuple with the AdminDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetAdminDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.AdminDistance) {
		return nil, false
	}
	return o.AdminDistance, true
}

// HasAdminDistance returns a boolean if a field has been set.
func (o *RouteEntry) HasAdminDistance() bool {
	if o != nil && !IsNil(o.AdminDistance) {
		return true
	}

	return false
}

// SetAdminDistance gets a reference to the given int32 and assigns it to the AdminDistance field.
func (o *RouteEntry) SetAdminDistance(v int32) {
	o.AdminDistance = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *RouteEntry) GetTag() int32 {
	if o == nil || IsNil(o.Tag) {
		var ret int32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetTagOk() (*int32, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *RouteEntry) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given int32 and assigns it to the Tag field.
func (o *RouteEntry) SetTag(v int32) {
	o.Tag = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RouteEntry) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RouteEntry) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RouteEntry) SetDescription(v string) {
	o.Description = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *RouteEntry) GetTrack() int32 {
	if o == nil || IsNil(o.Track) {
		var ret int32
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetTrackOk() (*int32, bool) {
	if o == nil || IsNil(o.Track) {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *RouteEntry) HasTrack() bool {
	if o != nil && !IsNil(o.Track) {
		return true
	}

	return false
}

// SetTrack gets a reference to the given int32 and assigns it to the Track field.
func (o *RouteEntry) SetTrack(v int32) {
	o.Track = &v
}

// GetBfd returns the Bfd field value if set, zero value otherwise.
func (o *RouteEntry) GetBfd() RouteEntryBfd {
	if o == nil || IsNil(o.Bfd) {
		var ret RouteEntryBfd
		return ret
	}
	return *o.Bfd
}

// GetBfdOk returns a tuple with the Bfd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntry) GetBfdOk() (*RouteEntryBfd, bool) {
	if o == nil || IsNil(o.Bfd) {
		return nil, false
	}
	return o.Bfd, true
}

// HasBfd returns a boolean if a field has been set.
func (o *RouteEntry) HasBfd() bool {
	if o != nil && !IsNil(o.Bfd) {
		return true
	}

	return false
}

// SetBfd gets a reference to the given RouteEntryBfd and assigns it to the Bfd field.
func (o *RouteEntry) SetBfd(v RouteEntryBfd) {
	o.Bfd = &v
}

func (o RouteEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.NextHop) {
		toSerialize["nextHop"] = o.NextHop
	}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.AdminDistance) {
		toSerialize["adminDistance"] = o.AdminDistance
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Track) {
		toSerialize["track"] = o.Track
	}
	if !IsNil(o.Bfd) {
		toSerialize["bfd"] = o.Bfd
	}
	return toSerialize, nil
}

func (o *RouteEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteEntry := _RouteEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteEntry)

	if err != nil {
		return err
	}

	*o = RouteEntry(varRouteEntry)

	return err
}

type NullableRouteEntry struct {
	value *RouteEntry
	isSet bool
}

func (v NullableRouteEntry) Get() *RouteEntry {
	return v.value
}

func (v *NullableRouteEntry) Set(val *RouteEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteEntry(val *RouteEntry) *NullableRouteEntry {
	return &NullableRouteEntry{value: val, isSet: true}
}

func (v NullableRouteEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


