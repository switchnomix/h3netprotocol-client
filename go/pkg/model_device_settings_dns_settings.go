/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the DeviceSettingsDnsSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceSettingsDnsSettings{}

// DeviceSettingsDnsSettings DNS configuration
type DeviceSettingsDnsSettings struct {
	Servers []string `json:"servers,omitempty"`
	Domain *string `json:"domain,omitempty"`
	SearchDomains []string `json:"searchDomains,omitempty"`
}

// NewDeviceSettingsDnsSettings instantiates a new DeviceSettingsDnsSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSettingsDnsSettings() *DeviceSettingsDnsSettings {
	this := DeviceSettingsDnsSettings{}
	return &this
}

// NewDeviceSettingsDnsSettingsWithDefaults instantiates a new DeviceSettingsDnsSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSettingsDnsSettingsWithDefaults() *DeviceSettingsDnsSettings {
	this := DeviceSettingsDnsSettings{}
	return &this
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *DeviceSettingsDnsSettings) GetServers() []string {
	if o == nil || IsNil(o.Servers) {
		var ret []string
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettingsDnsSettings) GetServersOk() ([]string, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *DeviceSettingsDnsSettings) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []string and assigns it to the Servers field.
func (o *DeviceSettingsDnsSettings) SetServers(v []string) {
	o.Servers = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *DeviceSettingsDnsSettings) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettingsDnsSettings) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *DeviceSettingsDnsSettings) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *DeviceSettingsDnsSettings) SetDomain(v string) {
	o.Domain = &v
}

// GetSearchDomains returns the SearchDomains field value if set, zero value otherwise.
func (o *DeviceSettingsDnsSettings) GetSearchDomains() []string {
	if o == nil || IsNil(o.SearchDomains) {
		var ret []string
		return ret
	}
	return o.SearchDomains
}

// GetSearchDomainsOk returns a tuple with the SearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettingsDnsSettings) GetSearchDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchDomains) {
		return nil, false
	}
	return o.SearchDomains, true
}

// HasSearchDomains returns a boolean if a field has been set.
func (o *DeviceSettingsDnsSettings) HasSearchDomains() bool {
	if o != nil && !IsNil(o.SearchDomains) {
		return true
	}

	return false
}

// SetSearchDomains gets a reference to the given []string and assigns it to the SearchDomains field.
func (o *DeviceSettingsDnsSettings) SetSearchDomains(v []string) {
	o.SearchDomains = v
}

func (o DeviceSettingsDnsSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceSettingsDnsSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.SearchDomains) {
		toSerialize["searchDomains"] = o.SearchDomains
	}
	return toSerialize, nil
}

type NullableDeviceSettingsDnsSettings struct {
	value *DeviceSettingsDnsSettings
	isSet bool
}

func (v NullableDeviceSettingsDnsSettings) Get() *DeviceSettingsDnsSettings {
	return v.value
}

func (v *NullableDeviceSettingsDnsSettings) Set(val *DeviceSettingsDnsSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSettingsDnsSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSettingsDnsSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSettingsDnsSettings(val *DeviceSettingsDnsSettings) *NullableDeviceSettingsDnsSettings {
	return &NullableDeviceSettingsDnsSettings{value: val, isSet: true}
}

func (v NullableDeviceSettingsDnsSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSettingsDnsSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


