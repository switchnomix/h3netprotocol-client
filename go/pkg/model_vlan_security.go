/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the VLANSecurity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VLANSecurity{}

// VLANSecurity VLAN security settings
type VLANSecurity struct {
	PrivateVlan *VLANSecurityPrivateVlan `json:"privateVlan,omitempty"`
	MacLimiters *VLANSecurityMacLimiters `json:"macLimiters,omitempty"`
}

// NewVLANSecurity instantiates a new VLANSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVLANSecurity() *VLANSecurity {
	this := VLANSecurity{}
	return &this
}

// NewVLANSecurityWithDefaults instantiates a new VLANSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVLANSecurityWithDefaults() *VLANSecurity {
	this := VLANSecurity{}
	return &this
}

// GetPrivateVlan returns the PrivateVlan field value if set, zero value otherwise.
func (o *VLANSecurity) GetPrivateVlan() VLANSecurityPrivateVlan {
	if o == nil || IsNil(o.PrivateVlan) {
		var ret VLANSecurityPrivateVlan
		return ret
	}
	return *o.PrivateVlan
}

// GetPrivateVlanOk returns a tuple with the PrivateVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANSecurity) GetPrivateVlanOk() (*VLANSecurityPrivateVlan, bool) {
	if o == nil || IsNil(o.PrivateVlan) {
		return nil, false
	}
	return o.PrivateVlan, true
}

// HasPrivateVlan returns a boolean if a field has been set.
func (o *VLANSecurity) HasPrivateVlan() bool {
	if o != nil && !IsNil(o.PrivateVlan) {
		return true
	}

	return false
}

// SetPrivateVlan gets a reference to the given VLANSecurityPrivateVlan and assigns it to the PrivateVlan field.
func (o *VLANSecurity) SetPrivateVlan(v VLANSecurityPrivateVlan) {
	o.PrivateVlan = &v
}

// GetMacLimiters returns the MacLimiters field value if set, zero value otherwise.
func (o *VLANSecurity) GetMacLimiters() VLANSecurityMacLimiters {
	if o == nil || IsNil(o.MacLimiters) {
		var ret VLANSecurityMacLimiters
		return ret
	}
	return *o.MacLimiters
}

// GetMacLimitersOk returns a tuple with the MacLimiters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANSecurity) GetMacLimitersOk() (*VLANSecurityMacLimiters, bool) {
	if o == nil || IsNil(o.MacLimiters) {
		return nil, false
	}
	return o.MacLimiters, true
}

// HasMacLimiters returns a boolean if a field has been set.
func (o *VLANSecurity) HasMacLimiters() bool {
	if o != nil && !IsNil(o.MacLimiters) {
		return true
	}

	return false
}

// SetMacLimiters gets a reference to the given VLANSecurityMacLimiters and assigns it to the MacLimiters field.
func (o *VLANSecurity) SetMacLimiters(v VLANSecurityMacLimiters) {
	o.MacLimiters = &v
}

func (o VLANSecurity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VLANSecurity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrivateVlan) {
		toSerialize["privateVlan"] = o.PrivateVlan
	}
	if !IsNil(o.MacLimiters) {
		toSerialize["macLimiters"] = o.MacLimiters
	}
	return toSerialize, nil
}

type NullableVLANSecurity struct {
	value *VLANSecurity
	isSet bool
}

func (v NullableVLANSecurity) Get() *VLANSecurity {
	return v.value
}

func (v *NullableVLANSecurity) Set(val *VLANSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableVLANSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableVLANSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVLANSecurity(val *VLANSecurity) *NullableVLANSecurity {
	return &NullableVLANSecurity{value: val, isSet: true}
}

func (v NullableVLANSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVLANSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


