/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the DiscoveredNeighborConnectionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveredNeighborConnectionDetails{}

// DiscoveredNeighborConnectionDetails Connection information
type DiscoveredNeighborConnectionDetails struct {
	LocalPort *string `json:"localPort,omitempty"`
	RemotePort *string `json:"remotePort,omitempty"`
	LinkType *string `json:"linkType,omitempty"`
	// Represents either an IPv4 or IPv6 address
	LocalAddress *string `json:"localAddress,omitempty"`
	// Represents either an IPv4 or IPv6 address
	RemoteAddress *string `json:"remoteAddress,omitempty"`
}

// NewDiscoveredNeighborConnectionDetails instantiates a new DiscoveredNeighborConnectionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveredNeighborConnectionDetails() *DiscoveredNeighborConnectionDetails {
	this := DiscoveredNeighborConnectionDetails{}
	return &this
}

// NewDiscoveredNeighborConnectionDetailsWithDefaults instantiates a new DiscoveredNeighborConnectionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveredNeighborConnectionDetailsWithDefaults() *DiscoveredNeighborConnectionDetails {
	this := DiscoveredNeighborConnectionDetails{}
	return &this
}

// GetLocalPort returns the LocalPort field value if set, zero value otherwise.
func (o *DiscoveredNeighborConnectionDetails) GetLocalPort() string {
	if o == nil || IsNil(o.LocalPort) {
		var ret string
		return ret
	}
	return *o.LocalPort
}

// GetLocalPortOk returns a tuple with the LocalPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighborConnectionDetails) GetLocalPortOk() (*string, bool) {
	if o == nil || IsNil(o.LocalPort) {
		return nil, false
	}
	return o.LocalPort, true
}

// HasLocalPort returns a boolean if a field has been set.
func (o *DiscoveredNeighborConnectionDetails) HasLocalPort() bool {
	if o != nil && !IsNil(o.LocalPort) {
		return true
	}

	return false
}

// SetLocalPort gets a reference to the given string and assigns it to the LocalPort field.
func (o *DiscoveredNeighborConnectionDetails) SetLocalPort(v string) {
	o.LocalPort = &v
}

// GetRemotePort returns the RemotePort field value if set, zero value otherwise.
func (o *DiscoveredNeighborConnectionDetails) GetRemotePort() string {
	if o == nil || IsNil(o.RemotePort) {
		var ret string
		return ret
	}
	return *o.RemotePort
}

// GetRemotePortOk returns a tuple with the RemotePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighborConnectionDetails) GetRemotePortOk() (*string, bool) {
	if o == nil || IsNil(o.RemotePort) {
		return nil, false
	}
	return o.RemotePort, true
}

// HasRemotePort returns a boolean if a field has been set.
func (o *DiscoveredNeighborConnectionDetails) HasRemotePort() bool {
	if o != nil && !IsNil(o.RemotePort) {
		return true
	}

	return false
}

// SetRemotePort gets a reference to the given string and assigns it to the RemotePort field.
func (o *DiscoveredNeighborConnectionDetails) SetRemotePort(v string) {
	o.RemotePort = &v
}

// GetLinkType returns the LinkType field value if set, zero value otherwise.
func (o *DiscoveredNeighborConnectionDetails) GetLinkType() string {
	if o == nil || IsNil(o.LinkType) {
		var ret string
		return ret
	}
	return *o.LinkType
}

// GetLinkTypeOk returns a tuple with the LinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighborConnectionDetails) GetLinkTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkType) {
		return nil, false
	}
	return o.LinkType, true
}

// HasLinkType returns a boolean if a field has been set.
func (o *DiscoveredNeighborConnectionDetails) HasLinkType() bool {
	if o != nil && !IsNil(o.LinkType) {
		return true
	}

	return false
}

// SetLinkType gets a reference to the given string and assigns it to the LinkType field.
func (o *DiscoveredNeighborConnectionDetails) SetLinkType(v string) {
	o.LinkType = &v
}

// GetLocalAddress returns the LocalAddress field value if set, zero value otherwise.
func (o *DiscoveredNeighborConnectionDetails) GetLocalAddress() string {
	if o == nil || IsNil(o.LocalAddress) {
		var ret string
		return ret
	}
	return *o.LocalAddress
}

// GetLocalAddressOk returns a tuple with the LocalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighborConnectionDetails) GetLocalAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LocalAddress) {
		return nil, false
	}
	return o.LocalAddress, true
}

// HasLocalAddress returns a boolean if a field has been set.
func (o *DiscoveredNeighborConnectionDetails) HasLocalAddress() bool {
	if o != nil && !IsNil(o.LocalAddress) {
		return true
	}

	return false
}

// SetLocalAddress gets a reference to the given string and assigns it to the LocalAddress field.
func (o *DiscoveredNeighborConnectionDetails) SetLocalAddress(v string) {
	o.LocalAddress = &v
}

// GetRemoteAddress returns the RemoteAddress field value if set, zero value otherwise.
func (o *DiscoveredNeighborConnectionDetails) GetRemoteAddress() string {
	if o == nil || IsNil(o.RemoteAddress) {
		var ret string
		return ret
	}
	return *o.RemoteAddress
}

// GetRemoteAddressOk returns a tuple with the RemoteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighborConnectionDetails) GetRemoteAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteAddress) {
		return nil, false
	}
	return o.RemoteAddress, true
}

// HasRemoteAddress returns a boolean if a field has been set.
func (o *DiscoveredNeighborConnectionDetails) HasRemoteAddress() bool {
	if o != nil && !IsNil(o.RemoteAddress) {
		return true
	}

	return false
}

// SetRemoteAddress gets a reference to the given string and assigns it to the RemoteAddress field.
func (o *DiscoveredNeighborConnectionDetails) SetRemoteAddress(v string) {
	o.RemoteAddress = &v
}

func (o DiscoveredNeighborConnectionDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveredNeighborConnectionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocalPort) {
		toSerialize["localPort"] = o.LocalPort
	}
	if !IsNil(o.RemotePort) {
		toSerialize["remotePort"] = o.RemotePort
	}
	if !IsNil(o.LinkType) {
		toSerialize["linkType"] = o.LinkType
	}
	if !IsNil(o.LocalAddress) {
		toSerialize["localAddress"] = o.LocalAddress
	}
	if !IsNil(o.RemoteAddress) {
		toSerialize["remoteAddress"] = o.RemoteAddress
	}
	return toSerialize, nil
}

type NullableDiscoveredNeighborConnectionDetails struct {
	value *DiscoveredNeighborConnectionDetails
	isSet bool
}

func (v NullableDiscoveredNeighborConnectionDetails) Get() *DiscoveredNeighborConnectionDetails {
	return v.value
}

func (v *NullableDiscoveredNeighborConnectionDetails) Set(val *DiscoveredNeighborConnectionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveredNeighborConnectionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveredNeighborConnectionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveredNeighborConnectionDetails(val *DiscoveredNeighborConnectionDetails) *NullableDiscoveredNeighborConnectionDetails {
	return &NullableDiscoveredNeighborConnectionDetails{value: val, isSet: true}
}

func (v NullableDiscoveredNeighborConnectionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveredNeighborConnectionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


