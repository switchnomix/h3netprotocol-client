/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type EventsAPI interface {

	/*
	EventsSendEventNotification Send event notification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EventsAPIEventsSendEventNotificationRequest
	*/
	EventsSendEventNotification(ctx context.Context) EventsAPIEventsSendEventNotificationRequest

	// EventsSendEventNotificationExecute executes the request
	EventsSendEventNotificationExecute(r EventsAPIEventsSendEventNotificationRequest) (*http.Response, error)
}

// EventsAPIService EventsAPI service
type EventsAPIService service

type EventsAPIEventsSendEventNotificationRequest struct {
	ctx context.Context
	ApiService EventsAPI
	eventNotificationMessage *EventNotificationMessage
}

func (r EventsAPIEventsSendEventNotificationRequest) EventNotificationMessage(eventNotificationMessage EventNotificationMessage) EventsAPIEventsSendEventNotificationRequest {
	r.eventNotificationMessage = &eventNotificationMessage
	return r
}

func (r EventsAPIEventsSendEventNotificationRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventsSendEventNotificationExecute(r)
}

/*
EventsSendEventNotification Send event notification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EventsAPIEventsSendEventNotificationRequest
*/
func (a *EventsAPIService) EventsSendEventNotification(ctx context.Context) EventsAPIEventsSendEventNotificationRequest {
	return EventsAPIEventsSendEventNotificationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EventsAPIService) EventsSendEventNotificationExecute(r EventsAPIEventsSendEventNotificationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.EventsSendEventNotification")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventNotificationMessage == nil {
		return nil, reportError("eventNotificationMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventNotificationMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
