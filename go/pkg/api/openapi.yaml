openapi: 3.0.0
info:
  contact:
    email: h3netprotocol@googlegroups.com
    name: Switchnomix Inc.
    url: https://www.switchnomix.com
  description: H3Net Protocol schema with various messages and configurations.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: H3Net Protocol API
  version: 1.0.0
  x-author: Shivaram Mysore
  x-company: Switchnomix Inc.
  x-copyright: Copyright Â© 2025 Switchnomix Inc. All rights reserved.
  x-documentation: https://h3net.switchnomix.com/api
  x-support: h3netprotocol@googlegroups.com
  x-schema-version: 1.0.0
  x-api-version: v1
  x-case-convention:
    parameters: camelCase
    enums: SCREAMING_SNAKE_CASE
    endpoints: kebab-case
  x-rate-limiting:
    tiers:
      basic: 1000 requests/hour
      premium: 10000 requests/hour
  x-idempotency-guidelines:
    description: Guidelines for idempotent operations
    version: "1.0"
    requirements:
    - All mutation operations (POST/PUT/DELETE) require an Idempotency-Key header
    - Idempotency keys must be UUIDs and are valid for 24 hours
    - Client timestamp required for all requests
    - Duplicate requests within TTL return the original response
    - Clients should implement exponential backoff for retries
    retryGuidelines:
      description: Recommended retry strategy
      strategy:
      - Use exponential backoff starting at 1 second
      - Maximum of 3 retry attempts
      - Maximum delay of 5 seconds between attempts
      - "Only retry on 408, 429, 500, 502, 503, 504 status codes"
  x-protocols:
    definitions:
      standard:
        type: string
        enum:
        - http
        - https
        - http3-webtransport
        default: http
        description: "Protocols supported by this endpoint. Use HTTP/HTTPS for standard\
          \ REST clients, HTTP/3 with WebTransport for bidirectional streaming."
      http-only:
        type: string
        enum:
        - http
        - https
        default: http
        description: Endpoint supports only HTTP/HTTPS protocols.
      http3-webtransport-only:
        type: string
        enum:
        - http3-webtransport
        default: http3-webtransport
        description: Endpoint requires HTTP/3 with WebTransport protocol.
    http:
      description: Standard HTTP/HTTPS endpoints
      ports:
        http: 80
        https: 443
        development: 9001
      usage: Standard request-response pattern
      example: "curl -k https://localhost:9001/hello -H \"Content-Type: application/json\"\
        \ -d '{...}'"
    http3-webtransport:
      description: HTTP/3 with WebTransport protocol support
      ports:
        development: 9000
      usage: Bidirectional streaming for real-time updates
      requirements:
      - HTTP/3 support
      - HTTP/3 with WebTransport protocol support
      - QUIC transport layer
externalDocs:
  description: H3Net Protocol API Reference in Redocly format
  url: /api/H3Net_Protocol_API.html
servers:
- description: H3Net Protocol API Reference
  url: https://h3net.switchnomix.com/api
- description: H3Net Protocol Production server
  url: https://api.h3net.switchnomix.com/v1
- description: H3Net Protocol Staging server
  url: https://staging-api.h3net.switchnomix.com/v1
tags:
- description: Core APIs
  name: core
  x-protocol:
    $ref: '#/info/x-protocols/definitions/standard'
- description: Configuration Management APIs
  name: config
  x-protocol:
    $ref: '#/info/x-protocols/definitions/standard'
- description: Pipeline Management APIs
  name: pipeline
  x-protocol:
    $ref: '#/info/x-protocols/definitions/standard'
- description: Discovery Management APIs
  name: discovery
  x-protocol:
    $ref: '#/info/x-protocols/definitions/standard'
- description: Telemetry Management APIs
  name: telemetry
  x-protocol:
    $ref: '#/info/x-protocols/definitions/standard'
- description: Operations Management APIs
  name: operations
  x-protocol:
    $ref: '#/info/x-protocols/definitions/standard'
- description: Security Management APIs
  name: security
  x-protocol:
    $ref: '#/info/x-protocols/definitions/standard'
paths:
  /hello:
    post:
      operationId: core.sendHello
      requestBody:
        content:
          application/json:
            example:
              type: HELLO
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: 1.0.0
              device:
                deviceId: switch-01
                hostname: switch-01.local
                managementIp: 192.168.1.1
                macAddress: 00:1A:2B:3C:4D:5E
                deviceRoles:
                - Switch
              message: Hello from switch-01
            schema:
              $ref: '#/components/schemas/HelloMessage'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                type: HELLO_RESPONSE
                timestamp: 2024-01-01T00:00:01Z
                schemaVersion: 1.0.0
                status: success
                message: Connection established successfully
              schema:
                $ref: '#/components/schemas/HelloResponse'
          description: Hello acknowledged. Server responds with HELLO_RESPONSE and
            may send a CAPABILITY_REQUEST
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      summary: Send hello message to establish connection
      tags:
      - core
      x-h3net-webtransport:
        enabled: true
        actions:
        - "on": HELLO_RESPONSE
          send: CAPABILITY_REQUEST
  /health:
    get:
      operationId: core.checkHealth
      responses:
        "200":
          content:
            application/json:
              example:
                type: HEALTH_STATUS
                timestamp: 2024-01-01T00:00:00Z
                schemaVersion: 1.0.0
                status:
                  type: STATUS
                  timestamp: 2024-01-01T00:00:00Z
                  state: healthy
                uptime: P1DT2H
                lastChecked: 2024-01-01T00:00:00Z
                components:
                  database: healthy
                  api: healthy
                  telemetry: healthy
                metrics:
                  activeConnections: 100
                  cpuUsage: 20.5
                  memoryUsage: 45.3
              schema:
                $ref: '#/components/schemas/HealthStatusMessage'
          description: System is healthy
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Health information not available.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - System is unhealthy
      summary: Check system health
      tags:
      - core
  /events:
    post:
      operationId: events.sendEventNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationMessage'
        required: true
      responses:
        "200":
          description: Request Successful
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "500":
          description: Internal Server Error
      summary: Send event notification
      tags:
      - events
  /discovery/capabilities:
    get:
      operationId: getDeviceCapabilities
      parameters:
      - description: ID of the device to query
        explode: true
        in: query
        name: deviceId
        required: true
        schema:
          type: string
        style: form
      - description: "Message type, must be CAPABILITY_REQUEST"
        explode: true
        in: query
        name: type
        required: true
        schema:
          enum:
          - CAPABILITY_REQUEST
          type: string
        style: form
      - description: Level of detail in capability response
        explode: true
        in: query
        name: detail
        required: false
        schema:
          default: basic
          enum:
          - basic
          - detailed
          - full
          type: string
        style: form
      - description: "Specific capabilities to query, from CapabilityRequestMessage\
          \ schema"
        explode: true
        in: query
        name: requestedCapabilities
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                type: CAPABILITY_QUERY_RESPONSE
                timestamp: 2024-01-01T00:00:01Z
                schemaVersion: "1.0"
                status: success
                device:
                  deviceId: switch-01
                  hostname: core-switch-01
                  deviceRoles:
                  - Switch
                capabilities:
                  routingSupport: true
                  firewallSupport: false
                  vpnSupport: false
                  loadBalancing: false
                  qosSupport: true
                  ipv6Support: true
                  mplsSupport: false
                  sflowSupport: true
                  netflowSupport: false
                  features:
                    stacking: true
                    portChannels: true
                  supportedProtocols:
                  - lldp
                  - stp
                  - lacp
                  hardwareCapabilities:
                    tcamSize: 8192
                    bufferSize: 32768
                    forwardingCapacity: 400Gbps
                interfaces:
                - name: eth0
                  type: ethernet
                  speed: 1Gbps
                  enabled: true
                supportedTables:
                - acl
                - mac
                - route
                constraints:
                  maxFlowEntries: 10000
                  maxTables: 8
                  maxVlans: 4094
              schema:
                $ref: '#/components/schemas/CapabilityQueryResponse'
          description: Device capabilities retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - No capabilities found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get device capabilities
      tags:
      - discovery
    post:
      operationId: queryDeviceCapabilities
      requestBody:
        content:
          application/json:
            example:
              type: CAPABILITY_REQUEST
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: "1.0"
              detail: detailed
              requestedCapabilities:
              - routingSupport
              - firewallSupport
              - vpnSupport
            schema:
              $ref: '#/components/schemas/CapabilityRequestMessage'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                type: CAPABILITY_QUERY_RESPONSE
                timestamp: 2024-01-01T00:00:01Z
                schemaVersion: "1.0"
                status: success
                device:
                  deviceId: router-01
                  hostname: edge-router-01
                  deviceRoles:
                  - Router
                capabilities:
                  routingSupport: true
                  firewallSupport: true
                  vpnSupport: true
                  loadBalancing: false
                  qosSupport: true
                  ipv6Support: true
                  mplsSupport: true
                  sflowSupport: false
                  netflowSupport: true
                  features:
                    bgp: true
                    ospf: true
                    nat: true
                  supportedProtocols:
                  - bgp
                  - ospf
                  - rip
                  - eigrp
                  hardwareCapabilities:
                    tcamSize: 16384
                    bufferSize: 65536
                    forwardingCapacity: 100Gbps
                interfaces:
                - name: eth0
                  type: ethernet
                  speed: 10Gbps
                  enabled: true
                supportedTables:
                - route
                - nat
                - policy
                constraints:
                  maxFlowEntries: 20000
                  maxTables: 16
                  maxVlans: 4094
              schema:
                $ref: '#/components/schemas/CapabilityQueryResponse'
          description: Capabilities query processed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid input data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Capability not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Query specific device capabilities
      tags:
      - discovery
  /discovery/capabilities/bulk:
    post:
      description: Query capabilities for multiple devices in a single request. This
        endpoint allows efficient retrieval of capability information for a batch
        of devices.
      operationId: queryBulkCapabilities
      requestBody:
        content:
          application/json:
            example:
              devices:
              - switch-01
              - switch-02
              - router-01
              query:
                type: CAPABILITY_REQUEST
                timestamp: 2024-01-01T00:00:00Z
                schemaVersion: "1.0"
                detail: detailed
                requestedCapabilities:
                - routingSupport
                - firewallSupport
            schema:
              $ref: '#/components/schemas/queryBulkCapabilities_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                results:
                  switch-01:
                    type: CAPABILITY_QUERY_RESPONSE
                    timestamp: 2024-01-01T00:00:01Z
                    schemaVersion: "1.0"
                    status: success
                    device:
                      deviceId: switch-01
                      hostname: core-switch-01
                      deviceRoles:
                      - Switch
                    capabilities:
                      routingSupport: true
                      firewallSupport: false
                    interfaces:
                    - name: eth0
                      type: ethernet
                      speed: 1Gbps
                      enabled: true
                  switch-02:
                    type: CAPABILITY_QUERY_RESPONSE
                    timestamp: 2024-01-01T00:00:01Z
                    schemaVersion: "1.0"
                    status: success
                    device:
                      deviceId: switch-02
                      hostname: access-switch-01
                      deviceRoles:
                      - Switch
                    capabilities:
                      routingSupport: false
                      firewallSupport: false
                    interfaces:
                    - name: eth0
                      type: ethernet
                      speed: 1Gbps
                      enabled: true
              schema:
                $ref: '#/components/schemas/queryBulkCapabilities_200_response'
          description: Bulk capability query response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid input data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Query capabilities for multiple devices
      tags:
      - discovery
  /discovery/network:
    get:
      operationId: getNetworkDiscoveryStatus
      responses:
        "200":
          content:
            application/json:
              example:
                type: NETWORK_DISCOVERY_RESPONSE
                timestamp: 2024-01-01T00:00:00Z
                schemaVersion: "1.0"
                discoveryType: lldp
                discoveredDevices:
                - device:
                    deviceId: switch-02
                    hostname: access-switch-01
                    deviceRoles:
                    - Switch
                  discoveryProtocol: lldp
                  distance: 1
                  lastSeen: 2024-01-01T00:00:00Z
                  confidence: 1
                  connectionDetails:
                    localPort: eth1
                    remotePort: eth0
                    linkType: ethernet
                    localAddress: 192.168.1.1
                    remoteAddress: 192.168.1.2
                topology:
                  links:
                  - source: 192.168.1.1
                    target: 192.168.1.2
                    type: ethernet
              schema:
                $ref: '#/components/schemas/NetworkDiscoveryResponseMessage'
          description: Current network discovery status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - No discovery information found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get network discovery status
      tags:
      - discovery
    post:
      description: Initiates network discovery process to identify network topology
        and connected devices
      operationId: performNetworkDiscovery
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: NETWORK_DISCOVERY
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: "1.0"
              discoveryType: lldp
              startPoints:
              - 192.168.1.1
              subnets:
              - address: 192.168.1.0
                prefixLength: 24
            schema:
              $ref: '#/components/schemas/NetworkDiscoveryMessage'
        description: Network discovery parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                type: NETWORK_DISCOVERY_RESPONSE
                timestamp: 2024-01-01T00:00:00Z
                schemaVersion: "1.0"
                discoveryType: lldp
                discoveredDevices:
                - device:
                    deviceId: switch-02
                    hostname: access-switch-01
                    deviceRoles:
                    - Switch
                  discoveryProtocol: lldp
                  distance: 1
                  lastSeen: 2024-01-01T00:00:00Z
                  confidence: 1
                  connectionDetails:
                    localPort: eth1
                    remotePort: eth0
                    linkType: ethernet
                    localAddress: 192.168.1.1
                    remoteAddress: 192.168.1.2
              schema:
                $ref: '#/components/schemas/NetworkDiscoveryResponseMessage'
          description: Network discovery completed successfully
        "400":
          content:
            application/json:
              example:
                type: ERROR
                timestamp: 2024-01-01T00:00:03Z
                schemaVersion: "1.0"
                status: error
                error:
                  code: 400
                  message: Invalid discovery parameters
                errorCode: 400
                errorMessage: Invalid discovery parameters
                context: Network discovery validation
                causes:
                - Invalid subnet range specified
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Invalid discovery parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency key conflict - request already processed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Perform Network Discovery
      tags:
      - discovery
  /discovery/network/options:
    get:
      operationId: getNetworkDiscoveryOptions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkDiscoveryOptions'
          description: Network discovery options retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - No discovery options found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get network discovery options
      tags:
      - discovery
    put:
      operationId: updateNetworkDiscoveryOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkDiscoveryOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkDiscoveryOptions'
          description: Discovery options updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid discovery options.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Discovery options not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Update discovery options
      tags:
      - discovery
  /discovery/network/neighbors/{deviceId}:
    get:
      operationId: getDeviceNeighbors
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: protocol
        required: false
        schema:
          enum:
          - lldp
          - cdp
          - fdb
          - bgp_neighbors
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DiscoveredNeighbor'
                type: array
          description: Device neighbors retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid deviceId or protocol parameter.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device not found or no neighbors discovered.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get device neighbors
      tags:
      - discovery
  /discovery/network/topology:
    get:
      operationId: getNetworkTopology
      parameters:
      - description: Topology discovery depth
        explode: true
        in: query
        name: depth
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Discovery protocol to use
        explode: true
        in: query
        name: protocol
        required: false
        schema:
          enum:
          - lldp
          - cdp
          - fdb
          - bgp_neighbors
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkTopology'
          description: Network topology retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - No topology information found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get network topology
      tags:
      - discovery
  /config/acls:
    get:
      operationId: getAllAcls
      responses:
        "200":
          content:
            application/json:
              example:
              - type: extended
                timestamp: 2024-03-15T10:30:00Z
                schemaVersion: "1.0"
                aclName: web-traffic-acl
                description: Web traffic filtering rules
                rules:
                - ruleId: 10
                  description: Allow HTTP traffic
                  matches:
                    ip_proto: 6
                    tcp_dst: 80
                    src_ip:
                      address: 192.168.1.0
                      prefixLength: 24
                  actions:
                    allow: true
                  enabled: true
                - ruleId: 20
                  description: Allow HTTPS traffic
                  matches:
                    ip_proto: 6
                    tcp_dst: 443
                    src_ip:
                      address: 192.168.1.0
                      prefixLength: 24
                  actions:
                    allow: true
                  enabled: true
              schema:
                items:
                  $ref: '#/components/schemas/ACL'
                type: array
          description: List of all ACLs retrieved successfully.
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Get all ACLs
      tags:
      - acl
    post:
      operationId: createAcl
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: extended
              requestId: 123e4567-e89b-12d3-a456-426614174000
              timestamp: 2024-03-15T11:00:00Z
              schemaVersion: "1.0"
              aclName: web-traffic-acl
              description: New ACL for web traffic
              rules:
              - ruleId: 1
                description: Allow HTTPS traffic
                matches:
                  eth_type: 2048
                  ip_proto: 6
                  dst_ip:
                    address: 0.0.0.0
                    prefixLength: 0
                  tcp_dst: 443
                actions:
                  allow: true
                enabled: true
            schema:
              $ref: '#/components/schemas/createAcl_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: ACL created successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
        "500":
          description: Internal Server Error
      summary: Create a new ACL
      tags:
      - acl
  /config/acls/{aclId}:
    get:
      operationId: getAclConfig
      parameters:
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                aclId: 100
                type: extended
                timestamp: 2024-03-15T10:30:00Z
                schemaVersion: "1.0"
                aclName: web-traffic-acl
                description: ACL for web traffic
                rules:
                - ruleId: 1
                  description: Allow HTTP traffic
                  matches:
                    eth_type: 2048
                    ip_proto: 6
                    dst_ip:
                      address: 0.0.0.0
                      prefixLength: 0
                    tcp_dst: 80
                  actions:
                    allow: true
                  enabled: true
                - ruleId: 2
                  description: Allow HTTPS traffic
                  matches:
                    eth_type: 2048
                    ip_proto: 6
                    dst_ip:
                      address: 0.0.0.0
                      prefixLength: 0
                    tcp_dst: 443
                  actions:
                    allow: true
                  enabled: true
              schema:
                $ref: '#/components/schemas/ACL'
          description: ACL configuration retrieved successfully.
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Get ACL configuration
      tags:
      - acl
    put:
      operationId: updateAclConfig
      parameters:
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclId
        required: true
        schema:
          type: string
        style: simple
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: extended
              requestId: 123e4567-e89b-12d3-a456-426614174000
              timestamp: 2024-03-15T11:00:00Z
              schemaVersion: "1.0"
              aclName: web-traffic-acl
              description: Updated ACL for web traffic filtering
              rules:
              - ruleId: 1
                description: Allow HTTP traffic
                matches:
                  eth_type: 2048
                  ip_proto: 6
                  dst_ip:
                    address: 0.0.0.0
                    prefixLength: 0
                  tcp_dst: 80
                actions:
                  allow: true
                enabled: true
              - ruleId: 2
                description: Allow HTTPS traffic
                matches:
                  eth_type: 2048
                  ip_proto: 6
                  dst_ip:
                    address: 0.0.0.0
                    prefixLength: 0
                  tcp_dst: 443
                actions:
                  allow: true
                enabled: true
            schema:
              $ref: '#/components/schemas/createAcl_request'
        required: true
      responses:
        "200":
          description: ACL configuration updated successfully.
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
        "500":
          description: Internal Server Error
      summary: Update ACL configuration
      tags:
      - acl
  /config/acls/device/{deviceId}:
    get:
      operationId: getDeviceAcls
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - type: extended
                timestamp: 2024-03-15T10:30:00Z
                schemaVersion: "1.0"
                aclName: web-traffic-acl
                description: Web traffic filtering rules
                rules:
                - ruleId: 1
                  description: Allow HTTP traffic
                  matches:
                    eth_type: 2048
                    ip_proto: 6
                    dst_ip:
                      address: 0.0.0.0
                      prefixLength: 0
                    tcp_dst: 80
                  actions:
                    allow: true
                  enabled: true
                - ruleId: 2
                  description: Allow HTTPS traffic
                  matches:
                    eth_type: 2048
                    ip_proto: 6
                    dst_ip:
                      address: 0.0.0.0
                      prefixLength: 0
                    tcp_dst: 443
                  actions:
                    allow: true
                  enabled: true
              schema:
                items:
                  $ref: '#/components/schemas/ACL'
                type: array
          description: ACLs retrieved successfully.
        "400":
          description: Bad Request - Invalid device ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Device not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      summary: Get all ACLs for a specific device
      tags:
      - acl
    post:
      operationId: createDeviceAcl
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: extended
              timestamp: 2024-03-15T11:00:00Z
              schemaVersion: "1.0"
              deviceId: switch-01
              aclName: new-device-acl
              description: Device-specific ACL
              rules:
              - ruleId: 40
                description: Allow management traffic
                matches:
                  ip_proto: 6
                  tcp_dst: 22
                  src_ip:
                    address: 192.168.1.0
                    prefixLength: 24
                actions:
                  allow: true
                enabled: true
            schema:
              $ref: '#/components/schemas/ACL'
        required: true
      responses:
        "201":
          description: ACL created successfully.
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Device not found.
        "409":
          description: Conflict - ACL with the same name already exists.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      summary: Create a new ACL for a specific device
      tags:
      - acl
  /config/acls/{deviceId}/{aclName}:
    delete:
      operationId: deleteACL
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: ACL deleted successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Delete ACL
      tags:
      - config
    get:
      operationId: getACL
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                type: extended
                timestamp: 2024-03-15T10:30:00Z
                schemaVersion: "1.0"
                aclName: web-traffic-acl
                description: ACL for web traffic filtering
                aclType: extended
                rules:
                - ruleId: 10
                  description: Allow HTTP traffic
                  matches:
                    ip_proto: 6
                    tcp_dst: 80
                    src_ip:
                      address: 192.168.1.0
                      prefixLength: 24
                  actions:
                    allow: true
                    logging:
                      enabled: true
                      level: info
                  enabled: true
                - ruleId: 20
                  description: Allow HTTPS traffic
                  matches:
                    ip_proto: 6
                    tcp_dst: 443
                    src_ip:
                      address: 192.168.1.0
                      prefixLength: 24
                  actions:
                    allow: true
                    logging:
                      enabled: true
                      level: info
                  enabled: true
                statistics:
                  totalHits: 150
                  lastUpdated: 2024-03-15T10:30:00Z
              schema:
                $ref: '#/components/schemas/ACL'
          description: ACL details
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Get specific ACL
      tags:
      - config
    put:
      operationId: updateACL
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: extended
              timestamp: 2024-03-15T11:00:00Z
              schemaVersion: "1.0"
              aclName: web-traffic-acl
              description: Web traffic filtering rules
              aclType: extended
              rules:
              - ruleId: 1
                description: Allow HTTP traffic
                matches:
                  ip_proto: 6
                  tcp_dst: 80
                  src_ip:
                    address: 192.168.1.0
                    prefixLength: 24
                actions:
                  allow: true
                  logging:
                    enabled: true
                    level: info
                enabled: true
              - ruleId: 2
                description: Allow HTTPS traffic
                matches:
                  ip_proto: 6
                  tcp_dst: 443
                  src_ip:
                    address: 192.168.1.0
                    prefixLength: 24
                actions:
                  allow: true
                  logging:
                    enabled: true
                    level: info
                enabled: true
            schema:
              $ref: '#/components/schemas/ACL'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: ACL updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Create or update ACL
      tags:
      - config
  /config/acls/{deviceId}/{aclName}/rules:
    post:
      operationId: addACLRule
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              ruleId: 30
              description: Allow HTTPS traffic
              matches:
                ip_proto: 6
                tcp_dst: 443
                src_ip:
                  address: 192.168.1.0
                  prefixLength: 24
              actions:
                allow: true
                logging:
                  enabled: true
                  level: info
              enabled: true
            schema:
              $ref: '#/components/schemas/ACLRule'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLRule'
          description: Rule added successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Add rule to ACL
      tags:
      - config
  /config/acls/{deviceId}/{aclName}/rules/{ruleId}:
    delete:
      operationId: deleteACLRule
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclName
        required: true
        schema:
          type: string
        style: simple
      - example: 1
        explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Rule deleted successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Delete ACL rule
      tags:
      - config
    put:
      operationId: updateACLRule
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - example: web-traffic-acl
        explode: false
        in: path
        name: aclName
        required: true
        schema:
          type: string
        style: simple
      - example: 1
        explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              ruleId: 1
              description: Updated HTTP traffic rule
              matches:
                ip_proto: 6
                tcp_dst: 80
              actions:
                allow: true
                logging:
                  enabled: true
                  level: debug
              enabled: true
            schema:
              $ref: '#/components/schemas/ACLRule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLRule'
          description: Rule updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Update ACL rule
      tags:
      - config
  /config/devices:
    get:
      operationId: getAllDeviceConfigs
      responses:
        "200":
          content:
            application/json:
              example:
              - deviceId: switch-01
                deviceRoles:
                - Switch
                managementIp: 192.168.1.10
                hostname: core-switch-01
                macAddress: 00:11:22:33:44:55
              - deviceId: router-01
                deviceRoles:
                - Router
                managementIp: 2001:db8::1
                hostname: edge-router-01
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: List of device configurations
        "400":
          description: Bad Request - Invalid query parameters.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - No devices found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get all device configurations
      tags:
      - config
    post:
      description: Create a new device or update an existing device configuration
      operationId: createOrUpdateDevice
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: DEVICE_CONFIG_UPDATE
              timestamp: 2024-03-15T11:00:00Z
              requestId: 123e4567-e89b-12d3-a456-426614174003
              config:
                type: DEVICE_CONFIG_UPDATE
                timestamp: 2024-03-15T11:00:00Z
                schemaVersion: "1.0"
                device:
                  deviceId: switch-02
                  deviceRoles:
                  - Switch
                config:
                  deviceSettings:
                    type: DEVICE_SETTINGS_UPDATE
                    timestamp: 2024-03-15T11:00:00Z
                    deviceId: switch-02
                    hostname: access-switch-02
                    managementIp: 192.168.1.12
                    snmpCommunity: public
                    ntpServers:
                    - 192.168.1.1
                    - ntp.example.com
                    syslogServers:
                    - syslog.example.com
                    dnsSettings:
                      servers:
                      - 8.8.8.8
                      - 8.8.4.4
                      domain: example.com
                      searchDomains:
                      - example.com
                      - corp.example.com
                applyImmediately: true
            schema:
              $ref: '#/components/schemas/createOrUpdateDevice_request'
        required: true
      responses:
        "200":
          description: Device configuration updated successfully
        "201":
          description: Device created successfully
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Create or update device configuration
      tags:
      - config
  /config/devices/info/bulk:
    post:
      operationId: requestBulkDeviceInfo
      requestBody:
        content:
          application/json:
            example:
              type: DEVICE_INFO_REQUEST
              timestamp: 2024-01-01T00:00:00Z
              devices:
              - switch-01
              - switch-02
              schemaVersion: "1.0"
            schema:
              $ref: '#/components/schemas/requestBulkDeviceInfo_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/DeviceInfoResponse'
                type: object
          description: Bulk device information response
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Request information for multiple devices
      tags:
      - config
  /config/devices/{deviceId}:
    get:
      operationId: getDeviceConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                type: DEVICE_SETTINGS_UPDATE
                timestamp: 2024-03-15T11:00:00Z
                deviceId: switch-01
                hostname: core-switch-01
                managementIp: 2001:db8::10
                snmpCommunity: public
                ntpServers:
                - 192.168.1.1
                - ntp.example.com
                syslogServers:
                - syslog.example.com
                dnsSettings:
                  servers:
                  - 8.8.8.8
                  - 8.8.4.4
                  domain: example.com
                  searchDomains:
                  - example.com
                  - corp.example.com
              schema:
                $ref: '#/components/schemas/DeviceSettings'
          description: Device configuration
        "400":
          description: Bad Request - Invalid device ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Device not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get device configuration
      tags:
      - config
    put:
      operationId: updateDeviceConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: DEVICE_CONFIG_UPDATE
              timestamp: 2024-03-15T11:00:00Z
              schemaVersion: "1.0"
              device:
                deviceId: switch-01
                deviceRoles:
                - Switch
              config:
                deviceSettings:
                  type: DEVICE_SETTINGS_UPDATE
                  timestamp: 2024-03-15T11:00:00Z
                  deviceId: switch-01
                  hostname: core-switch-01-updated
                  managementIp: 2001:db8::10
                  snmpCommunity: public
                  ntpServers:
                  - 192.168.1.1
                  - ntp.example.com
                  syslogServers:
                  - syslog.example.com
                  dnsSettings:
                    servers:
                    - 8.8.8.8
                    - 8.8.4.4
                    domain: example.com
                    searchDomains:
                    - example.com
                    - corp.example.com
            schema:
              $ref: '#/components/schemas/DeviceConfigUpdateMessage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceSettings'
          description: Device configuration updated successfully
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Device not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Update device configuration
      tags:
      - config
  /config/devices/{deviceId}/info:
    get:
      description: Query device information using DeviceInfoRequest parameters. The
        type parameter must be DEVICE_INFO_REQUEST to match the DeviceInfoRequest
        component schema.
      operationId: getDeviceInfo
      parameters:
      - description: ID of the device to query (from DeviceInfoRequest)
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - description: "Message type, must be DEVICE_INFO_REQUEST (from DeviceInfoRequest)"
        explode: true
        in: query
        name: type
        required: true
        schema:
          enum:
          - DEVICE_INFO_REQUEST
          type: string
        style: form
      - description: Request timestamp (from BaseMessage)
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInfoResponse'
          description: Device information response
        "400":
          description: Bad Request - Invalid query parameters.
        "401":
          description: Unauthorized - Invalid API key.
        "404":
          description: Not Found - Device not found.
      security:
      - configAuth: []
      summary: Get device information
      tags:
      - config
    post:
      operationId: requestDeviceInfo
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: DEVICE_INFO_REQUEST
              timestamp: 2024-01-01T00:00:00Z
              deviceId: switch-01
              schemaVersion: "1.0"
            schema:
              $ref: '#/components/schemas/DeviceInfoRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                type: DEVICE_INFO_RESPONSE
                timestamp: 2024-01-01T00:00:01Z
                deviceId: switch-01
                schemaVersion: "1.0"
                settings:
                  type: DEVICE_INFO_RESPONSE
                  timestamp: 2024-01-01T00:00:00Z
                  deviceId: switch-01
                  hostname: core-switch-01
              schema:
                $ref: '#/components/schemas/DeviceInfoResponse'
          description: Device information response
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "404":
          description: Not Found - Device not found.
      security:
      - configAuth: []
      summary: Request device information
      tags:
      - config
  /config/devices/{deviceId}/interfaces:
    get:
      operationId: getDeviceInterfaces
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/getDeviceInterfaces_200_response_value'
                type: object
          description: Device interfaces configuration
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get device interfaces configuration
      tags:
      - config
  /config/devices/{deviceId}/interfaces/{interfaceId}:
    put:
      operationId: updateInterfaceConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getDeviceInterfaces_200_response_value'
        required: true
      responses:
        "200":
          description: Interface configuration updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Update interface configuration
      tags:
      - config
  /config/devices/{deviceId}/system:
    get:
      operationId: getSystemSettings
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSystemSettings_200_response'
          description: System settings
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get system settings
      tags:
      - config
    put:
      operationId: updateSystemSettings
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getSystemSettings_200_response'
        required: true
      responses:
        "200":
          description: System settings updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Update system settings
      tags:
      - config
  /config/switch:
    get:
      description: "Retrieves the configuration of a network switch including features,\
        \ ports, and capabilities"
      operationId: getSwitchConfig
      parameters:
      - description: ID of the switch
        explode: true
        in: query
        name: deviceId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                deviceId: switch-01
                deviceModel: SN-8800-48P
                firmwareVersion: 1.2.3
                datapathId: 00:00:00:00:00:00:00:01
                deviceRoles:
                - Switch
                numTables: 4
                numPorts: 48
                networkInterfaces:
                - name: eth0
                  description: Uplink to Core
                  enabled: true
                  speed: 10Gbps
                  type: ethernet
                  mtu: 9000
                ports:
                - portId: 1
                  name: eth1
                  type: ethernet
                  enabled: true
                  speed: 10Gbps
                  adminState: enabled
                  operState: up
                  nativeVlan: 1
                  maxLearnedMacs: 1000
                  stormControl:
                    broadcast: 80
                    multicast: 80
                    unicast: 90
                features:
                  stacking:
                    enabled: true
                    role: master
                    priority: 100
                  portChannels:
                    maxGroups: 24
                    supportedProtocols:
                    - lacp
                    - static
                  spanningTree:
                    enabled: true
                    mode: rstp
                deviceConfig:
                  hostname: edge-switch-01
                  managementIp: 192.168.1.10
                  deviceMode: STANDALONE
                  systemSettings:
                    timezone: UTC
                    ntpServers:
                    - pool.ntp.org
                    loggingLevel: INFO
              schema:
                $ref: '#/components/schemas/SwitchDeviceConfig'
          description: Switch configuration retrieved successfully
        "400":
          description: Bad Request - Invalid query parameters.
        "401":
          description: Unauthorized - Invalid API key.
        "404":
          description: Not Found - Device not found.
      security:
      - configAuth: []
      summary: Get Switch Configuration
      tags:
      - config
    post:
      description: Updates the configuration of a network switch
      operationId: updateSwitchConfig
      requestBody:
        content:
          application/json:
            example:
              deviceId: switch-02
              datapathId: 00:00:00:00:00:00:00:02
              deviceRoles:
              - Switch
              numTables: 4
              numPorts: 24
              ports:
              - portId: 1
                name: eth1
                type: ethernet
                enabled: true
                speed: 1Gbps
                adminState: enabled
                operState: up
                nativeVlan: 1
                maxLearnedMacs: 1000
                portSecurity:
                  enabled: true
                  maxMacAddresses: 10
                  violationAction: protect
              features:
                stacking:
                  enabled: false
                portChannels:
                  maxGroups: 8
                  supportedProtocols:
                  - lacp
                spanningTree:
                  enabled: true
                  mode: rstp
            schema:
              $ref: '#/components/schemas/SwitchDeviceConfig'
        description: Switch configuration update
        required: true
      responses:
        "200":
          description: Switch configuration updated successfully
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "409":
          description: Conflict - Business rule conflict.
      security:
      - configAuth: []
      summary: Update Switch Configuration
      tags:
      - config
  /config/switches:
    get:
      operationId: getAllSwitches
      responses:
        "200":
          content:
            application/json:
              example:
              - deviceId: switch-01
                deviceRoles:
                - Switch
                datapathId: 00:00:00:00:00:00:00:01
                numTables: 4
                numPorts: 48
                ports:
                - portId: 1
                  name: eth1
                  type: ethernet
                  speed: 10Gbps
                  enabled: true
                  adminState: enabled
              - deviceId: switch-02
                deviceRoles:
                - Switch
                datapathId: 00:00:00:00:00:00:00:02
                numTables: 4
                numPorts: 24
                ports:
                - portId: 1
                  name: eth1
                  type: ethernet
                  speed: 1Gbps
                  enabled: true
                  adminState: enabled
              schema:
                items:
                  $ref: '#/components/schemas/SwitchDeviceConfig'
                type: array
          description: List of all switches retrieved successfully.
        "400":
          description: Bad Request - Invalid query parameters.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - No switches found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get all switches
      tags:
      - switch
  /config/switches/{deviceId}:
    get:
      operationId: getSwitchConfigById
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                deviceId: switch-01
                datapathId: 00:00:00:00:00:00:00:01
                deviceRoles:
                - Switch
                numTables: 4
                numPorts: 48
                ports:
                - portId: 1
                  name: eth1
                  type: ethernet
                  enabled: true
                  speed: 10Gbps
                  adminState: enabled
                  operState: up
                  nativeVlan: 1
                  maxLearnedMacs: 1000
                  stormControl:
                    broadcast: 80
                    multicast: 80
                    unicast: 90
                features:
                  stacking:
                    enabled: true
                    role: master
                    priority: 100
                  portChannels:
                    maxGroups: 24
                    supportedProtocols:
                    - lacp
                    - static
                  spanningTree:
                    enabled: true
                    mode: rstp
              schema:
                $ref: '#/components/schemas/SwitchDeviceConfig'
          description: Switch configuration retrieved successfully.
        "400":
          description: Bad Request - Invalid device ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Switch not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get switch configuration
      tags:
      - switch
    put:
      operationId: updateSwitchConfigById
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwitchDeviceConfig'
        required: true
      responses:
        "200":
          description: Switch configuration updated successfully.
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Switch not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Update switch configuration
      tags:
      - switch
  /config/switches/{deviceId}/features:
    get:
      operationId: getSwitchFeatures
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                stacking:
                  enabled: true
                  role: master
                  priority: 100
                portChannels:
                  maxGroups: 24
                  supportedProtocols:
                  - lacp
                  - static
                spanningTree:
                  enabled: true
                  mode: rstp
              schema:
                $ref: '#/components/schemas/SwitchFeatures'
          description: Switch features retrieved successfully.
        "400":
          description: Bad Request - Invalid device ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Switch not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get switch features
      tags:
      - switch
    put:
      operationId: updateSwitchFeatures
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              stacking:
                enabled: true
                role: backup
                priority: 90
              portChannels:
                maxGroups: 24
                supportedProtocols:
                - lacp
                - pagp
                - static
              spanningTree:
                enabled: true
                mode: mstp
            schema:
              $ref: '#/components/schemas/SwitchFeatures'
        required: true
      responses:
        "200":
          description: Switch features updated successfully.
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Switch not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Update switch features
      tags:
      - switch
  /config/switches/{deviceId}/ports:
    get:
      operationId: getAllPorts
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - portId: 1
                name: eth1
                type: ethernet
                enabled: true
                speed: 10Gbps
                adminState: enabled
                operState: up
                nativeVlan: 1
                maxLearnedMacs: 1000
                stormControl:
                  broadcast: 80
                  multicast: 80
                  unicast: 90
              - portId: 2
                name: eth2
                type: ethernet
                enabled: true
                speed: 10Gbps
                adminState: enabled
                operState: up
                nativeVlan: 1
                maxLearnedMacs: 1000
              schema:
                items:
                  $ref: '#/components/schemas/PortConfig'
                type: array
          description: List of port configurations retrieved successfully.
        "400":
          description: Bad Request - Invalid device ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - No ports found for the switch.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get all port configurations
      tags:
      - switch
  /config/switches/{deviceId}/ports/{portId}:
    get:
      operationId: getPortConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: portId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                portId: 1
                name: eth1
                type: ethernet
                enabled: true
                speed: 10Gbps
                adminState: enabled
                operState: up
                nativeVlan: 1
                maxLearnedMacs: 1000
                stormControl:
                  broadcast: 80
                  multicast: 80
                  unicast: 90
              schema:
                $ref: '#/components/schemas/PortConfig'
          description: Port configuration retrieved successfully.
        "400":
          description: Bad Request - Invalid port ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Port not found for the switch.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get port configuration
      tags:
      - switch
    put:
      operationId: updatePortConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: portId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              portId: 1
              name: eth1
              type: ethernet
              enabled: true
              speed: 10Gbps
              adminState: enabled
              nativeVlan: 10
              maxLearnedMacs: 2000
              stormControl:
                broadcast: 70
                multicast: 70
                unicast: 80
              portSecurity:
                enabled: true
                maxMacAddresses: 5
                violationAction: restrict
            schema:
              $ref: '#/components/schemas/PortConfig'
        required: true
      responses:
        "200":
          description: Port configuration updated successfully.
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Port not found for the switch.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Update port configuration
      tags:
      - switch
  /config/vlan:
    get:
      description: Retrieve VLAN configuration details
      operationId: getVlanConfig
      parameters:
      - description: VLAN identifier
        explode: true
        in: query
        name: vlanId
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                vlanId: 100
                name: user-vlan
                description: VLAN for user traffic
                status: active
                ports:
                  untagged:
                  - name: eth1
                    type: ethernet
                    speed: 10Gbps
                    enabled: true
                  tagged:
                  - name: eth2
                    type: ethernet
                    speed: 10Gbps
                    enabled: true
                properties:
                  mtu: 9000
                  igmpSnooping: true
                  dhcpSnooping: true
                  stormControl:
                    broadcast: 80
                    multicast: 80
                    unicast: 90
              schema:
                $ref: '#/components/schemas/VLAN'
          description: VLAN configuration details
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get VLAN Configuration
      tags:
      - config
    post:
      description: Create a new VLAN or update existing VLAN configuration
      operationId: createVlanConfig
      requestBody:
        content:
          application/json:
            example:
              vlanId: 200
              name: guest-vlan
              description: VLAN for guest access
              status: active
              ports:
                untagged:
                - name: eth3
                  type: ethernet
                  speed: 1Gbps
                  enabled: true
                tagged: []
              properties:
                mtu: 1500
                igmpSnooping: false
                dhcpSnooping: true
                stormControl:
                  broadcast: 70
                  multicast: 70
                  unicast: 80
              security:
                macLimiters:
                  maxMacAddresses: 100
                  violationAction: protect
            schema:
              $ref: '#/components/schemas/VLAN'
        description: VLAN configuration details
        required: true
      responses:
        "200":
          description: Request Successful
        "201":
          description: Created Successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "409":
          description: Business Rule Conflict
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Create or Update VLAN Configuration
      tags:
      - config
    put:
      description: Update existing VLAN configuration
      operationId: updateVlanConfig
      parameters:
      - description: ETag for optimistic concurrency control
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLAN'
        description: VLAN configuration details
        required: true
      responses:
        "200":
          description: Request Successful
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "409":
          description: Business Rule Conflict
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Update VLAN Configuration
      tags:
      - config
  /config/vlans:
    get:
      operationId: getAllVlanConfigs
      responses:
        "200":
          content:
            application/json:
              example:
              - vlanId: 100
                name: user-vlan
                description: VLAN for user traffic
                status: active
                ports:
                  untagged:
                  - name: eth1
                    type: ethernet
                    speed: 10Gbps
                    enabled: true
                  tagged:
                  - name: eth2
                    type: ethernet
                    speed: 10Gbps
                    enabled: true
              - vlanId: 200
                name: guest-vlan
                description: VLAN for guest access
                status: active
                ports:
                  untagged:
                  - name: eth3
                    type: ethernet
                    speed: 1Gbps
                    enabled: true
                  tagged: []
              schema:
                items:
                  $ref: '#/components/schemas/VLAN'
                type: array
          description: List of all VLAN configurations retrieved successfully.
        "400":
          description: Bad Request - Invalid query parameters.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - No VLAN configurations found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      summary: Get all VLAN configurations
      tags:
      - vlan
  /config/vlans/{deviceId}:
    get:
      operationId: getDeviceVLANs
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - vlanId: 100
                name: user-vlan
                description: VLAN for user traffic
                status: active
                ports:
                  untagged:
                  - name: eth1
                    type: ethernet
                    speed: 10Gbps
                    enabled: true
                  tagged:
                  - name: eth2
                    type: ethernet
                    speed: 10Gbps
                    enabled: false
              schema:
                items:
                  $ref: '#/components/schemas/VLAN'
                type: array
          description: List of VLANs
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Get all VLANs for a device
      tags:
      - vlan
    post:
      operationId: createVLAN
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLAN'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VLAN'
          description: VLAN created successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "409":
          description: Business Rule Conflict
        "500":
          description: Internal Server Error
      summary: Create new VLAN
      tags:
      - vlan
  /config/vlans/{deviceId}/{vlanId}:
    delete:
      operationId: deleteVLAN
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: vlanId
        required: true
        schema:
          maximum: 4094
          minimum: 1
          type: integer
        style: simple
      responses:
        "204":
          description: VLAN deleted successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Delete VLAN
      tags:
      - vlan
    get:
      operationId: getVLAN
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: vlanId
        required: true
        schema:
          maximum: 4094
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                vlanId: 100
                name: user-vlan
                description: VLAN for user traffic
                status: active
                ports:
                  untagged:
                  - name: eth1
                    type: ethernet
                    speed: 10Gbps
                    enabled: true
                  tagged:
                  - name: eth2
                    type: ethernet
                    speed: 10Gbps
                    enabled: false
                properties:
                  mtu: 9000
                  igmpSnooping: true
                  dhcpSnooping: true
              schema:
                $ref: '#/components/schemas/VLAN'
          description: VLAN details
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Get VLAN details
      tags:
      - vlan
    put:
      operationId: updateVLAN
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: vlanId
        required: true
        schema:
          maximum: 4094
          minimum: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              vlanId: 100
              name: user-vlan-updated
              description: Updated VLAN for user traffic
              status: active
              ports:
                untagged:
                - name: eth1
                  type: ethernet
                  speed: 10Gbps
                  enabled: true
                - name: eth3
                  type: ethernet
                  speed: 10Gbps
                  enabled: true
                tagged:
                - name: eth2
                  type: ethernet
                  speed: 10Gbps
                  enabled: false
              properties:
                mtu: 9000
                igmpSnooping: true
                dhcpSnooping: true
                stormControl:
                  broadcast: 60
                  multicast: 60
                  unicast: 70
            schema:
              $ref: '#/components/schemas/VLAN'
        required: true
      responses:
        "200":
          description: VLAN updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "409":
          description: Business Rule Conflict
        "500":
          description: Internal Server Error
      summary: Update VLAN configuration
      tags:
      - vlan
  /config/vlans/{deviceId}/{vlanId}/ports:
    put:
      operationId: updateVLANPorts
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: vlanId
        required: true
        schema:
          maximum: 4094
          minimum: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              untagged:
              - name: eth1
                type: ethernet
                speed: 10Gbps
                enabled: true
              - name: eth3
                type: ethernet
                speed: 10Gbps
                enabled: true
              tagged:
              - name: eth2
                type: ethernet
                speed: 10Gbps
                enabled: false
              - name: eth4
                type: ethernet
                speed: 10Gbps
                enabled: false
            schema:
              $ref: '#/components/schemas/ports'
        required: true
      responses:
        "200":
          description: VLAN ports updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Update VLAN port assignments
      tags:
      - vlan
  /config/vlans/{deviceId}/{vlanId}/properties:
    put:
      operationId: updateVLANProperties
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: vlanId
        required: true
        schema:
          maximum: 4094
          minimum: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              mtu: 9000
              priority: 5
              igmpSnooping: true
              dhcpSnooping: true
              arpInspection: true
              stormControl:
                broadcast: 50
                multicast: 50
                unicast: 60
            schema:
              $ref: '#/components/schemas/VLANProperties'
        required: true
      responses:
        "200":
          description: VLAN properties updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      summary: Update VLAN properties
      tags:
      - vlan
  /config/vlans/id/{vlanId}:
    get:
      operationId: getVlanConfigById
      parameters:
      - explode: false
        in: path
        name: vlanId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VLAN'
          description: VLAN configuration retrieved successfully.
        "400":
          description: Bad Request - Invalid VLAN ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - VLAN configuration not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      summary: Get specific VLAN configuration
      tags:
      - vlan
    put:
      operationId: updateVlanConfigById
      parameters:
      - explode: false
        in: path
        name: vlanId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLAN'
        required: true
      responses:
        "200":
          description: VLAN configuration updated successfully.
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - VLAN configuration not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      summary: Update VLAN configuration by ID
      tags:
      - vlan
  /config/routing:
    get:
      description: Retrieve device routing configuration
      operationId: getRoutingConfig
      parameters:
      - description: Device identifier
        explode: true
        in: query
        name: deviceId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                staticRoutes:
                - destination:
                    address: 192.168.2.0
                    prefixLength: 24
                  nextHop: 192.168.1.1
                  metric: 10
                  description: Route to Branch Office
                bgp:
                  asNumber: 65001
                  routerId: 192.168.1.1
                  neighbors:
                  - address: 192.168.1.2
                    remoteAs: 65002
                    description: Peer with ISP
                    timers:
                      keepalive: 30
                      holdTime: 90
                ospf:
                  processId: 1
                  routerId: 192.168.1.1
                  areas:
                  - areaId: 0.0.0.0
                    type: normal
                    interfaces:
                    - eth1
                    - eth2
              schema:
                $ref: '#/components/schemas/RoutingConfig'
          description: Routing configuration details
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get Routing Configuration
      tags:
      - config
    put:
      description: Update device routing configuration including static routes and
        routing protocols
      operationId: putRoutingConfig
      parameters:
      - description: ETag for optimistic concurrency control
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              staticRoutes:
              - destination:
                  address: 192.168.100.0
                  prefixLength: 24
                nextHop: 10.0.0.1
                metric: 100
                interface:
                  name: eth1
                  enabled: true
                adminDistance: 1
                description: Updated route to internal network
                bfd:
                  enabled: true
                  minTx: 300
                  minRx: 300
                  multiplier: 3
              bgp:
                asNumber: 65000
                routerId: 192.168.1.1
                neighbors:
                - address: 192.168.2.1
                  remoteAs: 65001
                  description: Updated peer with ISP
                  timers:
                    keepalive: 30
                    holdTime: 90
            schema:
              $ref: '#/components/schemas/RoutingConfig'
        description: Routing configuration details
        required: true
      responses:
        "200":
          description: Request Successful
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Update Routing Configuration
      tags:
      - config
  /config/routing/all:
    get:
      operationId: getAllRoutingConfigs
      responses:
        "200":
          content:
            application/json:
              example:
              - staticRoutes:
                - destination:
                    address: 192.168.2.0
                    prefixLength: 24
                  nextHop: 192.168.1.1
                  metric: 10
                  description: Route to Branch Office
                bgp:
                  asNumber: 65001
                  routerId: 192.168.1.1
                  neighbors:
                  - address: 192.168.1.2
                    remoteAs: 65002
                    description: Peer with ISP
              schema:
                items:
                  $ref: '#/components/schemas/RoutingConfig'
                type: array
          description: List of all routing configurations retrieved successfully.
        "400":
          description: Bad Request - Invalid query parameters.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - No routing configurations found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get all routing configurations
      tags:
      - routing
  /config/routing/{deviceId}:
    get:
      operationId: getDeviceRoutingConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingConfig'
          description: Complete routing configuration
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get complete routing configuration for a device
      tags:
      - routing
    put:
      operationId: updateDeviceRoutingConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingConfig'
          description: Routing configuration updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Update complete routing configuration for a device
      tags:
      - routing
  /config/routing/{deviceId}/bgp:
    get:
      operationId: getBGPConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                asNumber: 65000
                routerId: 192.168.1.1
                neighbors:
                - address: 192.168.2.1
                  remoteAs: 65001
                  description: Peer with ISP
                  timers:
                    keepalive: 30
                    holdTime: 90
              schema:
                $ref: '#/components/schemas/bgp'
          description: BGP configuration
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get BGP configuration
      tags:
      - routing
    put:
      operationId: updateBGPConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              asNumber: 65000
              routerId: 192.168.1.1
              neighbors:
              - address: 192.168.2.1
                remoteAs: 65001
                description: Updated peer with ISP
                timers:
                  keepalive: 60
                  holdTime: 180
              - address: 192.168.3.1
                remoteAs: 65002
                description: New peer with backup ISP
                timers:
                  keepalive: 30
                  holdTime: 90
            schema:
              $ref: '#/components/schemas/bgp'
        required: true
      responses:
        "200":
          description: BGP configuration updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Update BGP configuration
      tags:
      - routing
  /config/routing/{deviceId}/bgp/neighbors:
    get:
      operationId: getBGPNeighbors
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - address: 192.168.2.1
                remoteAs: 65001
                description: Peer with ISP
                timers:
                  keepalive: 30
                  holdTime: 90
              - address: 192.168.3.1
                remoteAs: 65002
                description: Peer with backup ISP
                timers:
                  keepalive: 30
                  holdTime: 90
              schema:
                items:
                  $ref: '#/components/schemas/BGPNeighbor'
                type: array
          description: List of BGP neighbors
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get BGP neighbors
      tags:
      - routing
    post:
      operationId: addBGPNeighbor
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BGPNeighbor'
        required: true
      responses:
        "201":
          description: BGP neighbor added successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Add BGP neighbor
      tags:
      - routing
  /config/routing/{deviceId}/ospf:
    get:
      operationId: getOSPFConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                processId: 1
                routerId: 192.168.1.1
                areas:
                - areaId: 0.0.0.0
                  type: normal
                  interfaces:
                  - eth1
                  - eth2
                - areaId: 0.0.0.1
                  type: stub
                  interfaces:
                  - eth3
              schema:
                $ref: '#/components/schemas/ospf'
          description: OSPF configuration
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get OSPF configuration
      tags:
      - routing
    put:
      operationId: updateOSPFConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              processId: 1
              routerId: 192.168.1.1
              areas:
              - areaId: 0.0.0.0
                type: normal
                interfaces:
                - eth1
                - eth2
                - eth4
              - areaId: 0.0.0.1
                type: totally-stub
                interfaces:
                - eth3
            schema:
              $ref: '#/components/schemas/ospf'
        required: true
      responses:
        "200":
          description: OSPF configuration updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Update OSPF configuration
      tags:
      - routing
  /config/routing/{deviceId}/static:
    get:
      operationId: getStaticRoutes
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - destination:
                  address: 192.168.100.0
                  prefixLength: 24
                nextHop: 10.0.0.1
                metric: 100
                interface:
                  name: eth1
                  enabled: true
                adminDistance: 1
                description: Route to internal network
              - destination:
                  address: 172.16.0.0
                  prefixLength: 16
                nextHop: 10.0.0.2
                metric: 200
                interface:
                  name: eth2
                  enabled: true
                adminDistance: 1
                description: Route to branch office
              schema:
                items:
                  $ref: '#/components/schemas/RouteEntry'
                type: array
          description: List of static routes
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Get static routes
      tags:
      - routing
    post:
      operationId: addStaticRoute
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteEntry'
        required: true
      responses:
        "201":
          description: Static route added successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Add static route
      tags:
      - routing
  /config/routing/{deviceId}/validate:
    post:
      operationId: validateRoutingConfig
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateRoutingConfig_200_response'
          description: Configuration validation result
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - configAuth: []
      summary: Validate routing configuration
      tags:
      - routing
  /config/routing/routes/device/{routeId}:
    delete:
      operationId: deleteRouteConfig
      parameters:
      - explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Route configuration deleted successfully.
        "400":
          description: Bad Request - Invalid route ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Route configuration not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Delete route configuration
      tags:
      - routing
    get:
      operationId: getRouteConfig
      parameters:
      - explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteEntry'
          description: Route configuration retrieved successfully.
        "400":
          description: Bad Request - Invalid route ID format.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Route configuration not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Get specific route configuration
      tags:
      - routing
    put:
      operationId: updateRouteConfig
      parameters:
      - explode: false
        in: path
        name: routeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteEntry'
        required: true
      responses:
        "200":
          description: Route configuration updated successfully.
        "400":
          description: Bad Request - Invalid input data.
        "401":
          description: Unauthorized - Invalid API key.
        "403":
          description: Forbidden - Insufficient permissions.
        "404":
          description: Not Found - Route configuration not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
      security:
      - configAuth: []
      summary: Update route configuration
      tags:
      - routing
  /operations/state:
    get:
      operationId: getOperationalState
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalState'
          description: Operational state retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - operationsAuth: []
      summary: Get operational state
      tags:
      - operations
    post:
      operationId: queryDeviceState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateQueryMessage'
        description: State query parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateQueryResponseMessage'
          description: State query response
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "500":
          description: Internal Server Error
      security:
      - operationsAuth: []
      summary: Query Device State
      tags:
      - operations
  /operations/state/{deviceId}:
    get:
      operationId: getDeviceOperationalState
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceOperationalState'
          description: Device operational state retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - operationsAuth: []
      summary: Get device operational state
      tags:
      - operations
    post:
      operationId: querySpecificDeviceState
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateQueryMessage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateQueryResponseMessage'
          description: Device state query response
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - operationsAuth: []
      summary: Query specific device state
      tags:
      - operations
  /operations/state/{deviceId}/interfaces:
    get:
      operationId: getDeviceInterfaceStates
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InterfaceOperationalState'
                type: array
          description: Device interface states retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - operationsAuth: []
      summary: Get device interface states
      tags:
      - operations
  /operations/state/{deviceId}/tables:
    get:
      operationId: getTableEntries
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: table
        required: true
        schema:
          enum:
          - arp
          - mac
          - route
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateQueryResponseMessage'
          description: Table entries information
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - operationsAuth: []
      summary: Get table entries
      tags:
      - operations
  /operations/state/{deviceId}/reboot:
    post:
      operationId: rebootDevice
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RebootCommandMessage'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Reboot command accepted
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - operationsAuth: []
      summary: Reboot device
      tags:
      - operations
  /telemetry/interface_stats:
    post:
      description: "Reports detailed interface statistics including counters, errors,\
        \ and performance metrics. Used for monitoring interface health and traffic\
        \ patterns."
      operationId: reportInterfaceStats
      requestBody:
        content:
          application/json:
            example:
              type: INTERFACE_STATS
              timestamp: 2024-01-01T00:00:00Z
              device:
                deviceId: switch-01
                deviceRoles:
                - Switch
              interfaceStats:
                eth0:
                  name: eth0
                  isUp: true
                  enabled: true
                  speed: 1Gbps
                  counters:
                    rxBytes: 1000000
                    txBytes: 2000000
                    rxErrors: 0
                    txErrors: 0
              schemaVersion: "1.0"
            schema:
              $ref: '#/components/schemas/InterfaceStatsMessage'
        description: Interface statistics data
        required: true
      responses:
        "200":
          description: Request Successful
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Report Interface Statistics
      tags:
      - telemetry
  /telemetry/stats:
    get:
      operationId: getInterfaceStats
      parameters:
      - description: Filter statistics by device ID
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by interface name (optional)
        explode: true
        in: query
        name: interface
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - name: eth0
                description: Primary network interface
                type: ethernet
                macAddress: 00:11:22:33:44:55
                ipv4Address: 192.168.1.1
                ipv4Subnet: 255.255.255.0
                mtu: 1500
                enabled: true
                operStatus: up
                adminStatus: up
                vlanIds:
                - 100
                - 200
                lastFlapped: 1609459200
                counters:
                  rxBytes: 1000000
                  rxPackets: 10000
                  rxErrors: 0
                  txBytes: 2000000
                  txPackets: 20000
                  txErrors: 0
                  multicast: 500
                  broadcast: 200
              - name: eth1
                description: Secondary network interface
                type: ethernet
                macAddress: 00:11:22:33:44:56
                ipv4Address: 192.168.2.1
                ipv4Subnet: 255.255.255.0
                mtu: 1500
                enabled: true
                operStatus: up
                adminStatus: up
                vlanIds:
                - 300
                - 400
                lastFlapped: 1609459200
                counters:
                  rxBytes: 500000
                  rxPackets: 5000
                  rxErrors: 0
                  txBytes: 1000000
                  txPackets: 10000
                  txErrors: 0
                  multicast: 200
                  broadcast: 100
              schema:
                items:
                  $ref: '#/components/schemas/InterfaceStats'
                type: array
          description: Statistics retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - No statistics found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get interface statistics
      tags:
      - telemetry
  /telemetry/stats/bulk:
    post:
      operationId: getBulkStats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getBulkStats_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/InterfaceStats'
                type: object
          description: Bulk statistics retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid request body or interface identifiers.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - One or more interfaces not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get statistics for multiple interfaces
      tags:
      - telemetry
  /telemetry/stats/{deviceId}:
    get:
      operationId: getDeviceStats
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                deviceId: switch-01
                name: Core Switch 1
                type: switch
                enabled: true
                operStatus: up
                adminStatus: up
                vlanIds:
                - 1
                - 10
                - 20
                - 30
                - 100
                lastFlapped: 1609459200
                counters:
                  rxBytes: 10000000
                  rxPackets: 100000
                  rxErrors: 5
                  rxDropped: 10
                  txBytes: 20000000
                  txPackets: 200000
                  txErrors: 2
                  txDropped: 0
                  multicast: 5000
                  broadcast: 2000
                qosStats:
                  queueStats:
                    queue0:
                      packets: 50000
                      bytes: 5000000
                      dropped: 0
                      queueLength: 0
                    queue1:
                      packets: 30000
                      bytes: 3000000
                      dropped: 0
                      queueLength: 0
                  dscp:
                    "0": 80000
                    "46": 20000
                errorStats:
                  crc: 2
                  fragment: 0
                  jabber: 0
                  alignment: 3
                  symbol: 0
                  unknown: 0
              schema:
                $ref: '#/components/schemas/DeviceStatistics'
          description: Device statistics retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device not found or no statistics available.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get device statistics
      tags:
      - telemetry
  /telemetry/stats/{deviceId}/interfaces:
    get:
      operationId: getDeviceInterfaceStats
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - description: Specific interface name (optional)
        explode: true
        in: query
        name: interface
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InterfaceStats'
                type: array
          description: Interface statistics retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device not found or no interface statistics available.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get interface statistics for device
      tags:
      - telemetry
  /telemetry/stats/{deviceId}/interfaces/{interfaceId}/counters:
    delete:
      operationId: clearInterfaceCounters
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Interface counters cleared successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID or interface ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device or interface not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Clear interface counters
      tags:
      - telemetry
    get:
      operationId: getInterfaceCounters
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceCounters'
          description: Interface counters retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID or interface ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device or interface not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get interface counters
      tags:
      - telemetry
    post:
      operationId: updateInterfaceCounters
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceCounters'
        description: Counter data to update
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceCounters'
          description: Interface counters updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid counter data or format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device or interface not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Update interface counters
      tags:
      - telemetry
  /telemetry/stats/{deviceId}/interfaces/{interfaceId}/errors:
    get:
      operationId: getErrorStats
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStats'
          description: Error statistics retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID or interface ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device or interface not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get interface error statistics
      tags:
      - telemetry
  /telemetry/stats/{deviceId}/interfaces/{interfaceId}/qos:
    get:
      operationId: getQoSStats
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QoSStats'
          description: QoS statistics retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID or interface ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device or interface not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get QoS statistics
      tags:
      - telemetry
  /telemetry/meters:
    get:
      operationId: getMeterStats
      parameters:
      - description: Filter by device ID (optional)
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by meter ID (optional)
        explode: true
        in: query
        name: meterId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MeterStats'
                type: array
          description: Meter statistics retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - No meter statistics found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - telemetryAuth: []
      summary: Get meter statistics
      tags:
      - telemetry
  /telemetry/metrics:
    get:
      description: Retrieves telemetry metrics data from devices
      operationId: getTelemetryMetrics
      responses:
        "200":
          content:
            application/json:
              example:
              - name: cpu_utilization
                value: 45.2
                unit: percent
                timestamp: 2024-01-01T12:00:00Z
              - name: memory_usage
                value: 3.8
                unit: GB
                timestamp: 2024-01-01T12:00:00Z
              - name: temperature
                value: 38.5
                unit: celsius
                timestamp: 2024-01-01T12:00:00Z
              schema:
                items:
                  $ref: '#/components/schemas/MetricData'
                type: array
          description: Metrics retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Get Telemetry Metrics
      tags:
      - telemetry
    post:
      description: "Reports device telemetry metrics including resource utilization,\
        \ environmental data, and performance metrics. This endpoint is used for periodic\
        \ reporting of device health and performance data."
      operationId: reportTelemetryMetrics
      requestBody:
        content:
          application/json:
            example:
              type: TELEMETRY
              timestamp: 2024-01-01T00:00:00Z
              device:
                deviceId: switch-01
                deviceRoles:
                - Switch
              metrics:
                packetCount: 1000000
                errorCount: 0
                deviceSpecificMetrics:
                  resources:
                    cpu:
                      usage: 45.5
                      temperature: 35.6
                    memory:
                      total: 16384
                      used: 8192
                      free: 8192
                  environmental:
                    temperature:
                      ambient: 25.5
                    power:
                      consumption: 120.5
                timestamp: 2024-01-01T00:00:00Z
                interval: 30
                sequence: 1
              schemaVersion: "1.0"
            schema:
              $ref: '#/components/schemas/TelemetryMessage'
        description: Telemetry metrics data
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                type: TELEMETRY
                timestamp: 2024-01-01T00:00:00Z
                device:
                  deviceId: switch-01
                  deviceRoles:
                  - Switch
                metrics:
                  packetCount: 1000000
                  errorCount: 0
                  deviceSpecificMetrics:
                    resources:
                      cpu:
                        usage: 45.5
                        temperature: 35.6
                      memory:
                        total: 16384
                        used: 8192
                        free: 8192
                    environmental:
                      temperature:
                        ambient: 25.5
                      power:
                        consumption: 120.5
                  timestamp: 2024-01-01T00:00:00Z
                  interval: 30
                  sequence: 1
                schemaVersion: "1.0"
              schema:
                $ref: '#/components/schemas/TelemetryMessage'
          description: Telemetry metrics received successfully
          headers:
            Cache-Control:
              example: max-age=300
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Report Telemetry Metrics
      tags:
      - telemetry
  /telemetry/metrics/bulk:
    post:
      operationId: getBulkMetrics
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getBulkMetrics_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/DeviceMetrics'
                type: object
          description: Bulk metrics retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Get metrics for multiple devices
      tags:
      - telemetry
  /telemetry/metrics/{deviceId}:
    get:
      operationId: getDeviceMetrics
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - description: Type of metrics to retrieve
        explode: true
        in: query
        name: type
        required: false
        schema:
          default: all
          enum:
          - resource
          - environmental
          - all
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceMetrics'
          description: Device metrics retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Get device metrics
      tags:
      - telemetry
  /telemetry/metrics/{deviceId}/environmental:
    get:
      operationId: getEnvironmentalMetrics
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalMetrics'
          description: Environmental metrics retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Get environmental metrics
      tags:
      - telemetry
  /telemetry/metrics/{deviceId}/resources:
    get:
      operationId: getResourceMetrics
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMetrics'
          description: Resource metrics retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Get resource metrics
      tags:
      - telemetry
  /telemetry/metrics/{deviceId}/thresholds:
    get:
      operationId: getMetricThresholds
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricThresholds'
          description: Metric thresholds retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Get metric thresholds
      tags:
      - telemetry
    put:
      operationId: updateMetricThresholds
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateMetricThresholds_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Thresholds updated successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - telemetryAuth: []
      summary: Update metric thresholds
      tags:
      - telemetry
  /pipeline/flows:
    get:
      description: Retrieves all flow entries across all devices and tables
      operationId: getFlows
      parameters:
      - description: Optional filter by device ID
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          type: string
        style: form
      - description: Optional filter by table ID
        explode: true
        in: query
        name: tableId
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - type: FLOW_ENTRY
                timestamp: 2024-01-01T00:00:00Z
                deviceId: switch-01
                tableId: 0
                priority: 100
                match:
                  in_port: 1
                  eth_type: 2048
                  ip_proto: 6
                  ipv4_dst: 192.168.1.100
                actions:
                  action: forward
                  output_port: 2
                packetCounter: 1250
                byteCounter: 125000
              - type: FLOW_ENTRY
                timestamp: 2024-01-01T00:00:00Z
                deviceId: switch-02
                tableId: 1
                priority: 90
                match:
                  in_port: 1
                  eth_type: 34525
                  ipv6_dst: 2001:db8::1
                actions:
                  action: forward
                  output_port: 3
                packetCounter: 500
                byteCounter: 45000
              schema:
                items:
                  $ref: '#/components/schemas/FlowEntry'
                type: array
          description: Flow entries retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - coreAuth: []
      summary: Get all flow entries
      tags:
      - pipeline
    post:
      description: Creates a new flow entry in the specified table
      operationId: createFlow
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: FLOW_ENTRY
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: 1.0.0
              requestId: req-12345
              deviceId: switch-01
              tableId: 0
              priority: 110
              match:
                in_port: 1
                eth_type: 2048
                ip_proto: 17
                ipv4_dst: 192.168.1.200
                udp_dst: 53
              actions:
                action: forward
                output_port: 5
            schema:
              $ref: '#/components/schemas/createFlow_request'
        description: Flow entry to create
        required: true
      responses:
        "201":
          content:
            application/json:
              example:
                type: FLOW_ENTRY
                timestamp: 2024-01-01T00:00:00Z
                deviceId: switch-01
                tableId: 0
                priority: 110
                match:
                  in_port: 1
                  eth_type: 2048
                  ip_proto: 17
                  ipv4_dst: 192.168.1.200
                  udp_dst: 53
                actions:
                  action: forward
                  output_port: 5
                packetCounter: 0
                byteCounter: 0
              schema:
                $ref: '#/components/schemas/FlowEntry'
          description: Flow entry created successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
        "500":
          description: Internal Server Error
      security:
      - coreAuth: []
      summary: Create a new flow entry
      tags:
      - pipeline
  /config/pipeline/flows:
    get:
      description: Retrieves flow entries from pipeline match-action tables
      operationId: getFlowEntries
      parameters:
      - description: ID of the device
        explode: true
        in: query
        name: deviceId
        required: true
        schema:
          type: string
        style: form
      - description: ID of the match-action table
        explode: true
        in: query
        name: tableId
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - type: FLOW_ENTRY
                timestamp: 2024-01-01T00:00:00Z
                deviceId: switch-01
                tableId: 0
                priority: 100
                match:
                  in_port: 1
                  eth_type: 2048
                  ip_proto: 6
                  ipv4_dst: 192.168.1.100
                actions:
                  action: forward
                  output_port: 2
                packetCounter: 1250
                byteCounter: 125000
              - type: FLOW_ENTRY
                timestamp: 2024-01-01T00:00:00Z
                deviceId: switch-01
                tableId: 0
                priority: 90
                match:
                  in_port: 1
                  eth_type: 2048
                actions:
                  action: forward
                  output_port: 3
                packetCounter: 500
                byteCounter: 45000
              schema:
                items:
                  $ref: '#/components/schemas/FlowEntry'
                type: array
          description: Flow entries retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "404":
          description: Resource Not Found
      security:
      - coreAuth: []
      summary: Get Flow Entries
      tags:
      - pipeline
    post:
      description: Updates flow entries in the pipeline match-action tables
      operationId: updateFlowEntries
      requestBody:
        content:
          application/json:
            example:
              type: FLOW_ENTRY
              timestamp: 2024-01-01T00:00:00Z
              deviceId: switch-01
              tableId: 0
              priority: 100
              match:
                in_port: 1
                eth_type: 2048
                ip_proto: 6
                ipv4_dst: 192.168.1.100
              actions:
                action: forward
                output_port: 4
            schema:
              $ref: '#/components/schemas/FlowEntry'
        description: Flow entries to update
        required: true
      responses:
        "200":
          description: Request Successful
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "409":
          description: Business Rule Conflict
      security:
      - coreAuth: []
      summary: Update Flow Entries
      tags:
      - pipeline
  /config/pipeline/tables:
    get:
      operationId: getMatchActionTables
      parameters:
      - description: ID of the device
        explode: true
        in: query
        name: deviceId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - type: MATCH_ACTION_TABLE
                timestamp: 2024-01-01T00:00:00Z
                deviceId: switch-01
                tableId: 0
                name: Port ACL Table
                nextTableId: 1
                flowEntries: []
              schema:
                items:
                  $ref: '#/components/schemas/MatchActionTable'
                type: array
          description: List of match-action tables
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "404":
          description: Resource Not Found
      security:
      - coreAuth: []
      summary: Get Match-Action Tables
      tags:
      - pipeline
    post:
      operationId: createMatchActionTable
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: MATCH_ACTION_TABLE
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: 1.0.0
              requestId: req-12345
              deviceId: switch-01
              tableId: 2
              name: New ACL Table
              nextTableId: 3
              flowEntries: []
            schema:
              $ref: '#/components/schemas/createMatchActionTable_request'
        description: Match-action table to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchActionTable'
          description: Match-action table created successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
      security:
      - coreAuth: []
      summary: Create Match-Action Table
      tags:
      - pipeline
  /config/pipeline:
    get:
      operationId: getPipelineConfig
      parameters:
      - explode: true
        in: query
        name: deviceId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                type: PIPELINE_CONFIG
                timestamp: 2024-01-01T00:00:00Z
                switchId: switch-01
                tables:
                - type: MATCH_ACTION_TABLE
                  timestamp: 2024-01-01T00:00:00Z
                  schemaVersion: 1.0.0
                  deviceId: switch-01
                  tableId: 0
                  name: Port ACL Table
                  nextTableId: 1
                  flowEntries: []
                - type: MATCH_ACTION_TABLE
                  timestamp: 2024-01-01T00:00:00Z
                  schemaVersion: 1.0.0
                  deviceId: switch-01
                  tableId: 1
                  name: VLAN Table
                  nextTableId: 2
                  flowEntries: []
                vlans:
                - vlanId: 100
                  name: Management VLAN
                  description: VLAN for management traffic
                  ports:
                    untagged: []
                    tagged: []
                acls: []
              schema:
                $ref: '#/components/schemas/PipelineConfig'
          description: Pipeline configuration
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "404":
          description: Resource Not Found
      security:
      - coreAuth: []
      summary: Get Pipeline Configuration
      tags:
      - pipeline
    post:
      operationId: updatePipelineConfig
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: PIPELINE_CONFIG
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: 1.0.0
              requestId: req-12345
              switchId: switch-01
              tables:
              - type: MATCH_ACTION_TABLE
                timestamp: 2024-01-01T00:00:00Z
                schemaVersion: 1.0.0
                deviceId: switch-01
                tableId: 0
                name: Updated Port ACL Table
                nextTableId: 1
                flowEntries: []
              vlans:
              - vlanId: 100
                name: Management VLAN
                description: VLAN for management traffic
                ports:
                  untagged: []
                  tagged: []
              acls: []
            schema:
              $ref: '#/components/schemas/updatePipelineConfig_request'
        description: Pipeline configuration to update
        required: true
      responses:
        "200":
          description: Request Successful
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
      security:
      - coreAuth: []
      summary: Update Pipeline Configuration
      tags:
      - pipeline
  /tables:
    get:
      operationId: getPipelineTables
      parameters:
      - description: Filter tables by device ID
        explode: true
        in: query
        name: deviceId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - type: MATCH_ACTION_TABLE
                timestamp: 2023-01-01T00:00:00Z
                schemaVersion: 1.0.0
                deviceId: switch-01
                tableId: 0
                name: L2 Forwarding
                nextTableId: 1
              - type: MATCH_ACTION_TABLE
                timestamp: 2023-01-01T00:00:00Z
                schemaVersion: 1.0.0
                deviceId: switch-01
                tableId: 1
                name: L3 Routing
                nextTableId: 2
              schema:
                items:
                  $ref: '#/components/schemas/MatchActionTable'
                type: array
          description: Pipeline match-action tables retrieved successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
      security:
      - coreAuth: []
      summary: Get all pipeline match-action tables
      tags:
      - pipeline
    post:
      operationId: createTable
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: MATCH_ACTION_TABLE
              timestamp: 2023-01-01T00:00:00Z
              schemaVersion: 1.0.0
              deviceId: switch-01
              tableId: 3
              name: QoS Processing
              nextTableId: 4
              requestId: req-12345
            schema:
              $ref: '#/components/schemas/createMatchActionTable_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              example:
                type: MATCH_ACTION_TABLE
                timestamp: 2023-01-01T00:00:00Z
                schemaVersion: 1.0.0
                deviceId: switch-01
                tableId: 3
                name: QoS Processing
                nextTableId: 4
                requestId: req-12345
              schema:
                $ref: '#/components/schemas/MatchActionTable'
          description: Table created successfully
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "403":
          description: Permission Check Failed
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Idempotency conflict - request with this key was already processed
        "500":
          description: Internal Server Error
      security:
      - coreAuth: []
      summary: Create a new match-action table
      tags:
      - pipeline
  /tables/{tableId}:
    get:
      operationId: getPipelineTable
      parameters:
      - description: ID of the table to retrieve
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                type: MATCH_ACTION_TABLE
                timestamp: 2024-01-01T00:00:00Z
                schemaVersion: 1.0.0
                deviceId: switch-01
                tableId: 1
                name: VLAN Table
                nextTableId: 2
                flowEntries:
                - type: FLOW_ENTRY
                  timestamp: 2024-01-01T00:00:00Z
                  deviceId: switch-01
                  tableId: 1
                  priority: 100
                  match:
                    in_port: 1
                    eth_type: 2048
                  actions:
                    action: forward
                    output_port: 2
              schema:
                $ref: '#/components/schemas/MatchActionTable'
          description: Pipeline match-action table retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid table ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Pipeline table not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get specific pipeline match-action table
      tags:
      - pipeline
    put:
      operationId: updateTable
      parameters:
      - description: ID of the table to update
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: MATCH_ACTION_TABLE
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: 1.0.0
              deviceId: switch-01
              tableId: 1
              name: Updated VLAN Table
              nextTableId: 2
              flowEntries: []
            schema:
              $ref: '#/components/schemas/MatchActionTable'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                type: MATCH_ACTION_TABLE
                timestamp: 2024-01-01T00:00:00Z
                schemaVersion: 1.0.0
                deviceId: switch-01
                tableId: 1
                name: Updated VLAN Table
                nextTableId: 2
                flowEntries: []
              schema:
                $ref: '#/components/schemas/MatchActionTable'
          description: Table updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid table configuration.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Table not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Update a match-action table
      tags:
      - pipeline
  /tables/{tableId}/pipeline:
    post:
      operationId: updateTablePipelineConfig
      parameters:
      - description: ID of the table to update pipeline configuration
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              type: PIPELINE_UPDATE
              timestamp: 2024-01-01T00:00:00Z
              schemaVersion: 1.0.0
              operationType: add
              flowEntries:
              - type: FLOW_ENTRY
                timestamp: 2024-01-01T00:00:00Z
                deviceId: switch-01
                tableId: 1
                priority: 100
                match:
                  in_port: 1
                  eth_type: 2048
                actions:
                  action: forward
                  output_port: 2
              applyImmediately: true
            schema:
              $ref: '#/components/schemas/PipelineUpdateMessage'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                type: PIPELINE_CONFIG
                timestamp: 2024-01-01T00:00:00Z
                switchId: switch-01
                tables:
                - type: MATCH_ACTION_TABLE
                  timestamp: 2024-01-01T00:00:00Z
                  schemaVersion: 1.0.0
                  deviceId: switch-01
                  tableId: 1
                  name: VLAN Table
                  nextTableId: 2
                  flowEntries:
                  - type: FLOW_ENTRY
                    timestamp: 2024-01-01T00:00:00Z
                    deviceId: switch-01
                    tableId: 1
                    priority: 100
                    match:
                      in_port: 1
                      eth_type: 2048
                    actions:
                      action: forward
                      output_port: 2
                vlans:
                - vlanId: 100
                  name: Management VLAN
                  description: VLAN for management traffic
                  ports:
                    untagged: []
                    tagged: []
                acls: []
              schema:
                $ref: '#/components/schemas/PipelineConfig'
          description: Pipeline configuration updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid pipeline configuration.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Table not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Update pipeline configuration for a table
      tags:
      - pipeline
  /security/devices/{deviceId}/roles:
    get:
      operationId: getDeviceRoles
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleUpdateMessage'
          description: Device roles
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get device roles
      tags:
      - security
    put:
      operationId: updateDeviceRoles
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDeviceRoles_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Device roles updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID or role configuration.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device not found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Conflict - Idempotency conflict.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Update device roles
      tags:
      - security
  /security/roles:
    get:
      operationId: getRoles
      responses:
        "200":
          content:
            application/json:
              example:
              - name: admin
                permissions:
                - read:devices
                - write:devices
                - read:config
                - write:config
                - read:security
                - write:security
              - name: operator
                permissions:
                - read:devices
                - read:config
                - write:config:limited
              - name: viewer
                permissions:
                - read:devices
                - read:config
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Roles retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid query parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - No roles found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get all roles
      tags:
      - security
    post:
      operationId: createRole
      parameters:
      - description: Unique key for idempotent request handling
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: simple
      - description: Client-side timestamp for request ordering (RFC3339 format)
        explode: false
        in: header
        name: X-Client-Timestamp
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDeviceRoles_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Role created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid role configuration.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdempotencyConflictError'
          description: Conflict - Role already exists.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Create a new role
      tags:
      - security
  /security/roles/{roleName}:
    delete:
      operationId: deleteRole
      parameters:
      - explode: false
        in: path
        name: roleName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Role deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid role ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions or role in use.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Role not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Delete role
      tags:
      - security
    get:
      operationId: getRole
      parameters:
      - explode: false
        in: path
        name: roleName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Role retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid role ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Role not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Get role details
      tags:
      - security
    put:
      operationId: updateRole
      parameters:
      - explode: false
        in: path
        name: roleName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Role updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid role configuration.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Role not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      security:
      - coreAuth: []
      summary: Update role
      tags:
      - security
  /devices:
    get:
      operationId: getDevices
      parameters:
      - description: Filter devices by role
        example: Switch
        explode: true
        in: query
        name: role
        required: false
        schema:
          $ref: '#/components/schemas/DeviceRoleEnum'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - deviceId: switch-01
                hostname: core-switch-01
                managementIp: 192.168.1.10
                macAddress: 00:11:22:33:44:55
                deviceRoles:
                - Switch
              - deviceId: router-01
                hostname: edge-router-01
                managementIp: 192.168.1.1
                macAddress: 00:11:22:33:44:66
                deviceRoles:
                - Router
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: List of devices
        "400":
          description: Data Validation Failed
        "401":
          description: User Not Authenticated
        "500":
          description: Internal Server Error
      summary: Get list of devices by role
      tags:
      - core
    post:
      operationId: registerDevice
      requestBody:
        content:
          application/json:
            example:
              deviceId: switch-03
              hostname: access-switch-03
              managementIp: 192.168.1.13
              macAddress: 00:11:22:33:44:77
              deviceRoles:
              - Switch
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Device registered successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Conflict - Device already exists.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      summary: Register a new device
      tags:
      - core
  /devices/{deviceId}:
    get:
      operationId: getDevice
      parameters:
      - example: switch-01
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                deviceId: switch-01
                hostname: core-switch-01
                managementIp: 192.168.1.10
                macAddress: 00:11:22:33:44:55
                deviceRoles:
                - Switch
              schema:
                $ref: '#/components/schemas/Device'
          description: Device details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Bad Request - Invalid device ID format.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Unauthorized - Invalid API key.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Forbidden - Insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Not Found - Device not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: Internal Server Error - An unexpected error occurred.
      summary: Get device details
      tags:
      - core
components:
  headers:
    ETag:
      description: Entity tag for version tracking
      explode: false
      schema:
        type: string
      style: simple
    RateLimit-Limit:
      description: Request limit per minute
      explode: false
      schema:
        type: integer
      style: simple
    RateLimit-Remaining:
      description: Number of requests remaining in the current rate limit window
      explode: false
      schema:
        type: integer
      style: simple
  parameters:
    If-Match:
      description: ETag for optimistic concurrency control
      explode: false
      in: header
      name: If-Match
      required: false
      schema:
        type: string
      style: simple
    pageSize:
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        maximum: 100
        type: integer
      style: form
    IdempotencyKey:
      description: Unique key for idempotent request handling
      explode: false
      in: header
      name: Idempotency-Key
      required: true
      schema:
        example: 123e4567-e89b-12d3-a456-426614174000
        format: uuid
        type: string
      style: simple
    ClientTimestamp:
      description: Client-side timestamp for request ordering (RFC3339 format)
      explode: false
      in: header
      name: X-Client-Timestamp
      required: true
      schema:
        type: string
      style: simple
  responses:
    "200":
      $ref: '#/components/responses/SuccessResponse'
    "201":
      $ref: '#/components/responses/CreatedSuccessResponse'
    "400":
      $ref: '#/components/responses/DataValidationFailedResponse'
    "401":
      $ref: '#/components/responses/UserNotAuthenticatedResponse'
    "403":
      $ref: '#/components/responses/PermissionCheckFailedResponse'
    "404":
      $ref: '#/components/responses/ResourceNotFoundResponse'
    "405":
      $ref: '#/components/responses/MethodNotSupportedResponse'
    "409":
      $ref: '#/components/responses/BusinessRuleConflictResponse'
    "415":
      $ref: '#/components/responses/UnsupportedDataRequestFormatResponse'
    "500":
      $ref: '#/components/responses/InternalServerErrorResponse'
    SuccessResponse:
      description: Request Successful
    CreatedSuccessResponse:
      description: Created Successfully
    DataValidationFailedResponse:
      description: Data Validation Failed
    UserNotAuthenticatedResponse:
      description: User Not Authenticated
    PermissionCheckFailedResponse:
      description: Permission Check Failed
    ResourceNotFoundResponse:
      description: Resource Not Found
    MethodNotSupportedResponse:
      description: Method Not Supported
    BusinessRuleConflictResponse:
      description: Business Rule Conflict
    UnsupportedDataRequestFormatResponse:
      description: Unsupported Data Request Format
    InternalServerErrorResponse:
      description: Internal Server Error
  schemas:
    HealthStatusMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - HEALTH_STATUS
            example: HEALTH_STATUS
            type: string
          status:
            $ref: '#/components/schemas/Status'
          uptime:
            example: P30DT10H
            format: duration
            type: string
          lastChecked:
            $ref: '#/components/schemas/Timestamp'
          components:
            $ref: '#/components/schemas/HealthStatusMessage_allOf_components'
          metrics:
            $ref: '#/components/schemas/HealthStatusMessage_allOf_metrics'
        required:
        - lastChecked
        - status
      example:
        type: HEALTH_STATUS
        timestamp: 2023-10-01T12:00:00Z
        schemaVersion: "1.0"
        status:
          type: STATUS
          timestamp: 2023-10-01T12:00:00Z
          state: healthy
        uptime: P30DT10H
        lastChecked: 2023-10-01T11:55:00Z
        components:
          database: healthy
          api: healthy
          telemetry: healthy
        metrics:
          activeConnections: 42
          cpuUsage: 25.5
          memoryUsage: 60.2
    HelloMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          messageType:
            enum:
            - HELLO
            type: string
          device:
            $ref: '#/components/schemas/Device'
          message:
            description: Optional greeting or additional information.
            type: string
        required:
        - device
        type: object
      example:
        schemaVersion: "1.0"
        messageType: HELLO
        type: EVENT_NOTIFICATION
        message: message
        device:
          deviceId: switch-01
          hostname: core-switch-01
          managementIp: 192.168.1.10
          macAddress: 00:11:22:33:44:55
          deviceRoles:
          - Switch
        timestamp: 2023-10-01T12:00:00Z
    ErrorMessage:
      example:
        code: 400
        message: Invalid request parameters
        details:
          field: deviceId
          reason: Required field missing
      properties:
        code:
          description: Error code
          example: 400
          type: integer
        message:
          description: Error message
          example: Invalid request parameters
          type: string
        details:
          additionalProperties: true
          description: Additional error details
          example:
            field: deviceId
            reason: Required field missing
          type: object
      required:
      - code
      - message
      type: object
    BaseErrorResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - properties:
          error:
            $ref: '#/components/schemas/ErrorMessage'
          errors:
            example:
            - code: INVALID_REQUEST
              target: deviceId
              message: Required field missing
            items:
              $ref: '#/components/schemas/ErrorDetail'
            type: array
        required:
        - error
        type: object
      example:
        type: RESPONSE
        timestamp: 2023-10-01T12:00:00Z
        schemaVersion: "1.0"
        status: error
        requestId: 123e4567-e89b-12d3-a456-426614174000
        error:
          code: 400
          message: Invalid request parameters
        errors:
        - code: INVALID_REQUEST
          target: deviceId
          message: Required field missing
    BaseResponse:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          status:
            description: Response status
            enum:
            - success
            - error
            - pending
            example: success
            type: string
          requestId:
            description: Original request ID
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        required:
        - status
        type: object
      example:
        type: RESPONSE
        timestamp: 2023-10-01T12:00:00Z
        schemaVersion: "1.0"
        status: success
        requestId: 123e4567-e89b-12d3-a456-426614174000
    ResponseMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - RESPONSE
            example: RESPONSE
            type: string
          status:
            enum:
            - success
            - failure
            example: success
            type: string
          message:
            description: Optional details about the response.
            example: Operation completed successfully
            type: string
        required:
        - status
        type: object
      example:
        type: RESPONSE
        timestamp: 2023-10-01T12:00:00Z
        schemaVersion: "1.0"
        status: success
        message: Operation completed successfully
    EventNotificationMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          eventType:
            description: Type of event notification
            enum:
            - CONFIG_CHANGE
            - STATE_CHANGE
            - ALARM
            - THRESHOLD_BREACH
            - SECURITY_EVENT
            example: CONFIG_CHANGE
            type: string
          severity:
            description: Event severity level
            enum:
            - info
            - warning
            - error
            - critical
            example: info
            type: string
          source:
            $ref: '#/components/schemas/EventNotificationMessage_allOf_source'
          description:
            description: Event description
            example: Interface eth0 configuration changed
            type: string
          data:
            additionalProperties: true
            description: Event-specific data
            example:
              interface: eth0
              changes:
              - speed
              - mtu
            type: object
        required:
        - description
        - eventType
        - severity
        - source
        type: object
      example:
        type: EVENT_NOTIFICATION
        timestamp: 2023-10-01T12:00:00Z
        schemaVersion: "1.0"
        eventType: CONFIG_CHANGE
        severity: info
        source:
          deviceId: switch-01
          component: interface
        description: Interface eth0 configuration changed
        data:
          interface: eth0
          changes:
          - speed
          - mtu
    DeviceRoleEnum:
      enum:
      - Switch
      - Router
      - L2 Switch
      - Firewall
      - Wireless Access Point
      - VoIP
      - Load Balancer
      - VPN Gateway
      - UTM
      - PDU
      example: Switch
      type: string
    BaseMessage:
      example:
        type: EVENT_NOTIFICATION
        timestamp: 2023-10-01T12:00:00Z
        schemaVersion: "1.0"
      properties:
        type:
          description: Message type identifier
          example: EVENT_NOTIFICATION
          type: string
        timestamp:
          description: ISO 8601 formatted timestamp with timezone
          example: 2023-10-01T12:00:00Z
          format: date-time
          type: string
          x-go-type: string
        schemaVersion:
          description: Schema version
          example: "1.0"
          type: string
      required:
      - schemaVersion
      - timestamp
      - type
      type: object
    IPAddress:
      description: Represents either an IPv4 or IPv6 address
      example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
        }}"
      format: ip
      type: string
    IPAddressWithPrefix:
      description: IP address with network prefix length (CIDR notation)
      example:
        ipv4:
          value:
            address: 192.168.1.0
            prefixLength: 24
        ipv6:
          value:
            address: '2001:db8::'
            prefixLength: 64
      properties:
        address:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        prefixLength:
          description: "Network prefix length (0-32 for IPv4, 0-128 for IPv6)"
          example: 24
          maximum: 128
          minimum: 0
          type: integer
      required:
      - address
      - prefixLength
      type: object
    MACAddress:
      description: MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
      example: 00:1A:2B:3C:4D:5E
      pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
      type: string
    Timestamp:
      description: ISO 8601 formatted timestamp with timezone
      example: 2023-10-01T12:00:00Z
      format: date-time
      type: string
      x-go-type: string
    CapabilityRequestMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - CAPABILITY_REQUEST
            type: string
          requestedCapabilities:
            items:
              type: string
            type: array
          detail:
            enum:
            - basic
            - detailed
            - full
            type: string
      example:
        type: CAPABILITY_REQUEST
        timestamp: 2024-01-01T00:00:00Z
        schemaVersion: "1.0"
        requestedCapabilities:
        - routingSupport
        - firewallSupport
        - vpnSupport
        detail: detailed
    CapabilityQueryResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - properties:
          type:
            enum:
            - CAPABILITY_QUERY_RESPONSE
            type: string
          device:
            $ref: '#/components/schemas/Device'
          capabilities:
            $ref: '#/components/schemas/Capabilities'
          interfaces:
            items:
              $ref: '#/components/schemas/NetworkInterface'
            type: array
          supportedTables:
            items:
              type: string
            type: array
          extendedCapabilities:
            additionalProperties: true
            type: object
          constraints:
            $ref: '#/components/schemas/CapabilityQueryResponse_allOf_constraints'
        required:
        - capabilities
        - device
        - interfaces
      example:
        type: CAPABILITY_QUERY_RESPONSE
        timestamp: 2024-01-01T00:00:01Z
        schemaVersion: "1.0"
        status: success
        device:
          deviceId: switch-01
          hostname: core-switch-01
          deviceRoles:
          - Switch
        capabilities:
          routingSupport: true
          firewallSupport: false
          vpnSupport: false
          loadBalancing: false
          qosSupport: true
          ipv6Support: true
          mplsSupport: false
          sflowSupport: true
          netflowSupport: false
          features:
            stacking: true
            portChannels: true
          supportedProtocols:
          - lldp
          - stp
          - lacp
          hardwareCapabilities:
            tcamSize: 8192
            bufferSize: 32768
            forwardingCapacity: 400Gbps
        interfaces:
        - name: eth0
          type: ethernet
          speed: 1Gbps
          enabled: true
        supportedTables:
        - acl
        - mac
        - route
        constraints:
          maxFlowEntries: 10000
          maxTables: 8
          maxVlans: 4094
    NetworkDiscoveryMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - NETWORK_DISCOVERY
            type: string
          discoveryType:
            enum:
            - lldp
            - cdp
            - fdb
            - bgp_neighbors
            type: string
          startPoints:
            description: Starting points for discovery
            items:
              $ref: '#/components/schemas/IPAddress'
            type: array
          subnets:
            description: Subnets to discover
            items:
              $ref: '#/components/schemas/IPAddressWithPrefix'
            type: array
        required:
        - discoveryType
      example:
        type: NETWORK_DISCOVERY
        timestamp: 2024-01-01T00:00:00Z
        schemaVersion: "1.0"
        discoveryType: lldp
        startPoints:
        - 192.168.1.1
        subnets:
        - address: 192.168.1.0
          prefixLength: 24
    NetworkDiscoveryResponseMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - NETWORK_DISCOVERY_RESPONSE
            type: string
          discoveryType:
            enum:
            - lldp
            - cdp
            - fdb
            - bgp_neighbors
            type: string
          discoveredDevices:
            items:
              $ref: '#/components/schemas/DiscoveredNeighbor'
            type: array
          topology:
            $ref: '#/components/schemas/NetworkDiscoveryResponseMessage_allOf_topology'
        required:
        - discoveredDevices
        - discoveryType
      example:
        type: NETWORK_DISCOVERY_RESPONSE
        timestamp: 2024-01-01T00:00:00Z
        schemaVersion: "1.0"
        discoveryType: lldp
        discoveredDevices:
        - device:
            deviceId: switch-02
            hostname: access-switch-01
            deviceRoles:
            - Switch
          discoveryProtocol: lldp
          distance: 1
          lastSeen: 2024-01-01T00:00:00Z
          confidence: 1
          connectionDetails:
            localPort: eth1
            remotePort: eth0
            linkType: ethernet
            localAddress: 192.168.1.1
            remoteAddress: 192.168.1.2
        topology:
          links:
          - source: 192.168.1.1
            target: 192.168.1.2
            type: ethernet
    DeviceSettings:
      example:
        hostname: hostname
        snmpCommunity: snmpCommunity
        managementIp: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
          2001:db8::1\"}}"
        dnsSettings:
          servers:
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          domain: domain
          searchDomains:
          - searchDomains
          - searchDomains
        syslogServers:
        - null
        - null
        ntpServers:
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        type: DEVICE_INFO_REQUEST
        deviceId: deviceId
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        type:
          description: Type of device configuration message
          enum:
          - DEVICE_INFO_REQUEST
          - DEVICE_INFO_RESPONSE
          - DEVICE_SETTINGS_UPDATE
          type: string
        timestamp:
          description: Timestamp of the message
          format: date-time
          type: string
        deviceId:
          description: Unique identifier of the device
          type: string
        hostname:
          type: string
        managementIp:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        snmpCommunity:
          type: string
        ntpServers:
          description: List of NTP servers (can be IP addresses or FQDNs)
          items:
            $ref: '#/components/schemas/DeviceSettings_ntpServers_inner'
          type: array
        syslogServers:
          description: List of syslog servers
          items:
            $ref: '#/components/schemas/DeviceSettings_ntpServers_inner'
          type: array
        dnsSettings:
          $ref: '#/components/schemas/DeviceSettings_dnsSettings'
      required:
      - deviceId
      - hostname
      - timestamp
      - type
      type: object
    DeviceConfigUpdateMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - DEVICE_CONFIG_UPDATE
            type: string
          device:
            $ref: '#/components/schemas/Device'
          config:
            $ref: '#/components/schemas/DeviceConfigUpdateMessage_allOf_config'
          applyImmediately:
            type: boolean
        required:
        - config
        - device
      example:
        schemaVersion: "1.0"
        applyImmediately: true
        type: DEVICE_CONFIG_UPDATE
        device:
          deviceId: switch-01
          hostname: core-switch-01
          managementIp: 192.168.1.10
          macAddress: 00:11:22:33:44:55
          deviceRoles:
          - Switch
        config:
          interfaces:
            key:
              autoconfig: false
              description: Uplink to Core Switch
              type: ethernet
              enabled: true
              speed: 10Gbps
              mac: 00:1A:2B:3C:4D:5E
              mtu: 1500
              secondary:
              - address: 192.168.1.2
                prefixLength: 24
              virtualIPs:
              - address: 192.168.1.3
                prefixLength: 24
              name: eth0
              adminState: enabled
              state: up
              dhcp: false
              primary:
                ipv4:
                  value:
                    address: 192.168.1.0
                    prefixLength: 24
                ipv6:
                  value:
                    address: '2001:db8::'
                    prefixLength: 64
          deviceSettings:
            hostname: hostname
            snmpCommunity: snmpCommunity
            managementIp: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
              :\"2001:db8::1\"}}"
            dnsSettings:
              servers:
              - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
                }}"
              - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
                }}"
              domain: domain
              searchDomains:
              - searchDomains
              - searchDomains
            syslogServers:
            - null
            - null
            ntpServers:
            - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
              }}"
            - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
              }}"
            type: DEVICE_INFO_REQUEST
            deviceId: deviceId
            timestamp: 2000-01-23T04:56:07.000+00:00
        timestamp: 2023-10-01T12:00:00Z
    SwitchDevice:
      properties:
        deviceId:
          type: string
        deviceModel:
          type: string
        firmwareVersion:
          type: string
        networkInterfaces:
          items:
            $ref: '#/components/schemas/schemas-NetworkInterface'
          type: array
        deviceConfig:
          $ref: '#/components/schemas/SwitchConfiguration'
      required:
      - deviceId
      type: object
    PortConfig:
      allOf:
      - $ref: '#/components/schemas/schemas-NetworkInterface'
      - properties:
          portId:
            type: integer
          nativeVlan:
            type: integer
          aclIn:
            type: string
          maxLearnedMacs:
            type: integer
          dynamicVlan:
            type: boolean
          stormControl:
            $ref: '#/components/schemas/PortConfig_allOf_stormControl'
          portSecurity:
            $ref: '#/components/schemas/PortConfig_allOf_portSecurity'
        required:
        - portId
      example:
        portSecurity:
          maxMacAddresses: 3
          violationAction: protect
          enabled: true
        description: Uplink to Core Switch
        duplex: full
        aclIn: aclIn
        type: ethernet
        portId: 1
        enabled: true
        speed: 10Gbps
        mtu: 1500
        macAddress: 00:1A:2B:3C:4D:5E
        dynamicVlan: true
        name: eth0
        ipAddresses:
        - ipv4:
            value:
              address: 192.168.1.0
              prefixLength: 24
          ipv6:
            value:
              address: '2001:db8::'
              prefixLength: 64
        - ipv4:
            value:
              address: 192.168.1.0
              prefixLength: 24
          ipv6:
            value:
              address: '2001:db8::'
              prefixLength: 64
        maxLearnedMacs: 5
        stormControl:
          broadcast: 2
          unicast: 9
          multicast: 7
        nativeVlan: 5
    VLAN:
      example:
        interVLANRoutingVips:
        - secondary:
          - address: 192.168.1.2
            prefixLength: 24
          virtualIPs:
          - address: 192.168.1.3
            prefixLength: 24
          autoconfig: false
          dhcp: false
          primary:
            ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
        - secondary:
          - address: 192.168.1.2
            prefixLength: 24
          virtualIPs:
          - address: 192.168.1.3
            prefixLength: 24
          autoconfig: false
          dhcp: false
          primary:
            ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
        security:
          privateVlan:
            secondaryVlans:
            - 9
            - 9
            type: primary
            primaryVlan: 7
          macLimiters:
            maxMacAddresses: 3
            violationAction: protect
        qos:
          dscp: 7
          bandwidthLimit: 4
          priority: 2
        vlanId: 0
        vVLANRouterMac: vVLANRouterMac
        name: name
        description: description
        aclIn: aclIn
        ports:
          untagged:
          - name: eth0
            adminState: enabled
            description: Uplink to Core Switch
            state: up
            type: ethernet
            enabled: true
            speed: 10Gbps
            mac: 00:1A:2B:3C:4D:5E
            mtu: 1500
          - name: eth0
            adminState: enabled
            description: Uplink to Core Switch
            state: up
            type: ethernet
            enabled: true
            speed: 10Gbps
            mac: 00:1A:2B:3C:4D:5E
            mtu: 1500
          tagged:
          - name: eth0
            adminState: enabled
            description: Uplink to Core Switch
            state: up
            type: ethernet
            enabled: true
            speed: 10Gbps
            mac: 00:1A:2B:3C:4D:5E
            mtu: 1500
          - name: eth0
            adminState: enabled
            description: Uplink to Core Switch
            state: up
            type: ethernet
            enabled: true
            speed: 10Gbps
            mac: 00:1A:2B:3C:4D:5E
            mtu: 1500
        properties:
          dhcpSnooping: true
          stormControl:
            broadcast: 5
            unicast: 2
            multicast: 5
          priority: 1
          igmpSnooping: true
          mtu: 6
          arpInspection: true
        status: active
        aclOut: aclOut
      properties:
        vlanId:
          type: integer
        name:
          type: string
        description:
          type: string
        status:
          enum:
          - active
          - suspend
          type: string
        ports:
          $ref: '#/components/schemas/VLAN_ports'
        aclIn:
          description: Ingress ACL applied to VLAN
          type: string
        aclOut:
          description: Egress ACL applied to VLAN
          type: string
        vVLANRouterMac:
          description: MAC address for the VLAN's router interface
          type: string
        interVLANRoutingVips:
          items:
            $ref: '#/components/schemas/IPConfig'
          type: array
        properties:
          $ref: '#/components/schemas/VLANProperties'
        security:
          $ref: '#/components/schemas/VLANSecurity'
        qos:
          $ref: '#/components/schemas/VLAN_qos'
      required:
      - name
      - ports
      - vlanId
      type: object
    ACL:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          aclName:
            description: Name of the ACL
            example: web-traffic-acl
            type: string
          description:
            description: Human-readable description of the ACL
            example: Web traffic filtering rules
            type: string
          type:
            description: Type of ACL
            enum:
            - standard
            - extended
            - mac
            - ipv6
            example: extended
            type: string
          rules:
            description: List of rules in this ACL
            items:
              $ref: '#/components/schemas/ACLRule'
            type: array
          statistics:
            $ref: '#/components/schemas/ACL_allOf_statistics'
        required:
        - aclName
        - rules
      example:
        type: ACL_CONFIG
        timestamp: 2023-10-01T12:00:00Z
        schemaVersion: "1.0"
        aclName: web-traffic-acl
        description: Web traffic filtering rules
        aclType: extended
        rules:
        - ruleId: 1
          description: Allow HTTP traffic
          matches:
            ip_proto: 6
            tcp_dst: 80
            src_ip:
              address: 192.168.1.0
              prefixLength: 24
          actions:
            allow: true
          enabled: true
        - ruleId: 2
          description: Allow HTTPS traffic
          matches:
            ip_proto: 6
            tcp_dst: 443
            src_ip:
              address: 192.168.1.0
              prefixLength: 24
          actions:
            allow: true
          enabled: true
        statistics:
          totalHits: 5280
          lastUpdated: 2023-10-01T12:05:00Z
    RoutingConfig:
      example:
        staticRoutes:
        - nextHop: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          bfd:
            multiplier: 7
            minTx: 5
            minRx: 2
            enabled: true
          metric: 0
          destination:
            ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
          adminDistance: 6
          description: description
          tag: 1
          interface:
            name: eth0
            adminState: enabled
            description: Uplink to Core Switch
            state: up
            type: ethernet
            enabled: true
            speed: 10Gbps
            mac: 00:1A:2B:3C:4D:5E
            mtu: 1500
          track: 5
        - nextHop: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          bfd:
            multiplier: 7
            minTx: 5
            minRx: 2
            enabled: true
          metric: 0
          destination:
            ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
          adminDistance: 6
          description: description
          tag: 1
          interface:
            name: eth0
            adminState: enabled
            description: Uplink to Core Switch
            state: up
            type: ethernet
            enabled: true
            speed: 10Gbps
            mac: 00:1A:2B:3C:4D:5E
            mtu: 1500
          track: 5
        bgp:
          routerId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
            2001:db8::1\"}}"
          neighbors:
          - timers:
              keepalive: 2
              holdTime: 4
            address: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
              2001:db8::1\"}}"
            remoteAs: 3
            localAddress: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
              :\"2001:db8::1\"}}"
            description: description
          - timers:
              keepalive: 2
              holdTime: 4
            address: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
              2001:db8::1\"}}"
            remoteAs: 3
            localAddress: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
              :\"2001:db8::1\"}}"
            description: description
          asNumber: 9
        ospf:
          processId: 7
          routerId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
            2001:db8::1\"}}"
          areas:
          - interfaces:
            - interfaces
            - interfaces
            areaId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
              2001:db8::1\"}}"
            type: normal
          - interfaces:
            - interfaces
            - interfaces
            areaId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
              2001:db8::1\"}}"
            type: normal
      properties:
        staticRoutes:
          items:
            $ref: '#/components/schemas/RouteEntry'
          type: array
        bgp:
          $ref: '#/components/schemas/RoutingConfig_bgp'
        ospf:
          $ref: '#/components/schemas/RoutingConfig_ospf'
      type: object
    PipelineConfig:
      example:
        type: PIPELINE_CONFIG
        timestamp: 2024-01-01T00:00:00Z
        switchId: switch-01
        tables:
        - type: MATCH_ACTION_TABLE
          timestamp: 2024-01-01T00:00:00Z
          schemaVersion: 1.0.0
          deviceId: switch-01
          tableId: 0
          name: Port ACL Table
          nextTableId: 1
          flowEntries: []
        vlans: []
        acls: []
      properties:
        type:
          type: string
        timestamp:
          format: date-time
          type: string
        switchId:
          type: string
        tables:
          items:
            $ref: '#/components/schemas/MatchActionTable'
          type: array
        vlans:
          items:
            $ref: '#/components/schemas/VLAN'
          type: array
        acls:
          items:
            $ref: '#/components/schemas/ACL'
          type: array
      required:
      - switchId
      - tables
      type: object
    PipelineUpdateMessage:
      example:
        type: PIPELINE_UPDATE
        timestamp: 2024-01-01T00:00:00Z
        schemaVersion: 1.0.0
        operationType: add
        flowEntries:
        - type: FLOW_ENTRY
          timestamp: 2024-01-01T00:00:00Z
          deviceId: switch-01
          tableId: 0
          priority: 100
          match:
            in_port: 1
            eth_type: 2048
          actions:
            action: forward
            output_port: 2
        applyImmediately: true
      properties:
        type:
          enum:
          - PIPELINE_UPDATE
          type: string
        timestamp:
          format: date-time
          type: string
        schemaVersion:
          type: string
        pipelineConfig:
          $ref: '#/components/schemas/PipelineConfig'
        operationType:
          description: Defines the type of operation for flow rule management
          enum:
          - add
          - update
          - delete
          type: string
        flowEntries:
          description: "List of flow entries to be added, updated, or deleted"
          items:
            $ref: '#/components/schemas/FlowEntry'
          type: array
        applyImmediately:
          type: boolean
      required:
      - applyImmediately
      - flowEntries
      - operationType
      - schemaVersion
      - timestamp
      - type
      type: object
    MatchActionTable:
      example:
        type: MATCH_ACTION_TABLE
        timestamp: 2024-01-01T00:00:00Z
        schemaVersion: 1.0.0
        deviceId: switch-01
        tableId: 0
        name: Port ACL Table
        nextTableId: 1
        flowEntries: []
      properties:
        type:
          type: string
        timestamp:
          format: date-time
          type: string
        schemaVersion:
          description: Schema version
          type: string
        deviceId:
          description: Device identifier
          type: string
        tableId:
          description: Unique table identifier for this device
          minimum: 0
          type: integer
        name:
          description: Human-readable table name
          maxLength: 64
          minLength: 1
          type: string
        nextTableId:
          description: ID of the next table in the chain
          minimum: 0
          type: integer
        requestId:
          description: Request identifier for tracking
          type: string
        flowEntries:
          default: []
          items:
            $ref: '#/components/schemas/FlowEntry'
          type: array
      required:
      - deviceId
      - name
      - tableId
      type: object
    FlowEntry:
      example:
        type: FLOW_ENTRY
        timestamp: 2024-01-01T00:00:00Z
        deviceId: switch-01
        tableId: 0
        priority: 100
        match:
          in_port: 1
          eth_type: 2048
          ip_proto: 6
          ipv4_dst: 192.168.1.100
          tcp_dst: 80
        actions:
          action: forward
          output_port: 2
        packetCounter: 1250
        byteCounter: 125000
      properties:
        type:
          type: string
        timestamp:
          format: date-time
          type: string
        deviceId:
          description: Device identifier
          type: string
        tableId:
          description: Table identifier
          minimum: 0
          type: integer
        priority:
          description: "Flow entry priority, higher values take precedence"
          maximum: 65535
          minimum: 0
          type: integer
        match:
          $ref: '#/components/schemas/FlowMatch'
        actions:
          $ref: '#/components/schemas/FlowAction'
        nextTable:
          description: Identifier of the next table to evaluate if this entry matches
          type: integer
        packetCounter:
          description: Count of packets matched by this flow entry
          type: integer
        byteCounter:
          description: Total bytes matched by this flow entry
          type: integer
      required:
      - actions
      - deviceId
      - match
      - priority
      - tableId
      type: object
    TelemetryMessage:
      example:
        type: TELEMETRY
        timestamp: 2024-01-01T12:00:00Z
        schemaVersion: "1.0"
        device:
          deviceId: switch-core-01
          deviceRoles:
          - Switch
          - Core
        metrics:
          packetCount: 1250000
          errorCount: 25
          deviceSpecificMetrics:
            vlanStats:
              vlan100:
                rxPackets: 15000
                txPackets: 12500
            firewallHits: 1250
            resources:
              cpu:
                usage: 65.3
                load: 1.25
                temperature: 42.8
              memory:
                total: 16384
                used: 8192
                free: 8192
          timestamp: 2024-01-01T12:00:00Z
          interval: 300
          sequence: 42
      properties:
        type:
          enum:
          - TELEMETRY
          type: string
        timestamp:
          format: date-time
          type: string
        schemaVersion:
          description: Schema version
          type: string
        device:
          $ref: '#/components/schemas/TelemetryMessage_device'
        metrics:
          $ref: '#/components/schemas/TelemetryMessage_metrics'
      required:
      - device
      - metrics
      - timestamp
      - type
      type: object
    MeterConfig:
      properties:
        meterId:
          type: integer
        rate:
          description: Rate in kbps
          type: integer
        burst_size:
          description: Burst size in bytes
          type: integer
        action:
          description: Meter action when threshold is exceeded
          enum:
          - drop
          - remark
          - police
          type: string
      required:
      - action
      - burst_size
      - meterId
      - rate
      type: object
    InterfaceStatsMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - INTERFACE_STATS
            type: string
          device:
            $ref: '#/components/schemas/Device'
          interfaceStats:
            additionalProperties:
              $ref: '#/components/schemas/InterfaceStats'
            type: object
          collectionTimestamp:
            format: date-time
            type: string
          interval:
            description: Collection interval in seconds
            type: integer
          aggregated:
            description: Whether stats are aggregated
            type: boolean
          schemaVersion:
            description: Schema version
            type: string
        required:
        - device
        - interfaceStats
        - schemaVersion
      example:
        schemaVersion: schemaVersion
        interfaceStats:
          key:
            name: eth0
            description: Primary network interface
            type: ethernet
            macAddress: 00:11:22:33:44:55
            ipv4Address: 192.168.1.1
            ipv4Subnet: 255.255.255.0
            ipv6Address: fe80::1
            ipv6PrefixLength: 64
            mtu: 1500
            enabled: true
            operStatus: up
            adminStatus: up
            vlanIds:
            - 100
            - 200
            lastFlapped: 1609459200
            counters:
              rxBytes: 1000000
              rxPackets: 10000
              rxErrors: 0
              rxDropped: 5
              rxOverruns: 0
              rxFrame: 0
              txBytes: 2000000
              txPackets: 20000
              txErrors: 0
              txDropped: 0
              txOverruns: 0
              txCollisions: 0
              multicast: 500
              broadcast: 200
            qosStats:
              queueStats:
                queue0:
                  packets: 5000
                  bytes: 500000
                  dropped: 0
                  queueLength: 0
                queue1:
                  packets: 3000
                  bytes: 300000
                  dropped: 0
                  queueLength: 0
              dscp:
                "0": 8000
                "46": 2000
            errorStats:
              crc: 0
              fragment: 0
              jabber: 0
              alignment: 0
              symbol: 0
              unknown: 0
            opticalStats:
              rxPower: -5.2
              txPower: 0.5
              temperature: 35
              voltage: 3.3
              bias: 30
            rateStats:
              inputRate: 1000
              outputRate: 2000
              inputPacketRate: 10
              outputPacketRate: 20
        collectionTimestamp: 2000-01-23T04:56:07.000+00:00
        interval: 0
        aggregated: true
        type: INTERFACE_STATS
        device:
          deviceId: switch-01
          hostname: core-switch-01
          managementIp: 192.168.1.10
          macAddress: 00:11:22:33:44:55
          deviceRoles:
          - Switch
        timestamp: 2023-10-01T12:00:00Z
    StateQueryMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - STATE_QUERY
            type: string
          device:
            $ref: '#/components/schemas/schemas-DeviceSettings'
          query:
            $ref: '#/components/schemas/StateQuery'
        required:
        - device
        - query
      example:
        type: STATE_QUERY
        timestamp: 2024-03-15T10:30:00Z
        schemaVersion: "1.0"
        device:
          deviceId: switch-01
        query:
          queryType: interface_status
    StateQueryResponseMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - STATE_QUERY_RESPONSE
            type: string
          device:
            $ref: '#/components/schemas/Device'
          query:
            $ref: '#/components/schemas/StateQuery'
          data:
            $ref: '#/components/schemas/StateQueryResponseMessage_allOf_data'
        required:
        - data
        - device
        - query
      example:
        type: STATE_QUERY_RESPONSE
        timestamp: 2024-03-15T10:30:05Z
        schemaVersion: "1.0"
        device:
          deviceId: switch-01
          hostname: core-switch-01
          deviceRoles:
          - Switch
        query:
          queryType: interface_status
        data:
          interfaces:
          - name: eth0
            operStatus: up
            adminStatus: up
            lastChange: 2024-03-01T08:15:00Z
            speed: 1Gbps
            duplex: full
            mtu: 1500
          - name: eth1
            operStatus: up
            adminStatus: up
            lastChange: 2024-03-01T08:15:00Z
            speed: 10Gbps
            duplex: full
            mtu: 9000
    RoleUpdateMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - ROLE_UPDATE
            type: string
          device:
            $ref: '#/components/schemas/Device'
          newRoles:
            items:
              $ref: '#/components/schemas/Role'
            type: array
        required:
        - device
        - newRoles
      example:
        type: ROLE_UPDATE
        timestamp: 2024-03-15T10:30:00Z
        schemaVersion: "1.0"
        device:
          deviceId: switch-01
          hostname: core-switch-01
          deviceRoles:
          - Switch
        newRoles:
        - name: operator
          permissions:
          - read:devices
          - read:config
          - write:config:limited
        - name: viewer
          permissions:
          - read:devices
          - read:config
    HealthStatusResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - properties:
          type:
            enum:
            - HEALTH_STATUS
            type: string
          status:
            $ref: '#/components/schemas/HealthStatusMessage'
        required:
        - status
        type: object
    HelloResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - properties:
          type:
            enum:
            - HELLO_RESPONSE
            type: string
          server_id:
            type: string
          timestamp:
            format: date-time
            type: string
          schemaVersion:
            type: string
          status:
            enum:
            - success
            type: string
          message:
            type: string
        required:
        - status
        - timestamp
        - type
        type: object
      example:
        schemaVersion: schemaVersion
        requestId: 123e4567-e89b-12d3-a456-426614174000
        type: HELLO_RESPONSE
        server_id: server_id
        message: message
        timestamp: 2000-01-23T04:56:07.000+00:00
        status: success
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    BaseRequest:
      properties:
        type:
          type: string
        timestamp:
          format: date-time
          type: string
          x-go-type: string
        requestId:
          description: Client-generated request ID for tracking
          format: uuid
          type: string
      required:
      - requestId
      - timestamp
      - type
      type: object
    IdempotencyConflictError:
      example:
        originalRequest: "{}"
        errorMessage: errorMessage
        errorCode: 0
        originalResponse: "{}"
        type: IDEMPOTENCY_CONFLICT
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        type:
          enum:
          - IDEMPOTENCY_CONFLICT
          type: string
        timestamp:
          format: date-time
          type: string
          x-go-type: string
        errorCode:
          enum:
          - 409
          type: integer
        errorMessage:
          type: string
        originalRequest:
          description: Details of the original request that used this idempotency
            key
          type: object
        originalResponse:
          description: Response from the original request
          type: object
      required:
      - errorCode
      - errorMessage
      - originalRequest
      - timestamp
      - type
      type: object
    NetworkInterface:
      description: Network interface configuration and status information
      example:
        name: eth0
        adminState: enabled
        description: Uplink to Core Switch
        state: up
        type: ethernet
        enabled: true
        speed: 10Gbps
        mac: 00:1A:2B:3C:4D:5E
        mtu: 1500
      properties:
        name:
          description: Interface name/identifier
          example: eth0
          type: string
        description:
          description: Human-readable interface description
          example: Uplink to Core Switch
          type: string
        enabled:
          description: Administrative state of the interface
          example: true
          type: boolean
        speed:
          $ref: '#/components/schemas/InterfaceSpeed'
        type:
          description: Interface type/media
          enum:
          - ethernet
          - fiber
          - wireless
          - loopback
          - vlan
          - tunnel
          type: string
        mtu:
          description: Maximum Transmission Unit in bytes
          example: 1500
          maximum: 9216
          minimum: 64
          type: integer
        mac:
          description: MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
          example: 00:1A:2B:3C:4D:5E
          pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          type: string
        state:
          $ref: '#/components/schemas/InterfaceState'
        adminState:
          $ref: '#/components/schemas/AdminState'
      required:
      - enabled
      - name
      type: object
    Hostname:
      description: Valid hostname according to RFC 1123
      example: example-host
      maxLength: 253
      pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?([.][a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*$"
      type: string
    Device:
      example:
        deviceId: switch-01
        hostname: core-switch-01
        managementIp: 192.168.1.10
        macAddress: 00:11:22:33:44:55
        deviceRoles:
        - Switch
      properties:
        deviceId:
          description: Unique identifier for the device
          example: switch-01
          type: string
        hostname:
          description: Valid hostname according to RFC 1123
          example: example-host
          maxLength: 253
          pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?([.][a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*$"
          type: string
        managementIp:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        macAddress:
          description: MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
          example: 00:1A:2B:3C:4D:5E
          pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          type: string
        deviceRoles:
          example:
          - Switch
          items:
            $ref: '#/components/schemas/DeviceRoleEnum'
          type: array
      required:
      - deviceId
      - deviceRoles
      type: object
    ErrorDetail:
      example:
        code: INVALID_REQUEST
        target: deviceId
        message: Required field missing
      properties:
        code:
          enum:
          - INVALID_REQUEST
          - AUTH_FAILURE
          - RESOURCE_CONFLICT
          example: INVALID_REQUEST
          type: string
        target:
          example: deviceId
          type: string
        message:
          example: Required field missing
          type: string
      type: object
    Status:
      description: Status information with type and timestamp
      example:
        type: STATUS
        timestamp: 2023-10-01T12:00:00Z
        state: healthy
      properties:
        type:
          enum:
          - STATUS
          example: STATUS
          type: string
        timestamp:
          description: ISO 8601 formatted timestamp with timezone
          example: 2023-10-01T12:00:00Z
          format: date-time
          type: string
          x-go-type: string
        state:
          description: Current state of the component or system
          enum:
          - healthy
          - degraded
          - unhealthy
          example: healthy
          type: string
      required:
      - state
      - timestamp
      - type
      type: object
    Capabilities:
      description: Device capabilities and features
      example:
        routingSupport: true
        firewallSupport: false
        vpnSupport: false
        loadBalancing: true
        qosSupport: true
        ipv6Support: true
        mplsSupport: false
        sflowSupport: true
        netflowSupport: false
        features:
          stacking: true
          portChannels: true
          vxlan: false
        supportedProtocols:
        - lldp
        - stp
        - lacp
        - ospf
        hardwareCapabilities:
          tcamSize: 8192
          bufferSize: 32768
          forwardingCapacity: 400Gbps
      properties:
        routingSupport:
          type: boolean
        firewallSupport:
          type: boolean
        vpnSupport:
          type: boolean
        loadBalancing:
          type: boolean
        qosSupport:
          type: boolean
        ipv6Support:
          type: boolean
        mplsSupport:
          type: boolean
        sflowSupport:
          type: boolean
        netflowSupport:
          type: boolean
        features:
          additionalProperties:
            type: boolean
          type: object
        supportedProtocols:
          items:
            type: string
          type: array
        hardwareCapabilities:
          $ref: '#/components/schemas/Capabilities_hardwareCapabilities'
      type: object
    InterfaceSpeed:
      description: Interface speed in standard units
      enum:
      - 10Mbps
      - 100Mbps
      - 1Gbps
      - 2.5Gbps
      - 5Gbps
      - 10Gbps
      - 25Gbps
      - 40Gbps
      - 100Gbps
      example: 10Gbps
      type: string
    InterfaceState:
      description: Interface operational states as per IF-MIB
      enum:
      - up
      - down
      - testing
      - unknown
      - dormant
      - notPresent
      - lowerLayerDown
      type: string
    AdminState:
      description: Administrative state
      enum:
      - enabled
      - disabled
      type: string
    DiscoveredNeighbor:
      example:
        device:
          deviceId: switch-02
          hostname: access-switch-01
          deviceRoles:
          - Switch
        discoveryProtocol: lldp
        distance: 1
        lastSeen: 2024-01-01T00:00:00Z
        confidence: 1
        connectionDetails:
          localPort: eth1
          remotePort: eth0
          linkType: ethernet
          localAddress: 192.168.1.1
          remoteAddress: 192.168.1.2
      properties:
        device:
          $ref: '#/components/schemas/Device'
        discoveryProtocol:
          enum:
          - lldp
          - cdp
          - fdb
          - bgp_neighbors
          type: string
        distance:
          description: Hops from start point
          type: integer
        lastSeen:
          description: Last time device was discovered
          format: date-time
          type: string
        confidence:
          description: Discovery confidence score
          type: number
        connectionDetails:
          $ref: '#/components/schemas/DiscoveredNeighbor_connectionDetails'
      required:
      - device
      - discoveryProtocol
      type: object
    NetworkDiscoveryOptions:
      example:
        depth: 3
        protocols:
        - lldp
        - cdp
        timeout: 60
        retries: 2
        filters:
          deviceTypes:
          - Switch
          - Router
          subnets:
          - 192.168.1.0/24
          - 10.0.0.0/8
      properties:
        depth:
          description: Discovery depth limit
          type: integer
        protocols:
          description: Specific protocols to use for discovery
          items:
            enum:
            - lldp
            - cdp
            - fdb
            - bgp_neighbors
            type: string
          type: array
        timeout:
          description: Discovery timeout in seconds
          type: integer
        retries:
          description: Number of discovery retries
          type: integer
        filters:
          $ref: '#/components/schemas/NetworkDiscoveryOptions_filters'
      type: object
    NetworkTopology:
      description: Network topology information
      example:
        nodes:
        - deviceId: switch-01
          hostname: core-switch-01
          deviceRoles:
          - Switch
          - Router
          managementIp: 192.168.1.1
        - deviceId: switch-02
          hostname: access-switch-01
          deviceRoles:
          - Switch
          managementIp: 192.168.1.2
        - deviceId: router-01
          hostname: edge-router-01
          deviceRoles:
          - Router
          managementIp: 192.168.1.3
        links:
        - source: switch-01
          target: switch-02
          sourcePort: eth1/1
          targetPort: eth0/1
          linkType: ethernet
          discoveryProtocol: lldp
        - source: switch-01
          target: router-01
          sourcePort: eth1/2
          targetPort: eth0/1
          linkType: ethernet
          discoveryProtocol: lldp
        lastUpdated: 2024-01-01T12:00:00Z
      properties:
        nodes:
          description: Network nodes/devices
          items:
            $ref: '#/components/schemas/Device'
          type: array
        links:
          description: Network links between devices
          items:
            $ref: '#/components/schemas/NetworkTopology_links_inner'
          type: array
        lastUpdated:
          description: Timestamp of last topology update
          format: date-time
          type: string
      required:
      - links
      - nodes
      type: object
    ACLMatch:
      description: ACL match criteria
      example:
        ip_proto: 6
        src_ip:
          address: 192.168.1.0
          prefixLength: 24
        tcp_dst: 443
        tcp_flags:
        - SYN
      properties:
        eth_type:
          description: Ethernet type
          example: 2048
          type: integer
        ip_proto:
          description: IP protocol number
          example: 6
          type: integer
        src_ip:
          $ref: '#/components/schemas/IPAddressWithPrefix'
        dst_ip:
          $ref: '#/components/schemas/IPAddressWithPrefix'
        tcp_src:
          description: TCP source port
          example: 80
          type: integer
        tcp_dst:
          description: TCP destination port
          example: 443
          type: integer
        udp_src:
          description: UDP source port
          example: 53
          type: integer
        udp_dst:
          description: UDP destination port
          example: 53
          type: integer
        icmp_type:
          description: ICMP message type
          example: 8
          type: integer
        icmp_code:
          description: ICMP message code
          example: 0
          type: integer
        icmpv6_type:
          description: ICMPv6 message type
          example: 128
          type: integer
        icmpv6_code:
          description: ICMPv6 message code
          example: 0
          type: integer
        vlan_id:
          description: VLAN ID
          example: 100
          type: integer
        dscp:
          description: Differentiated Services Code Point
          example: 46
          type: integer
        tcp_flags:
          description: TCP flags to match
          example:
          - SYN
          - ACK
          items:
            enum:
            - FIN
            - SYN
            - RST
            - PSH
            - ACK
            - URG
            type: string
          type: array
      type: object
    ACLAction:
      description: ACL action configuration
      example:
        allow: true
        logging:
          enabled: true
          level: info
      properties:
        allow:
          description: Allow traffic matching this rule
          example: true
          type: boolean
        deny:
          description: Deny traffic matching this rule
          example: false
          type: boolean
        mirror:
          description: Mirror traffic to specified port
          example: 5
          type: integer
        output:
          description: Output port for matching traffic
          example: 1
          type: integer
        ratelimit:
          $ref: '#/components/schemas/ACLAction_ratelimit'
        redirect:
          $ref: '#/components/schemas/ACLAction_redirect'
        logging:
          $ref: '#/components/schemas/ACLAction_logging'
      type: object
    ACLRule:
      description: ACL rule definition
      example:
        ruleId: 10
        description: Allow HTTPS traffic from internal network
        matches:
          ip_proto: 6
          src_ip:
            address: 192.168.1.0
            prefixLength: 24
          tcp_dst: 443
        actions:
          allow: true
          logging:
            enabled: true
            level: info
        enabled: true
        hitCount: 1250
        lastHit: 2023-10-01T12:00:00Z
      properties:
        ruleId:
          description: Unique identifier for the rule
          example: 10
          type: integer
        description:
          description: Human-readable description of the rule
          example: Allow HTTPS traffic from internal network
          type: string
        matches:
          $ref: '#/components/schemas/ACLMatch'
        actions:
          $ref: '#/components/schemas/ACLAction'
        enabled:
          description: Whether the rule is enabled
          example: true
          type: boolean
        hitCount:
          description: Number of times this rule has been matched
          example: 1250
          type: integer
        lastHit:
          description: Timestamp of the last match
          example: 2023-10-01T12:00:00Z
          format: date-time
          type: string
      required:
      - actions
      - matches
      - ruleId
      type: object
    IPConfig:
      description: IP configuration for an interface
      example:
        secondary:
        - address: 192.168.1.2
          prefixLength: 24
        virtualIPs:
        - address: 192.168.1.3
          prefixLength: 24
        autoconfig: false
        dhcp: false
        primary:
          ipv4:
            value:
              address: 192.168.1.0
              prefixLength: 24
          ipv6:
            value:
              address: '2001:db8::'
              prefixLength: 64
      properties:
        primary:
          $ref: '#/components/schemas/IPAddressWithPrefix'
        secondary:
          description: Secondary IP addresses
          example:
          - address: 192.168.1.2
            prefixLength: 24
          items:
            $ref: '#/components/schemas/IPAddressWithPrefix'
          type: array
        virtualIPs:
          description: Virtual IP addresses for VRRP/HSRP
          example:
          - address: 192.168.1.3
            prefixLength: 24
          items:
            $ref: '#/components/schemas/IPAddressWithPrefix'
          type: array
        dhcp:
          default: false
          description: Whether DHCP is enabled
          type: boolean
        autoconfig:
          default: false
          description: Whether IPv6 autoconfig is enabled
          type: boolean
      required:
      - primary
      type: object
    DeviceInfoResponse:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            description: Must be DEVICE_INFO_RESPONSE
            enum:
            - DEVICE_INFO_RESPONSE
            type: string
          deviceId:
            type: string
          settings:
            $ref: '#/components/schemas/DeviceSettings'
        required:
        - deviceId
        - settings
        - type
      example:
        settings:
          hostname: hostname
          snmpCommunity: snmpCommunity
          managementIp: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
            :\"2001:db8::1\"}}"
          dnsSettings:
            servers:
            - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
              }}"
            - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
              }}"
            domain: domain
            searchDomains:
            - searchDomains
            - searchDomains
          syslogServers:
          - null
          - null
          ntpServers:
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          type: DEVICE_INFO_REQUEST
          deviceId: deviceId
          timestamp: 2000-01-23T04:56:07.000+00:00
        schemaVersion: "1.0"
        type: DEVICE_INFO_RESPONSE
        deviceId: deviceId
        timestamp: 2023-10-01T12:00:00Z
    DeviceInfoRequest:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            description: Must be DEVICE_INFO_REQUEST
            enum:
            - DEVICE_INFO_REQUEST
            type: string
          deviceId:
            type: string
          devices:
            description: List of device IDs to query
            items:
              type: string
            type: array
        required:
        - type
      example:
        schemaVersion: "1.0"
        devices:
        - devices
        - devices
        type: DEVICE_INFO_REQUEST
        deviceId: deviceId
        timestamp: 2023-10-01T12:00:00Z
    dnsSettings:
      description: DNS configuration
      example:
        servers:
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        domain: domain
        searchDomains:
        - searchDomains
        - searchDomains
      properties:
        servers:
          items:
            $ref: '#/components/schemas/IPAddress'
          type: array
        domain:
          type: string
        searchDomains:
          items:
            type: string
          type: array
      type: object
    ntpServers:
      description: List of NTP servers (can be IP addresses or FQDNs)
      items:
        $ref: '#/components/schemas/DeviceSettings_ntpServers_inner'
      type: array
    syslogServers:
      description: List of syslog servers
      items:
        $ref: '#/components/schemas/DeviceSettings_ntpServers_inner'
      type: array
    schemas-NetworkInterface:
      description: Network interface configuration and status
      example:
        name: eth0
        type: ethernet
        enabled: true
        mtu: 1500
        speed: 10Gbps
        duplex: full
      properties:
        name:
          description: Interface name
          example: eth0
          type: string
        type:
          description: Interface type
          enum:
          - ethernet
          - wifi
          - virtual
          - loopback
          - tunnel
          example: ethernet
          type: string
        description:
          description: Interface description
          example: Uplink to Core Switch
          type: string
        enabled:
          description: Whether the interface is enabled
          example: true
          type: boolean
        ipAddresses:
          items:
            $ref: '#/components/schemas/IPAddressWithPrefix'
          type: array
        macAddress:
          description: MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
          example: 00:1A:2B:3C:4D:5E
          pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          type: string
        mtu:
          description: Maximum Transmission Unit
          example: 1500
          maximum: 65535
          minimum: 68
          type: integer
        speed:
          $ref: '#/components/schemas/InterfaceSpeed'
        duplex:
          description: Interface duplex mode
          enum:
          - full
          - half
          - auto
          example: full
          type: string
      required:
      - enabled
      - name
      - type
      type: object
    SystemSettings:
      example:
        timezone: timezone
        ntpServers:
        - ntpServers
        - ntpServers
        loggingLevel: DEBUG
      properties:
        timezone:
          type: string
        ntpServers:
          items:
            type: string
          type: array
        loggingLevel:
          enum:
          - DEBUG
          - INFO
          - WARNING
          - ERROR
          type: string
      type: object
    SwitchConfiguration:
      example:
        hostname: hostname
        managementIp: managementIp
        deviceMode: STANDALONE
        systemSettings:
          timezone: timezone
          ntpServers:
          - ntpServers
          - ntpServers
          loggingLevel: DEBUG
      properties:
        hostname:
          type: string
        managementIp:
          format: ipv4
          type: string
        deviceMode:
          enum:
          - STANDALONE
          - STACKED
          type: string
        systemSettings:
          $ref: '#/components/schemas/SystemSettings'
      type: object
    SpanningTreeConfig:
      example:
        mode: stp
        enabled: true
      properties:
        enabled:
          type: boolean
        mode:
          enum:
          - stp
          - rstp
          - mstp
          type: string
      required:
      - enabled
      type: object
    SwitchFeatures:
      description: Optional switch features and capabilities
      example:
        spanningTree:
          mode: stp
          enabled: true
        portChannels:
          maxGroups: 4
          supportedProtocols:
          - lacp
          - lacp
        stacking:
          role: master
          priority: 2
          enabled: true
      properties:
        stacking:
          $ref: '#/components/schemas/SwitchFeatures_stacking'
        portChannels:
          $ref: '#/components/schemas/SwitchFeatures_portChannels'
        spanningTree:
          $ref: '#/components/schemas/SpanningTreeConfig'
      type: object
    SwitchDeviceConfig:
      allOf:
      - $ref: '#/components/schemas/SwitchDevice'
      - properties:
          datapathId:
            type: string
          numTables:
            type: integer
          numPorts:
            type: integer
          ports:
            items:
              $ref: '#/components/schemas/PortConfig'
            type: array
          features:
            $ref: '#/components/schemas/SwitchFeatures'
          powerSupplies:
            description: Power supply information
            items:
              $ref: '#/components/schemas/SwitchDeviceConfig_allOf_powerSupplies'
            type: array
          fans:
            description: Fan information
            items:
              $ref: '#/components/schemas/SwitchDeviceConfig_allOf_fans'
            type: array
        required:
        - datapathId
        - numPorts
        - numTables
      example:
        deviceConfig:
          hostname: hostname
          managementIp: managementIp
          deviceMode: STANDALONE
          systemSettings:
            timezone: timezone
            ntpServers:
            - ntpServers
            - ntpServers
            loggingLevel: DEBUG
        powerSupplies:
        - id: id
          type: type
          status: status
        - id: id
          type: type
          status: status
        features:
          spanningTree:
            mode: stp
            enabled: true
          portChannels:
            maxGroups: 4
            supportedProtocols:
            - lacp
            - lacp
          stacking:
            role: master
            priority: 2
            enabled: true
        networkInterfaces:
        - name: eth0
          type: ethernet
          enabled: true
          mtu: 1500
          speed: 10Gbps
          duplex: full
        - name: eth0
          type: ethernet
          enabled: true
          mtu: 1500
          speed: 10Gbps
          duplex: full
        datapathId: datapathId
        deviceModel: deviceModel
        numPorts: 6
        firmwareVersion: firmwareVersion
        ports:
        - portSecurity:
            maxMacAddresses: 3
            violationAction: protect
            enabled: true
          description: Uplink to Core Switch
          duplex: full
          aclIn: aclIn
          type: ethernet
          portId: 1
          enabled: true
          speed: 10Gbps
          mtu: 1500
          macAddress: 00:1A:2B:3C:4D:5E
          dynamicVlan: true
          name: eth0
          ipAddresses:
          - ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
          - ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
          maxLearnedMacs: 5
          stormControl:
            broadcast: 2
            unicast: 9
            multicast: 7
          nativeVlan: 5
        - portSecurity:
            maxMacAddresses: 3
            violationAction: protect
            enabled: true
          description: Uplink to Core Switch
          duplex: full
          aclIn: aclIn
          type: ethernet
          portId: 1
          enabled: true
          speed: 10Gbps
          mtu: 1500
          macAddress: 00:1A:2B:3C:4D:5E
          dynamicVlan: true
          name: eth0
          ipAddresses:
          - ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
          - ipv4:
              value:
                address: 192.168.1.0
                prefixLength: 24
            ipv6:
              value:
                address: '2001:db8::'
                prefixLength: 64
          maxLearnedMacs: 5
          stormControl:
            broadcast: 2
            unicast: 9
            multicast: 7
          nativeVlan: 5
        deviceId: deviceId
        numTables: 0
        fans:
        - id: id
          speed: 7
          status: status
        - id: id
          speed: 7
          status: status
    VLANProperties:
      description: Extended VLAN properties
      example:
        dhcpSnooping: true
        stormControl:
          broadcast: 5
          unicast: 2
          multicast: 5
        priority: 1
        igmpSnooping: true
        mtu: 6
        arpInspection: true
      properties:
        mtu:
          type: integer
        priority:
          type: integer
        igmpSnooping:
          type: boolean
        dhcpSnooping:
          type: boolean
        arpInspection:
          type: boolean
        stormControl:
          $ref: '#/components/schemas/VLANProperties_stormControl'
      type: object
    VLANSecurity:
      description: VLAN security settings
      example:
        privateVlan:
          secondaryVlans:
          - 9
          - 9
          type: primary
          primaryVlan: 7
        macLimiters:
          maxMacAddresses: 3
          violationAction: protect
      properties:
        privateVlan:
          $ref: '#/components/schemas/VLANSecurity_privateVlan'
        macLimiters:
          $ref: '#/components/schemas/VLANSecurity_macLimiters'
      type: object
    ports:
      properties:
        untagged:
          items:
            $ref: '#/components/schemas/NetworkInterface'
          type: array
        tagged:
          items:
            $ref: '#/components/schemas/NetworkInterface'
          type: array
      type: object
    RouteEntry:
      description: Route entry configuration
      example:
        nextHop: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        bfd:
          multiplier: 7
          minTx: 5
          minRx: 2
          enabled: true
        metric: 0
        destination:
          ipv4:
            value:
              address: 192.168.1.0
              prefixLength: 24
          ipv6:
            value:
              address: '2001:db8::'
              prefixLength: 64
        adminDistance: 6
        description: description
        tag: 1
        interface:
          name: eth0
          adminState: enabled
          description: Uplink to Core Switch
          state: up
          type: ethernet
          enabled: true
          speed: 10Gbps
          mac: 00:1A:2B:3C:4D:5E
          mtu: 1500
        track: 5
      properties:
        destination:
          $ref: '#/components/schemas/IPAddressWithPrefix'
        nextHop:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        metric:
          type: integer
        interface:
          $ref: '#/components/schemas/NetworkInterface'
        adminDistance:
          type: integer
        tag:
          type: integer
        description:
          type: string
        track:
          type: integer
        bfd:
          $ref: '#/components/schemas/RouteEntry_bfd'
      required:
      - destination
      type: object
    BGPNeighbor:
      example:
        timers:
          keepalive: 2
          holdTime: 4
        address: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        remoteAs: 3
        localAddress: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"\
          2001:db8::1\"}}"
        description: description
      properties:
        address:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        remoteAs:
          type: integer
        description:
          type: string
        localAddress:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        timers:
          $ref: '#/components/schemas/BGPNeighbor_timers'
      required:
      - address
      - remoteAs
      type: object
    bgp:
      example:
        routerId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        neighbors:
        - timers:
            keepalive: 2
            holdTime: 4
          address: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          remoteAs: 3
          localAddress: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
            :\"2001:db8::1\"}}"
          description: description
        - timers:
            keepalive: 2
            holdTime: 4
          address: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          remoteAs: 3
          localAddress: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
            :\"2001:db8::1\"}}"
          description: description
        asNumber: 0
      properties:
        asNumber:
          type: integer
        routerId:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        neighbors:
          items:
            $ref: '#/components/schemas/BGPNeighbor'
          type: array
      type: object
    ospf:
      example:
        processId: 0
        routerId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        areas:
        - interfaces:
          - interfaces
          - interfaces
          areaId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          type: normal
        - interfaces:
          - interfaces
          - interfaces
          areaId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          type: normal
      properties:
        processId:
          type: integer
        routerId:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        areas:
          items:
            $ref: '#/components/schemas/RoutingConfig_ospf_areas_inner'
          type: array
      type: object
    InterfaceOperationalState:
      example:
        name: eth0
        operStatus: up
        adminStatus: up
        lastChange: 2024-03-01T08:15:00Z
      properties:
        name:
          type: string
        operStatus:
          enum:
          - up
          - down
          - testing
          - unknown
          - dormant
          - notPresent
          type: string
        adminStatus:
          enum:
          - up
          - down
          - testing
          type: string
        lastChange:
          format: date-time
          type: string
      required:
      - adminStatus
      - name
      - operStatus
      type: object
    DeviceOperationalState:
      example:
        deviceId: switch-01
        status: online
        lastSeen: 2024-03-15T10:30:00Z
        uptime: 30d 12h 45m
        interfaces:
        - name: eth0
          operStatus: up
          adminStatus: up
          lastChange: 2024-03-01T08:15:00Z
        - name: eth1
          operStatus: up
          adminStatus: up
          lastChange: 2024-03-01T08:15:00Z
        - name: eth2
          operStatus: down
          adminStatus: up
          lastChange: 2024-03-14T22:10:00Z
      properties:
        deviceId:
          type: string
        status:
          enum:
          - online
          - offline
          - error
          - maintenance
          - rebooting
          type: string
        lastSeen:
          format: date-time
          type: string
        uptime:
          type: string
        interfaces:
          items:
            $ref: '#/components/schemas/InterfaceOperationalState'
          type: array
      required:
      - deviceId
      - status
      type: object
    OperationalState:
      example:
        status: active
        devices:
        - deviceId: switch-01
          status: online
          lastSeen: 2024-03-15T10:30:00Z
          uptime: 30d 12h 45m
          interfaces:
          - name: eth0
            operStatus: up
            adminStatus: up
            lastChange: 2024-03-01T08:15:00Z
        - deviceId: router-01
          status: online
          lastSeen: 2024-03-15T10:29:00Z
          uptime: 15d 8h 20m
          interfaces:
          - name: eth0
            operStatus: up
            adminStatus: up
            lastChange: 2024-03-10T14:22:00Z
        timestamp: 2024-03-15T10:30:00Z
      properties:
        status:
          enum:
          - active
          - inactive
          - error
          - maintenance
          type: string
        devices:
          items:
            $ref: '#/components/schemas/DeviceOperationalState'
          type: array
        timestamp:
          format: date-time
          type: string
      required:
      - status
      - timestamp
      type: object
    schemas-DeviceSettings:
      example:
        deviceId: switch-01
        hostname: core-switch-01
        managementIp: 192.168.1.10
      properties:
        deviceId:
          description: Unique identifier for network device
          example: switch-01
          type: string
      type: object
    StateQuery:
      example:
        queryType: interface_status
      properties:
        queryType:
          enum:
          - interface_status
          - table_entries
          - arp_table
          - mac_address_table
          - route_table
          - optics
          - environment
          - bgp_neighbors
          - lldp_neighbors
          - firewallRules
          - vlans
          type: string
      required:
      - queryType
      type: object
    RebootCommandMessage:
      allOf:
      - $ref: '#/components/schemas/BaseMessage'
      - properties:
          type:
            enum:
            - REBOOT_COMMAND
            type: string
          device:
            $ref: '#/components/schemas/Device'
          force:
            type: boolean
          scheduledTime:
            description: Optional scheduled time for reboot
            format: date-time
            type: string
        required:
        - device
      example:
        type: REBOOT_COMMAND
        timestamp: 2024-03-15T10:30:00Z
        schemaVersion: "1.0"
        device:
          deviceId: switch-01
          hostname: core-switch-01
          deviceRoles:
          - Switch
        force: false
        scheduledTime: 2024-03-16T02:00:00Z
    InterfaceCounters:
      description: Interface counter statistics
      example:
        rxBytes: 5000000
        rxPackets: 50000
        rxErrors: 0
        rxDropped: 2
        rxOverruns: 0
        rxFrame: 0
        txBytes: 6000000
        txPackets: 60000
        txErrors: 0
        txDropped: 0
        txOverruns: 0
        txCollisions: 0
        multicast: 1000
        broadcast: 500
      properties:
        rxBytes:
          type: number
        rxPackets:
          type: number
        rxErrors:
          type: number
        rxDropped:
          type: number
        rxOverruns:
          type: number
        rxFrame:
          type: number
        txBytes:
          type: number
        txPackets:
          type: number
        txErrors:
          type: number
        txDropped:
          type: number
        txOverruns:
          type: number
        txCollisions:
          type: number
        multicast:
          type: number
        broadcast:
          type: number
      type: object
    QoSStats:
      description: QoS-related statistics
      example:
        dscp:
          key: 5.637376656633329
        queueStats:
          key:
            queueLength: 5.962133916683182
            bytes: 6.027456183070403
            dropped: 1.4658129805029452
            packets: 0.8008281904610115
      properties:
        queueStats:
          additionalProperties:
            $ref: '#/components/schemas/QoSStats_queueStats_value'
          type: object
        dscp:
          additionalProperties:
            type: number
          type: object
      type: object
    ErrorStats:
      description: Detailed error statistics
      example:
        symbol: 5.637376656633329
        fragment: 6.027456183070403
        jabber: 1.4658129805029452
        crc: 0.8008281904610115
        alignment: 5.962133916683182
        unknown: 2.3021358869347655
      properties:
        crc:
          type: number
        fragment:
          type: number
        jabber:
          type: number
        alignment:
          type: number
        symbol:
          type: number
        unknown:
          type: number
      type: object
    InterfaceStats:
      allOf:
      - $ref: '#/components/schemas/NetworkInterface'
      - properties:
          operStatus:
            enum:
            - up
            - down
            - testing
            - unknown
            - dormant
            - notPresent
            type: string
          adminStatus:
            enum:
            - up
            - down
            - testing
            type: string
          vlanIds:
            items:
              type: integer
            type: array
          lastFlapped:
            type: number
          counters:
            $ref: '#/components/schemas/InterfaceCounters'
          qosStats:
            $ref: '#/components/schemas/QoSStats'
          errorStats:
            $ref: '#/components/schemas/ErrorStats'
          opticalStats:
            $ref: '#/components/schemas/InterfaceStats_allOf_opticalStats'
          rateStats:
            $ref: '#/components/schemas/InterfaceStats_allOf_rateStats'
      example:
        name: eth0
        description: Primary network interface
        type: ethernet
        macAddress: 00:11:22:33:44:55
        ipv4Address: 192.168.1.1
        ipv4Subnet: 255.255.255.0
        ipv6Address: fe80::1
        ipv6PrefixLength: 64
        mtu: 1500
        enabled: true
        operStatus: up
        adminStatus: up
        vlanIds:
        - 100
        - 200
        lastFlapped: 1609459200
        counters:
          rxBytes: 1000000
          rxPackets: 10000
          rxErrors: 0
          rxDropped: 5
          rxOverruns: 0
          rxFrame: 0
          txBytes: 2000000
          txPackets: 20000
          txErrors: 0
          txDropped: 0
          txOverruns: 0
          txCollisions: 0
          multicast: 500
          broadcast: 200
        qosStats:
          queueStats:
            queue0:
              packets: 5000
              bytes: 500000
              dropped: 0
              queueLength: 0
            queue1:
              packets: 3000
              bytes: 300000
              dropped: 0
              queueLength: 0
          dscp:
            "0": 8000
            "46": 2000
        errorStats:
          crc: 0
          fragment: 0
          jabber: 0
          alignment: 0
          symbol: 0
          unknown: 0
        opticalStats:
          rxPower: -5.2
          txPower: 0.5
          temperature: 35
          voltage: 3.3
          bias: 30
        rateStats:
          inputRate: 1000
          outputRate: 2000
          inputPacketRate: 10
          outputPacketRate: 20
    DeviceStatistics:
      description: Device statistics
      example:
        deviceId: switch-01
        name: Core Switch 1
        type: switch
        enabled: true
        operStatus: up
        adminStatus: up
        vlanIds:
        - 1
        - 10
        - 20
        - 30
        - 100
        lastFlapped: 1609459200
        counters:
          rxBytes: 10000000
          rxPackets: 100000
          rxErrors: 5
          rxDropped: 10
          rxOverruns: 0
          rxFrame: 0
          txBytes: 20000000
          txPackets: 200000
          txErrors: 2
          txDropped: 0
          txOverruns: 0
          txCollisions: 0
          multicast: 5000
          broadcast: 2000
        qosStats:
          queueStats:
            queue0:
              packets: 50000
              bytes: 5000000
              dropped: 0
              queueLength: 0
            queue1:
              packets: 30000
              bytes: 3000000
              dropped: 0
              queueLength: 0
          dscp:
            "0": 80000
            "46": 20000
        errorStats:
          crc: 2
          fragment: 0
          jabber: 0
          alignment: 3
          symbol: 0
          unknown: 0
        opticalStats:
          rxPower: -4.8
          txPower: 0.7
          temperature: 38.5
          voltage: 3.3
          bias: 32
        rateStats:
          inputRate: 10000
          outputRate: 20000
          inputPacketRate: 100
          outputPacketRate: 200
      properties:
        deviceId:
          description: Device identifier
          type: string
        name:
          description: Device name
          type: string
        type:
          description: Device type
          type: string
        enabled:
          description: Whether the device is enabled
          type: boolean
        operStatus:
          description: Device operational status
          enum:
          - up
          - down
          - testing
          - unknown
          - dormant
          - notPresent
          type: string
        adminStatus:
          description: Device administrative status
          enum:
          - up
          - down
          - testing
          type: string
        vlanIds:
          description: List of VLAN IDs
          items:
            type: integer
          type: array
        lastFlapped:
          description: Last time the device flapped
          type: number
        counters:
          $ref: '#/components/schemas/InterfaceCounters'
        qosStats:
          $ref: '#/components/schemas/QoSStats'
        errorStats:
          $ref: '#/components/schemas/ErrorStats'
        opticalStats:
          $ref: '#/components/schemas/DeviceStatistics_opticalStats'
        rateStats:
          $ref: '#/components/schemas/DeviceStatistics_rateStats'
      type: object
    MeterStats:
      description: Meter statistics
      example:
        duration: 3.616076749251911
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        rate: 0.8008281904610115
        packetCount: 7.061401241503109
        meterId: meterId
        byteCount: 9.301444243932576
        name: name
        burstSize: 6.027456183070403
        type: bytes
        bands:
        - rate: 1.4658129805029452
          packetCount: 5.637376656633329
          byteCount: 2.3021358869347655
          burstSize: 5.962133916683182
        - rate: 1.4658129805029452
          packetCount: 5.637376656633329
          byteCount: 2.3021358869347655
          burstSize: 5.962133916683182
        deviceId: deviceId
      properties:
        deviceId:
          description: Device identifier
          type: string
        meterId:
          description: Meter identifier
          type: string
        name:
          description: Meter name
          type: string
        type:
          description: Type of meter
          enum:
          - bytes
          - packets
          - flows
          type: string
        rate:
          description: Current rate
          type: number
        burstSize:
          description: Burst size
          type: number
        bands:
          items:
            $ref: '#/components/schemas/MeterStats_bands_inner'
          type: array
        packetCount:
          description: Total packet count
          type: number
        byteCount:
          description: Total byte count
          type: number
        duration:
          description: Duration in seconds
          type: number
        lastUpdated:
          description: Last update timestamp
          format: date-time
          type: string
      required:
      - deviceId
      - meterId
      type: object
    MetricData:
      description: Generic metric data structure
      example:
        unit: unit
        name: name
        value: 0.8008281904610115
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        name:
          type: string
        value:
          type: number
        unit:
          type: string
        timestamp:
          format: date-time
          type: string
      required:
      - name
      - timestamp
      - value
      type: object
    ResourceMetrics:
      description: System resource metrics
      example:
        cpu:
          usage: 65.3
          load: 1.25
          temperature: 42.8
        memory:
          total: 16384
          used: 8192
          free: 8192
          buffers: 2048
        storage:
          total: 512000
          used: 256000
          free: 256000
      properties:
        cpu:
          $ref: '#/components/schemas/ResourceMetrics_cpu'
        memory:
          $ref: '#/components/schemas/ResourceMetrics_memory'
        storage:
          $ref: '#/components/schemas/ResourceMetrics_storage'
      type: object
    EnvironmentalMetrics:
      description: Environmental monitoring metrics
      example:
        temperature:
          ambient: 24.5
          components:
            cpu: 45.2
            memory: 38.7
            psu: 32.1
        power:
          consumption: 120.5
          efficiency: 0.85
          sources:
          - id: psu1
            status: active
            output: 95.3
          - id: psu2
            status: standby
            output: 25.2
        fans:
        - id: fan1
          speed: 2500
          status: normal
        - id: fan2
          speed: 2600
          status: normal
      properties:
        temperature:
          $ref: '#/components/schemas/EnvironmentalMetrics_temperature'
        power:
          $ref: '#/components/schemas/EnvironmentalMetrics_power'
        fans:
          items:
            $ref: '#/components/schemas/EnvironmentalMetrics_fans_inner'
          type: array
      type: object
    DeviceMetrics:
      example:
        vlanStats:
          vlan100:
            rxPackets: 15000
            txPackets: 12500
          vlan200:
            rxPackets: 8000
            txPackets: 7200
        routeStats:
          activeRoutes: 120
          droppedPackets: 25
        firewallHits: 1250
        resources:
          cpu:
            usage: 65.3
            load: 1.25
            temperature: 42.8
          memory:
            total: 16384
            used: 8192
            free: 8192
            buffers: 2048
          storage:
            total: 512000
            used: 256000
            free: 256000
        environmental:
          temperature:
            ambient: 24.5
            components:
              cpu: 45.2
              memory: 38.7
              psu: 32.1
          power:
            consumption: 120.5
            efficiency: 0.85
            sources:
            - id: psu1
              status: active
              output: 95.3
          fans:
          - id: fan1
            speed: 2500
            status: normal
        customMetrics:
          vendorSpecific:
            qosMetric: 98.5
            packetLoss: 0.02
      properties:
        vlanStats:
          additionalProperties: true
          type: object
        routeStats:
          additionalProperties: true
          type: object
        firewallHits:
          type: integer
        resources:
          $ref: '#/components/schemas/ResourceMetrics'
        environmental:
          $ref: '#/components/schemas/EnvironmentalMetrics'
        customMetrics:
          additionalProperties: true
          description: Vendor-specific or custom metrics
          type: object
      type: object
    MetricThresholds:
      example:
        memory:
          critical: 6.027456183070403
          warning: 0.8008281904610115
        temperature:
          critical: 6.027456183070403
          warning: 0.8008281904610115
        cpu:
          critical: 6.027456183070403
          warning: 0.8008281904610115
      properties:
        cpu:
          $ref: '#/components/schemas/updateMetricThresholds_request_cpu'
        memory:
          $ref: '#/components/schemas/updateMetricThresholds_request_cpu'
        temperature:
          $ref: '#/components/schemas/updateMetricThresholds_request_cpu'
      type: object
    FlowMatch:
      description: Match fields for flow entries supporting both IPv4 and IPv6
      example:
        in_port: 1
        eth_type: 2048
        ip_proto: 6
        ipv4_dst: 192.168.1.100
        tcp_dst: 80
      properties:
        in_port:
          type: integer
        eth_src:
          type: string
        eth_dst:
          type: string
        eth_type:
          description: "Ethernet type (2048 - 0x0800 for IPv4, 34525 - 0x86DD for\
            \ IPv6)"
          enum:
          - 2048
          - 34525
          type: integer
        ip_proto:
          description: IP protocol number
          type: integer
        ipv4_src:
          description: IPv4 source address
          type: string
        ipv4_dst:
          description: IPv4 destination address
          type: string
        ipv6_src:
          description: IPv6 source address
          type: string
        ipv6_dst:
          description: IPv6 destination address
          type: string
        ipv6_nd_target:
          description: IPv6 neighbor discovery target address
          type: string
        ipv6_nd_sll:
          description: IPv6 neighbor discovery source link-layer address
          type: string
        ipv6_nd_tll:
          description: IPv6 neighbor discovery target link-layer address
          type: string
        vlan_vid:
          description: VLAN ID
          type: integer
        tcp_src:
          type: integer
        tcp_dst:
          type: integer
        udp_src:
          type: integer
        udp_dst:
          type: integer
        icmpv6_type:
          description: ICMPv6 type
          type: integer
        icmpv6_code:
          description: ICMPv6 code
          type: integer
      type: object
    FlowAction:
      example:
        action: forward
        output_port: 2
      properties:
        action:
          enum:
          - forward
          - drop
          - modify
          - flood
          - set_vlan
          - strip_vlan
          type: string
        output_port:
          type: integer
        vlan_action:
          description: Action related to VLAN handling
          enum:
          - push
          - pop
          - modify
          type: string
      required:
      - action
      type: object
    Role:
      example:
        name: admin
        permissions:
        - read:devices
        - write:devices
        - read:config
        - write:config
        - read:security
        - write:security
      properties:
        name:
          type: string
        permissions:
          items:
            type: string
          type: array
      required:
      - name
      - permissions
      type: object
    queryBulkCapabilities_request:
      properties:
        devices:
          description: List of device IDs
          items:
            type: string
          type: array
        query:
          $ref: '#/components/schemas/CapabilityRequestMessage'
      required:
      - devices
      - query
      type: object
    queryBulkCapabilities_200_response:
      example:
        results:
          key:
            type: CAPABILITY_QUERY_RESPONSE
            timestamp: 2024-01-01T00:00:01Z
            schemaVersion: "1.0"
            status: success
            device:
              deviceId: switch-01
              hostname: core-switch-01
              deviceRoles:
              - Switch
            capabilities:
              routingSupport: true
              firewallSupport: false
              vpnSupport: false
              loadBalancing: false
              qosSupport: true
              ipv6Support: true
              mplsSupport: false
              sflowSupport: true
              netflowSupport: false
              features:
                stacking: true
                portChannels: true
              supportedProtocols:
              - lldp
              - stp
              - lacp
              hardwareCapabilities:
                tcamSize: 8192
                bufferSize: 32768
                forwardingCapacity: 400Gbps
            interfaces:
            - name: eth0
              type: ethernet
              speed: 1Gbps
              enabled: true
            supportedTables:
            - acl
            - mac
            - route
            constraints:
              maxFlowEntries: 10000
              maxTables: 8
              maxVlans: 4094
      properties:
        results:
          additionalProperties:
            $ref: '#/components/schemas/CapabilityQueryResponse'
          type: object
      type: object
    createAcl_request:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      - $ref: '#/components/schemas/ACL'
    createOrUpdateDevice_request:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      - properties:
          config:
            $ref: '#/components/schemas/DeviceConfigUpdateMessage'
        required:
        - config
        type: object
    requestBulkDeviceInfo_request:
      properties:
        type:
          description: Must be DEVICE_INFO_REQUEST
          enum:
          - DEVICE_INFO_REQUEST
          type: string
        timestamp:
          description: Request timestamp
          format: date-time
          type: string
        devices:
          description: List of device IDs
          items:
            type: string
          type: array
        schemaVersion:
          description: Schema version
          type: string
      required:
      - devices
      - type
      type: object
    getDeviceInterfaces_200_response_value:
      allOf:
      - $ref: '#/components/schemas/NetworkInterface'
      - $ref: '#/components/schemas/IPConfig'
    getSystemSettings_200_response:
      example:
        hostname: hostname
        dnsSettings:
          servers:
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          domain: domain
          searchDomains:
          - searchDomains
          - searchDomains
        syslogServers:
        - null
        - null
        ntpServers:
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
      properties:
        hostname:
          type: string
        dnsSettings:
          $ref: '#/components/schemas/dnsSettings'
        ntpServers:
          description: List of NTP servers (can be IP addresses or FQDNs)
          items:
            $ref: '#/components/schemas/DeviceSettings_ntpServers_inner'
          type: array
        syslogServers:
          description: List of syslog servers
          items:
            $ref: '#/components/schemas/DeviceSettings_ntpServers_inner'
          type: array
      type: object
    validateRoutingConfig_200_response_errors_inner:
      example:
        path: path
        message: message
      properties:
        path:
          type: string
        message:
          type: string
      type: object
    validateRoutingConfig_200_response:
      example:
        valid: true
        warnings:
        - path: path
          message: message
        - path: path
          message: message
        errors:
        - path: path
          message: message
        - path: path
          message: message
      properties:
        valid:
          type: boolean
        errors:
          items:
            $ref: '#/components/schemas/validateRoutingConfig_200_response_errors_inner'
          type: array
        warnings:
          items:
            $ref: '#/components/schemas/validateRoutingConfig_200_response_errors_inner'
          type: array
      type: object
    getBulkStats_request_interfaces_inner:
      properties:
        deviceId:
          type: string
        interfaceId:
          type: string
      required:
      - deviceId
      - interfaceId
      type: object
    getBulkStats_request:
      properties:
        interfaces:
          items:
            $ref: '#/components/schemas/getBulkStats_request_interfaces_inner'
          type: array
        statsTypes:
          items:
            enum:
            - counters
            - qos
            - errors
            type: string
          type: array
      required:
      - interfaces
      type: object
    getBulkMetrics_request:
      properties:
        devices:
          description: List of device IDs
          items:
            type: string
          type: array
        metricTypes:
          items:
            enum:
            - resource
            - environmental
            type: string
          type: array
      required:
      - devices
      type: object
    updateMetricThresholds_request_cpu:
      example:
        critical: 6.027456183070403
        warning: 0.8008281904610115
      properties:
        warning:
          type: number
        critical:
          type: number
      type: object
    updateMetricThresholds_request:
      properties:
        cpu:
          $ref: '#/components/schemas/updateMetricThresholds_request_cpu'
        memory:
          $ref: '#/components/schemas/updateMetricThresholds_request_cpu'
        temperature:
          $ref: '#/components/schemas/updateMetricThresholds_request_cpu'
      type: object
    createFlow_request:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      - $ref: '#/components/schemas/FlowEntry'
    createMatchActionTable_request:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      - $ref: '#/components/schemas/MatchActionTable'
    updatePipelineConfig_request:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      - $ref: '#/components/schemas/PipelineConfig'
    updateDeviceRoles_request:
      allOf:
      - $ref: '#/components/schemas/BaseRequest'
      - $ref: '#/components/schemas/RoleUpdateMessage'
    HealthStatusMessage_allOf_components:
      example: "{\"database\":\"healthy\",\"api\":\"healthy\",\"telemetry\":\"healthy\"\
        }"
      properties:
        database:
          enum:
          - healthy
          - degraded
          - unhealthy
          example: healthy
          type: string
        api:
          enum:
          - healthy
          - degraded
          - unhealthy
          example: healthy
          type: string
        telemetry:
          enum:
          - healthy
          - degraded
          - unhealthy
          example: healthy
          type: string
      type: object
    HealthStatusMessage_allOf_metrics:
      example: "{\"activeConnections\":42,\"cpuUsage\":25.5,\"memoryUsage\":60.2}"
      properties:
        activeConnections:
          example: 42
          type: integer
        cpuUsage:
          example: 25.5
          type: number
        memoryUsage:
          example: 60.2
          type: number
      type: object
    EventNotificationMessage_allOf_source:
      example: "{\"deviceId\":\"switch-01\",\"component\":\"interface\"}"
      properties:
        deviceId:
          example: switch-01
          type: string
        component:
          example: interface
          type: string
      required:
      - deviceId
      type: object
    CapabilityQueryResponse_allOf_constraints:
      properties:
        maxFlowEntries:
          type: integer
        maxTables:
          type: integer
        maxVlans:
          type: integer
      type: object
    NetworkDiscoveryResponseMessage_allOf_topology_links:
      properties:
        source:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        target:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        type:
          type: string
      type: object
    NetworkDiscoveryResponseMessage_allOf_topology:
      description: Network topology information
      properties:
        links:
          items:
            $ref: '#/components/schemas/NetworkDiscoveryResponseMessage_allOf_topology_links'
          type: array
      type: object
    DeviceSettings_ntpServers_inner:
      anyOf:
      - $ref: '#/components/schemas/IPAddress'
      - $ref: '#/components/schemas/Hostname'
    DeviceSettings_dnsSettings:
      description: DNS configuration
      example:
        servers:
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        domain: domain
        searchDomains:
        - searchDomains
        - searchDomains
      properties:
        servers:
          items:
            $ref: '#/components/schemas/IPAddress'
          type: array
        domain:
          type: string
        searchDomains:
          items:
            type: string
          type: array
      type: object
    DeviceConfigUpdateMessage_allOf_config_interfaces:
      allOf:
      - $ref: '#/components/schemas/NetworkInterface'
      - $ref: '#/components/schemas/IPConfig'
      example:
        autoconfig: false
        description: Uplink to Core Switch
        type: ethernet
        enabled: true
        speed: 10Gbps
        mac: 00:1A:2B:3C:4D:5E
        mtu: 1500
        secondary:
        - address: 192.168.1.2
          prefixLength: 24
        virtualIPs:
        - address: 192.168.1.3
          prefixLength: 24
        name: eth0
        adminState: enabled
        state: up
        dhcp: false
        primary:
          ipv4:
            value:
              address: 192.168.1.0
              prefixLength: 24
          ipv6:
            value:
              address: '2001:db8::'
              prefixLength: 64
    DeviceConfigUpdateMessage_allOf_config:
      example:
        interfaces:
          key:
            autoconfig: false
            description: Uplink to Core Switch
            type: ethernet
            enabled: true
            speed: 10Gbps
            mac: 00:1A:2B:3C:4D:5E
            mtu: 1500
            secondary:
            - address: 192.168.1.2
              prefixLength: 24
            virtualIPs:
            - address: 192.168.1.3
              prefixLength: 24
            name: eth0
            adminState: enabled
            state: up
            dhcp: false
            primary:
              ipv4:
                value:
                  address: 192.168.1.0
                  prefixLength: 24
              ipv6:
                value:
                  address: '2001:db8::'
                  prefixLength: 64
        deviceSettings:
          hostname: hostname
          snmpCommunity: snmpCommunity
          managementIp: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
            :\"2001:db8::1\"}}"
          dnsSettings:
            servers:
            - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
              }}"
            - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
              }}"
            domain: domain
            searchDomains:
            - searchDomains
            - searchDomains
          syslogServers:
          - null
          - null
          ntpServers:
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          - "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          type: DEVICE_INFO_REQUEST
          deviceId: deviceId
          timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        deviceSettings:
          $ref: '#/components/schemas/DeviceSettings'
        interfaces:
          additionalProperties:
            $ref: '#/components/schemas/DeviceConfigUpdateMessage_allOf_config_interfaces'
          type: object
      required:
      - deviceSettings
      type: object
    PortConfig_allOf_stormControl:
      description: Storm control settings
      example:
        broadcast: 2
        unicast: 9
        multicast: 7
      properties:
        broadcast:
          type: integer
        multicast:
          type: integer
        unicast:
          type: integer
      type: object
    PortConfig_allOf_portSecurity:
      description: Port security settings
      example:
        maxMacAddresses: 3
        violationAction: protect
        enabled: true
      properties:
        enabled:
          type: boolean
        maxMacAddresses:
          type: integer
        violationAction:
          enum:
          - protect
          - restrict
          - shutdown
          type: string
      type: object
    VLAN_ports:
      example:
        untagged:
        - name: eth0
          adminState: enabled
          description: Uplink to Core Switch
          state: up
          type: ethernet
          enabled: true
          speed: 10Gbps
          mac: 00:1A:2B:3C:4D:5E
          mtu: 1500
        - name: eth0
          adminState: enabled
          description: Uplink to Core Switch
          state: up
          type: ethernet
          enabled: true
          speed: 10Gbps
          mac: 00:1A:2B:3C:4D:5E
          mtu: 1500
        tagged:
        - name: eth0
          adminState: enabled
          description: Uplink to Core Switch
          state: up
          type: ethernet
          enabled: true
          speed: 10Gbps
          mac: 00:1A:2B:3C:4D:5E
          mtu: 1500
        - name: eth0
          adminState: enabled
          description: Uplink to Core Switch
          state: up
          type: ethernet
          enabled: true
          speed: 10Gbps
          mac: 00:1A:2B:3C:4D:5E
          mtu: 1500
      properties:
        untagged:
          items:
            $ref: '#/components/schemas/NetworkInterface'
          type: array
        tagged:
          items:
            $ref: '#/components/schemas/NetworkInterface'
          type: array
      type: object
    VLAN_qos:
      description: QoS settings for the VLAN
      example:
        dscp: 7
        bandwidthLimit: 4
        priority: 2
      properties:
        priority:
          type: integer
        bandwidthLimit:
          type: integer
        dscp:
          type: integer
      type: object
    ACL_allOf_statistics:
      example: "{\"totalHits\":5280,\"lastUpdated\":\"2023-10-01T12:05:00Z\"}"
      properties:
        totalHits:
          description: Total number of hits across all rules
          example: 5280
          type: integer
        lastUpdated:
          description: Timestamp of the last statistics update
          example: 2023-10-01T12:05:00Z
          format: date-time
          type: string
      type: object
    RoutingConfig_bgp:
      example:
        routerId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        neighbors:
        - timers:
            keepalive: 2
            holdTime: 4
          address: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          remoteAs: 3
          localAddress: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
            :\"2001:db8::1\"}}"
          description: description
        - timers:
            keepalive: 2
            holdTime: 4
          address: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          remoteAs: 3
          localAddress: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\"\
            :\"2001:db8::1\"}}"
          description: description
        asNumber: 9
      properties:
        asNumber:
          type: integer
        routerId:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        neighbors:
          items:
            $ref: '#/components/schemas/BGPNeighbor'
          type: array
      type: object
    RoutingConfig_ospf_areas_inner:
      example:
        interfaces:
        - interfaces
        - interfaces
        areaId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        type: normal
      properties:
        areaId:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        type:
          enum:
          - normal
          - stub
          - nssa
          - totally-stub
          type: string
        interfaces:
          items:
            type: string
          type: array
      required:
      - areaId
      type: object
    RoutingConfig_ospf:
      example:
        processId: 7
        routerId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
          }}"
        areas:
        - interfaces:
          - interfaces
          - interfaces
          areaId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          type: normal
        - interfaces:
          - interfaces
          - interfaces
          areaId: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          type: normal
      properties:
        processId:
          type: integer
        routerId:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        areas:
          items:
            $ref: '#/components/schemas/RoutingConfig_ospf_areas_inner'
          type: array
      type: object
    TelemetryMessage_device:
      properties:
        deviceId:
          type: string
        deviceRoles:
          items:
            type: string
          type: array
      required:
      - deviceId
      - deviceRoles
      type: object
    TelemetryMessage_metrics:
      properties:
        packetCount:
          type: integer
        errorCount:
          type: integer
        deviceSpecificMetrics:
          $ref: '#/components/schemas/DeviceMetrics'
        timestamp:
          format: date-time
          type: string
        interval:
          type: integer
        sequence:
          type: integer
      required:
      - errorCount
      - packetCount
      type: object
    StateQueryResponseMessage_allOf_data:
      type: object
    Capabilities_hardwareCapabilities:
      properties:
        tcamSize:
          type: integer
        bufferSize:
          type: integer
        forwardingCapacity:
          type: string
      type: object
    DiscoveredNeighbor_connectionDetails:
      description: Connection information
      properties:
        localPort:
          type: string
        remotePort:
          type: string
        linkType:
          type: string
        localAddress:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
        remoteAddress:
          description: Represents either an IPv4 or IPv6 address
          example: "{\"ipv4\":{\"value\":\"192.168.1.1\"},\"ipv6\":{\"value\":\"2001:db8::1\"\
            }}"
          format: ip
          type: string
      type: object
    NetworkDiscoveryOptions_filters:
      description: Discovery filters
      properties:
        deviceTypes:
          items:
            $ref: '#/components/schemas/DeviceRoleEnum'
          type: array
        subnets:
          items:
            type: string
          type: array
      type: object
    NetworkTopology_links_inner:
      properties:
        source:
          description: Source device ID
          type: string
        target:
          description: Target device ID
          type: string
        sourcePort:
          description: Source port name
          type: string
        targetPort:
          description: Target port name
          type: string
        linkType:
          description: Type of link
          type: string
        discoveryProtocol:
          description: Protocol used to discover this link
          enum:
          - lldp
          - cdp
          - fdb
          - bgp_neighbors
          type: string
      required:
      - source
      - target
      type: object
    ACLAction_ratelimit:
      example:
        rate: 1000
        burst: 100
      properties:
        rate:
          description: Rate limit in packets per second
          example: 1000
          type: integer
        burst:
          description: Burst size in packets
          example: 100
          type: integer
      type: object
    ACLAction_redirect:
      example:
        interface: eth1
        nextHop: 192.168.2.1
      properties:
        interface:
          description: Interface to redirect traffic to
          example: eth1
          type: string
        nextHop:
          description: Next hop IP address
          example: 192.168.2.1
          type: string
      type: object
    ACLAction_logging:
      example:
        enabled: true
        level: info
      properties:
        enabled:
          description: Enable logging for this rule
          example: true
          type: boolean
        level:
          description: Logging level
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          example: info
          type: string
      type: object
    SwitchFeatures_stacking:
      example:
        role: master
        priority: 2
        enabled: true
      properties:
        enabled:
          type: boolean
        role:
          enum:
          - master
          - backup
          - member
          type: string
        priority:
          type: integer
      type: object
    SwitchFeatures_portChannels:
      example:
        maxGroups: 4
        supportedProtocols:
        - lacp
        - lacp
      properties:
        maxGroups:
          type: integer
        supportedProtocols:
          items:
            enum:
            - lacp
            - pagp
            - static
            type: string
          type: array
      type: object
    SwitchDeviceConfig_allOf_powerSupplies:
      example:
        id: id
        type: type
        status: status
      properties:
        id:
          type: string
        status:
          type: string
        type:
          type: string
      type: object
    SwitchDeviceConfig_allOf_fans:
      example:
        id: id
        speed: 7
        status: status
      properties:
        id:
          type: string
        status:
          type: string
        speed:
          type: integer
      type: object
    VLANProperties_stormControl:
      example:
        broadcast: 5
        unicast: 2
        multicast: 5
      properties:
        broadcast:
          type: integer
        multicast:
          type: integer
        unicast:
          type: integer
      type: object
    VLANSecurity_privateVlan:
      example:
        secondaryVlans:
        - 9
        - 9
        type: primary
        primaryVlan: 7
      properties:
        type:
          enum:
          - primary
          - isolated
          - community
          type: string
        primaryVlan:
          type: integer
        secondaryVlans:
          items:
            type: integer
          type: array
      type: object
    VLANSecurity_macLimiters:
      example:
        maxMacAddresses: 3
        violationAction: protect
      properties:
        maxMacAddresses:
          type: integer
        violationAction:
          enum:
          - protect
          - restrict
          - shutdown
          type: string
      type: object
    RouteEntry_bfd:
      example:
        multiplier: 7
        minTx: 5
        minRx: 2
        enabled: true
      properties:
        enabled:
          type: boolean
        minTx:
          type: integer
        minRx:
          type: integer
        multiplier:
          type: integer
      type: object
    BGPNeighbor_timers:
      example:
        keepalive: 2
        holdTime: 4
      properties:
        keepalive:
          type: integer
        holdTime:
          type: integer
      type: object
    QoSStats_queueStats_value:
      example:
        queueLength: 5.962133916683182
        bytes: 6.027456183070403
        dropped: 1.4658129805029452
        packets: 0.8008281904610115
      properties:
        packets:
          type: number
        bytes:
          type: number
        dropped:
          type: number
        queueLength:
          type: number
      type: object
    InterfaceStats_allOf_opticalStats:
      description: Optical interface statistics
      properties:
        rxPower:
          type: number
        txPower:
          type: number
        temperature:
          type: number
        voltage:
          type: number
        bias:
          type: number
      type: object
    InterfaceStats_allOf_rateStats:
      description: Rate-based statistics
      properties:
        inputRate:
          type: number
        outputRate:
          type: number
        inputPacketRate:
          type: number
        outputPacketRate:
          type: number
      type: object
    DeviceStatistics_opticalStats:
      description: Optical device statistics
      properties:
        rxPower:
          description: Received optical power
          type: number
        txPower:
          description: Transmitted optical power
          type: number
        temperature:
          description: Device temperature
          type: number
        voltage:
          description: Device voltage
          type: number
        bias:
          description: Device bias
          type: number
      type: object
    DeviceStatistics_rateStats:
      description: Rate-based device statistics
      properties:
        inputRate:
          description: Input rate
          type: number
        outputRate:
          description: Output rate
          type: number
        inputPacketRate:
          description: Input packet rate
          type: number
        outputPacketRate:
          description: Output packet rate
          type: number
      type: object
    MeterStats_bands_inner:
      example:
        rate: 1.4658129805029452
        packetCount: 5.637376656633329
        byteCount: 2.3021358869347655
        burstSize: 5.962133916683182
      properties:
        rate:
          description: Band rate
          type: number
        burstSize:
          description: Band burst size
          type: number
        packetCount:
          description: Number of packets processed by this band
          type: number
        byteCount:
          description: Number of bytes processed by this band
          type: number
      type: object
    ResourceMetrics_cpu:
      properties:
        usage:
          type: number
        load:
          type: number
        temperature:
          type: number
      type: object
    ResourceMetrics_memory:
      properties:
        total:
          type: number
        used:
          type: number
        free:
          type: number
        buffers:
          type: number
      type: object
    ResourceMetrics_storage:
      properties:
        total:
          type: number
        used:
          type: number
        free:
          type: number
      type: object
    EnvironmentalMetrics_temperature:
      properties:
        ambient:
          type: number
        components:
          additionalProperties:
            type: number
          type: object
      type: object
    EnvironmentalMetrics_power_sources_inner:
      properties:
        id:
          type: string
        status:
          type: string
        output:
          type: number
      type: object
    EnvironmentalMetrics_power:
      properties:
        consumption:
          type: number
        efficiency:
          type: number
        sources:
          items:
            $ref: '#/components/schemas/EnvironmentalMetrics_power_sources_inner'
          type: array
      type: object
    EnvironmentalMetrics_fans_inner:
      properties:
        id:
          type: string
        speed:
          type: number
        status:
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: Will be deprecated in future
      in: header
      name: X-API-Key
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      description: will be deprecated in future
      scheme: bearer
      type: http
    unassignedAuth:
      description: API key for unassigned role - Fix this
      in: header
      name: X-API-Key
      type: apiKey
    coreAuth:
      description: API key for core role
      in: header
      name: X-API-Key
      type: apiKey
    configAuth:
      description: API key for config role
      in: header
      name: X-API-Key
      type: apiKey
    telemetryAuth:
      description: API key for telemetry role
      in: header
      name: X-API-Key
      type: apiKey
    operationsAuth:
      description: API key for operations role
      in: header
      name: X-API-Key
      type: apiKey
    OAuth2:
      flows:
        clientCredentials:
          scopes:
            h3net:all: Full access to all API endpoints
          tokenUrl: /oauth/token
      type: oauth2
x-idempotency:
  retryStrategy:
    maxRetries: 3
    initialDelayMs: 1000
    maxDelayMs: 5000
    backoffMultiplier: 2
    retryableStatusCodes:
    - 408
    - 429
    - 500
    - 502
    - 503
    - 504
  keyTTLSeconds: 86400
  conflictHandling: return-original-response
