/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the RouteEntryBfd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteEntryBfd{}

// RouteEntryBfd struct for RouteEntryBfd
type RouteEntryBfd struct {
	Enabled *bool `json:"enabled,omitempty"`
	MinTx *int32 `json:"minTx,omitempty"`
	MinRx *int32 `json:"minRx,omitempty"`
	Multiplier *int32 `json:"multiplier,omitempty"`
}

// NewRouteEntryBfd instantiates a new RouteEntryBfd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteEntryBfd() *RouteEntryBfd {
	this := RouteEntryBfd{}
	return &this
}

// NewRouteEntryBfdWithDefaults instantiates a new RouteEntryBfd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteEntryBfdWithDefaults() *RouteEntryBfd {
	this := RouteEntryBfd{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RouteEntryBfd) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntryBfd) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RouteEntryBfd) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RouteEntryBfd) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMinTx returns the MinTx field value if set, zero value otherwise.
func (o *RouteEntryBfd) GetMinTx() int32 {
	if o == nil || IsNil(o.MinTx) {
		var ret int32
		return ret
	}
	return *o.MinTx
}

// GetMinTxOk returns a tuple with the MinTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntryBfd) GetMinTxOk() (*int32, bool) {
	if o == nil || IsNil(o.MinTx) {
		return nil, false
	}
	return o.MinTx, true
}

// HasMinTx returns a boolean if a field has been set.
func (o *RouteEntryBfd) HasMinTx() bool {
	if o != nil && !IsNil(o.MinTx) {
		return true
	}

	return false
}

// SetMinTx gets a reference to the given int32 and assigns it to the MinTx field.
func (o *RouteEntryBfd) SetMinTx(v int32) {
	o.MinTx = &v
}

// GetMinRx returns the MinRx field value if set, zero value otherwise.
func (o *RouteEntryBfd) GetMinRx() int32 {
	if o == nil || IsNil(o.MinRx) {
		var ret int32
		return ret
	}
	return *o.MinRx
}

// GetMinRxOk returns a tuple with the MinRx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntryBfd) GetMinRxOk() (*int32, bool) {
	if o == nil || IsNil(o.MinRx) {
		return nil, false
	}
	return o.MinRx, true
}

// HasMinRx returns a boolean if a field has been set.
func (o *RouteEntryBfd) HasMinRx() bool {
	if o != nil && !IsNil(o.MinRx) {
		return true
	}

	return false
}

// SetMinRx gets a reference to the given int32 and assigns it to the MinRx field.
func (o *RouteEntryBfd) SetMinRx(v int32) {
	o.MinRx = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *RouteEntryBfd) GetMultiplier() int32 {
	if o == nil || IsNil(o.Multiplier) {
		var ret int32
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEntryBfd) GetMultiplierOk() (*int32, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *RouteEntryBfd) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given int32 and assigns it to the Multiplier field.
func (o *RouteEntryBfd) SetMultiplier(v int32) {
	o.Multiplier = &v
}

func (o RouteEntryBfd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteEntryBfd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MinTx) {
		toSerialize["minTx"] = o.MinTx
	}
	if !IsNil(o.MinRx) {
		toSerialize["minRx"] = o.MinRx
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	return toSerialize, nil
}

type NullableRouteEntryBfd struct {
	value *RouteEntryBfd
	isSet bool
}

func (v NullableRouteEntryBfd) Get() *RouteEntryBfd {
	return v.value
}

func (v *NullableRouteEntryBfd) Set(val *RouteEntryBfd) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteEntryBfd) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteEntryBfd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteEntryBfd(val *RouteEntryBfd) *NullableRouteEntryBfd {
	return &NullableRouteEntryBfd{value: val, isSet: true}
}

func (v NullableRouteEntryBfd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteEntryBfd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


