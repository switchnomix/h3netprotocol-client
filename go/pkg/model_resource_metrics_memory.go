/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ResourceMetricsMemory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceMetricsMemory{}

// ResourceMetricsMemory struct for ResourceMetricsMemory
type ResourceMetricsMemory struct {
	Total *float32 `json:"total,omitempty"`
	Used *float32 `json:"used,omitempty"`
	Free *float32 `json:"free,omitempty"`
	Buffers *float32 `json:"buffers,omitempty"`
}

// NewResourceMetricsMemory instantiates a new ResourceMetricsMemory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceMetricsMemory() *ResourceMetricsMemory {
	this := ResourceMetricsMemory{}
	return &this
}

// NewResourceMetricsMemoryWithDefaults instantiates a new ResourceMetricsMemory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceMetricsMemoryWithDefaults() *ResourceMetricsMemory {
	this := ResourceMetricsMemory{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ResourceMetricsMemory) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsMemory) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ResourceMetricsMemory) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *ResourceMetricsMemory) SetTotal(v float32) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *ResourceMetricsMemory) GetUsed() float32 {
	if o == nil || IsNil(o.Used) {
		var ret float32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsMemory) GetUsedOk() (*float32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *ResourceMetricsMemory) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given float32 and assigns it to the Used field.
func (o *ResourceMetricsMemory) SetUsed(v float32) {
	o.Used = &v
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *ResourceMetricsMemory) GetFree() float32 {
	if o == nil || IsNil(o.Free) {
		var ret float32
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsMemory) GetFreeOk() (*float32, bool) {
	if o == nil || IsNil(o.Free) {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *ResourceMetricsMemory) HasFree() bool {
	if o != nil && !IsNil(o.Free) {
		return true
	}

	return false
}

// SetFree gets a reference to the given float32 and assigns it to the Free field.
func (o *ResourceMetricsMemory) SetFree(v float32) {
	o.Free = &v
}

// GetBuffers returns the Buffers field value if set, zero value otherwise.
func (o *ResourceMetricsMemory) GetBuffers() float32 {
	if o == nil || IsNil(o.Buffers) {
		var ret float32
		return ret
	}
	return *o.Buffers
}

// GetBuffersOk returns a tuple with the Buffers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsMemory) GetBuffersOk() (*float32, bool) {
	if o == nil || IsNil(o.Buffers) {
		return nil, false
	}
	return o.Buffers, true
}

// HasBuffers returns a boolean if a field has been set.
func (o *ResourceMetricsMemory) HasBuffers() bool {
	if o != nil && !IsNil(o.Buffers) {
		return true
	}

	return false
}

// SetBuffers gets a reference to the given float32 and assigns it to the Buffers field.
func (o *ResourceMetricsMemory) SetBuffers(v float32) {
	o.Buffers = &v
}

func (o ResourceMetricsMemory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceMetricsMemory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.Free) {
		toSerialize["free"] = o.Free
	}
	if !IsNil(o.Buffers) {
		toSerialize["buffers"] = o.Buffers
	}
	return toSerialize, nil
}

type NullableResourceMetricsMemory struct {
	value *ResourceMetricsMemory
	isSet bool
}

func (v NullableResourceMetricsMemory) Get() *ResourceMetricsMemory {
	return v.value
}

func (v *NullableResourceMetricsMemory) Set(val *ResourceMetricsMemory) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceMetricsMemory) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceMetricsMemory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceMetricsMemory(val *ResourceMetricsMemory) *NullableResourceMetricsMemory {
	return &NullableResourceMetricsMemory{value: val, isSet: true}
}

func (v NullableResourceMetricsMemory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceMetricsMemory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


