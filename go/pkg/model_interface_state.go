/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"fmt"
)

// InterfaceState Interface operational states as per IF-MIB
type InterfaceState string

// List of InterfaceState
const (
	INTERFACESTATE_UP InterfaceState = "up"
	INTERFACESTATE_DOWN InterfaceState = "down"
	INTERFACESTATE_TESTING InterfaceState = "testing"
	INTERFACESTATE_UNKNOWN InterfaceState = "unknown"
	INTERFACESTATE_DORMANT InterfaceState = "dormant"
	INTERFACESTATE_NOT_PRESENT InterfaceState = "notPresent"
	INTERFACESTATE_LOWER_LAYER_DOWN InterfaceState = "lowerLayerDown"
)

// All allowed values of InterfaceState enum
var AllowedInterfaceStateEnumValues = []InterfaceState{
	"up",
	"down",
	"testing",
	"unknown",
	"dormant",
	"notPresent",
	"lowerLayerDown",
}

func (v *InterfaceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceState(value)
	for _, existing := range AllowedInterfaceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceState", value)
}

// NewInterfaceStateFromValue returns a pointer to a valid InterfaceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceStateFromValue(v string) (*InterfaceState, error) {
	ev := InterfaceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceState: valid values are %v", v, AllowedInterfaceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceState) IsValid() bool {
	for _, existing := range AllowedInterfaceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceState value
func (v InterfaceState) Ptr() *InterfaceState {
	return &v
}

type NullableInterfaceState struct {
	value *InterfaceState
	isSet bool
}

func (v NullableInterfaceState) Get() *InterfaceState {
	return v.value
}

func (v *NullableInterfaceState) Set(val *InterfaceState) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceState) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceState(val *InterfaceState) *NullableInterfaceState {
	return &NullableInterfaceState{value: val, isSet: true}
}

func (v NullableInterfaceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

