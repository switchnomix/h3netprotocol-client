/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ACLRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACLRule{}

// ACLRule ACL rule definition
type ACLRule struct {
	// Unique identifier for the rule
	RuleId int32 `json:"ruleId"`
	// Human-readable description of the rule
	Description *string `json:"description,omitempty"`
	Matches ACLMatch `json:"matches"`
	Actions ACLAction `json:"actions"`
	// Whether the rule is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Number of times this rule has been matched
	HitCount *int32 `json:"hitCount,omitempty"`
	// Timestamp of the last match
	LastHit *time.Time `json:"lastHit,omitempty"`
}

type _ACLRule ACLRule

// NewACLRule instantiates a new ACLRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLRule(ruleId int32, matches ACLMatch, actions ACLAction) *ACLRule {
	this := ACLRule{}
	this.RuleId = ruleId
	this.Matches = matches
	this.Actions = actions
	return &this
}

// NewACLRuleWithDefaults instantiates a new ACLRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLRuleWithDefaults() *ACLRule {
	this := ACLRule{}
	return &this
}

// GetRuleId returns the RuleId field value
func (o *ACLRule) GetRuleId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *ACLRule) GetRuleIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *ACLRule) SetRuleId(v int32) {
	o.RuleId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ACLRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ACLRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ACLRule) SetDescription(v string) {
	o.Description = &v
}

// GetMatches returns the Matches field value
func (o *ACLRule) GetMatches() ACLMatch {
	if o == nil {
		var ret ACLMatch
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *ACLRule) GetMatchesOk() (*ACLMatch, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Matches, true
}

// SetMatches sets field value
func (o *ACLRule) SetMatches(v ACLMatch) {
	o.Matches = v
}

// GetActions returns the Actions field value
func (o *ACLRule) GetActions() ACLAction {
	if o == nil {
		var ret ACLAction
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *ACLRule) GetActionsOk() (*ACLAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actions, true
}

// SetActions sets field value
func (o *ACLRule) SetActions(v ACLAction) {
	o.Actions = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ACLRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ACLRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ACLRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHitCount returns the HitCount field value if set, zero value otherwise.
func (o *ACLRule) GetHitCount() int32 {
	if o == nil || IsNil(o.HitCount) {
		var ret int32
		return ret
	}
	return *o.HitCount
}

// GetHitCountOk returns a tuple with the HitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLRule) GetHitCountOk() (*int32, bool) {
	if o == nil || IsNil(o.HitCount) {
		return nil, false
	}
	return o.HitCount, true
}

// HasHitCount returns a boolean if a field has been set.
func (o *ACLRule) HasHitCount() bool {
	if o != nil && !IsNil(o.HitCount) {
		return true
	}

	return false
}

// SetHitCount gets a reference to the given int32 and assigns it to the HitCount field.
func (o *ACLRule) SetHitCount(v int32) {
	o.HitCount = &v
}

// GetLastHit returns the LastHit field value if set, zero value otherwise.
func (o *ACLRule) GetLastHit() time.Time {
	if o == nil || IsNil(o.LastHit) {
		var ret time.Time
		return ret
	}
	return *o.LastHit
}

// GetLastHitOk returns a tuple with the LastHit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLRule) GetLastHitOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastHit) {
		return nil, false
	}
	return o.LastHit, true
}

// HasLastHit returns a boolean if a field has been set.
func (o *ACLRule) HasLastHit() bool {
	if o != nil && !IsNil(o.LastHit) {
		return true
	}

	return false
}

// SetLastHit gets a reference to the given time.Time and assigns it to the LastHit field.
func (o *ACLRule) SetLastHit(v time.Time) {
	o.LastHit = &v
}

func (o ACLRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACLRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ruleId"] = o.RuleId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["matches"] = o.Matches
	toSerialize["actions"] = o.Actions
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.HitCount) {
		toSerialize["hitCount"] = o.HitCount
	}
	if !IsNil(o.LastHit) {
		toSerialize["lastHit"] = o.LastHit
	}
	return toSerialize, nil
}

func (o *ACLRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ruleId",
		"matches",
		"actions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varACLRule := _ACLRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varACLRule)

	if err != nil {
		return err
	}

	*o = ACLRule(varACLRule)

	return err
}

type NullableACLRule struct {
	value *ACLRule
	isSet bool
}

func (v NullableACLRule) Get() *ACLRule {
	return v.value
}

func (v *NullableACLRule) Set(val *ACLRule) {
	v.value = val
	v.isSet = true
}

func (v NullableACLRule) IsSet() bool {
	return v.isSet
}

func (v *NullableACLRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLRule(val *ACLRule) *NullableACLRule {
	return &NullableACLRule{value: val, isSet: true}
}

func (v NullableACLRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


