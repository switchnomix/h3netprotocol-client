/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RebootCommandMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RebootCommandMessage{}

// RebootCommandMessage struct for RebootCommandMessage
type RebootCommandMessage struct {
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	Device Device `json:"device"`
	Force *bool `json:"force,omitempty"`
	// Optional scheduled time for reboot
	ScheduledTime *time.Time `json:"scheduledTime,omitempty"`
}

type _RebootCommandMessage RebootCommandMessage

// NewRebootCommandMessage instantiates a new RebootCommandMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebootCommandMessage(type_ string, timestamp time.Time, schemaVersion string, device Device) *RebootCommandMessage {
	this := RebootCommandMessage{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.Device = device
	return &this
}

// NewRebootCommandMessageWithDefaults instantiates a new RebootCommandMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebootCommandMessageWithDefaults() *RebootCommandMessage {
	this := RebootCommandMessage{}
	return &this
}

// GetType returns the Type field value
func (o *RebootCommandMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RebootCommandMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RebootCommandMessage) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *RebootCommandMessage) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *RebootCommandMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *RebootCommandMessage) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *RebootCommandMessage) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *RebootCommandMessage) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *RebootCommandMessage) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetDevice returns the Device field value
func (o *RebootCommandMessage) GetDevice() Device {
	if o == nil {
		var ret Device
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *RebootCommandMessage) GetDeviceOk() (*Device, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *RebootCommandMessage) SetDevice(v Device) {
	o.Device = v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *RebootCommandMessage) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebootCommandMessage) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *RebootCommandMessage) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *RebootCommandMessage) SetForce(v bool) {
	o.Force = &v
}

// GetScheduledTime returns the ScheduledTime field value if set, zero value otherwise.
func (o *RebootCommandMessage) GetScheduledTime() time.Time {
	if o == nil || IsNil(o.ScheduledTime) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledTime
}

// GetScheduledTimeOk returns a tuple with the ScheduledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebootCommandMessage) GetScheduledTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledTime) {
		return nil, false
	}
	return o.ScheduledTime, true
}

// HasScheduledTime returns a boolean if a field has been set.
func (o *RebootCommandMessage) HasScheduledTime() bool {
	if o != nil && !IsNil(o.ScheduledTime) {
		return true
	}

	return false
}

// SetScheduledTime gets a reference to the given time.Time and assigns it to the ScheduledTime field.
func (o *RebootCommandMessage) SetScheduledTime(v time.Time) {
	o.ScheduledTime = &v
}

func (o RebootCommandMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RebootCommandMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["device"] = o.Device
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	if !IsNil(o.ScheduledTime) {
		toSerialize["scheduledTime"] = o.ScheduledTime
	}
	return toSerialize, nil
}

func (o *RebootCommandMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"device",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRebootCommandMessage := _RebootCommandMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRebootCommandMessage)

	if err != nil {
		return err
	}

	*o = RebootCommandMessage(varRebootCommandMessage)

	return err
}

type NullableRebootCommandMessage struct {
	value *RebootCommandMessage
	isSet bool
}

func (v NullableRebootCommandMessage) Get() *RebootCommandMessage {
	return v.value
}

func (v *NullableRebootCommandMessage) Set(val *RebootCommandMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableRebootCommandMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableRebootCommandMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebootCommandMessage(val *RebootCommandMessage) *NullableRebootCommandMessage {
	return &NullableRebootCommandMessage{value: val, isSet: true}
}

func (v NullableRebootCommandMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebootCommandMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


