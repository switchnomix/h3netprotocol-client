/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the Ports type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ports{}

// Ports struct for Ports
type Ports struct {
	Untagged []NetworkInterface `json:"untagged,omitempty"`
	Tagged []NetworkInterface `json:"tagged,omitempty"`
}

// NewPorts instantiates a new Ports object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPorts() *Ports {
	this := Ports{}
	return &this
}

// NewPortsWithDefaults instantiates a new Ports object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortsWithDefaults() *Ports {
	this := Ports{}
	return &this
}

// GetUntagged returns the Untagged field value if set, zero value otherwise.
func (o *Ports) GetUntagged() []NetworkInterface {
	if o == nil || IsNil(o.Untagged) {
		var ret []NetworkInterface
		return ret
	}
	return o.Untagged
}

// GetUntaggedOk returns a tuple with the Untagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ports) GetUntaggedOk() ([]NetworkInterface, bool) {
	if o == nil || IsNil(o.Untagged) {
		return nil, false
	}
	return o.Untagged, true
}

// HasUntagged returns a boolean if a field has been set.
func (o *Ports) HasUntagged() bool {
	if o != nil && !IsNil(o.Untagged) {
		return true
	}

	return false
}

// SetUntagged gets a reference to the given []NetworkInterface and assigns it to the Untagged field.
func (o *Ports) SetUntagged(v []NetworkInterface) {
	o.Untagged = v
}

// GetTagged returns the Tagged field value if set, zero value otherwise.
func (o *Ports) GetTagged() []NetworkInterface {
	if o == nil || IsNil(o.Tagged) {
		var ret []NetworkInterface
		return ret
	}
	return o.Tagged
}

// GetTaggedOk returns a tuple with the Tagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ports) GetTaggedOk() ([]NetworkInterface, bool) {
	if o == nil || IsNil(o.Tagged) {
		return nil, false
	}
	return o.Tagged, true
}

// HasTagged returns a boolean if a field has been set.
func (o *Ports) HasTagged() bool {
	if o != nil && !IsNil(o.Tagged) {
		return true
	}

	return false
}

// SetTagged gets a reference to the given []NetworkInterface and assigns it to the Tagged field.
func (o *Ports) SetTagged(v []NetworkInterface) {
	o.Tagged = v
}

func (o Ports) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ports) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Untagged) {
		toSerialize["untagged"] = o.Untagged
	}
	if !IsNil(o.Tagged) {
		toSerialize["tagged"] = o.Tagged
	}
	return toSerialize, nil
}

type NullablePorts struct {
	value *Ports
	isSet bool
}

func (v NullablePorts) Get() *Ports {
	return v.value
}

func (v *NullablePorts) Set(val *Ports) {
	v.value = val
	v.isSet = true
}

func (v NullablePorts) IsSet() bool {
	return v.isSet
}

func (v *NullablePorts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePorts(val *Ports) *NullablePorts {
	return &NullablePorts{value: val, isSet: true}
}

func (v NullablePorts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePorts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


