/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the SwitchFeaturesStacking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchFeaturesStacking{}

// SwitchFeaturesStacking struct for SwitchFeaturesStacking
type SwitchFeaturesStacking struct {
	Enabled *bool `json:"enabled,omitempty"`
	Role *string `json:"role,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
}

// NewSwitchFeaturesStacking instantiates a new SwitchFeaturesStacking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchFeaturesStacking() *SwitchFeaturesStacking {
	this := SwitchFeaturesStacking{}
	return &this
}

// NewSwitchFeaturesStackingWithDefaults instantiates a new SwitchFeaturesStacking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchFeaturesStackingWithDefaults() *SwitchFeaturesStacking {
	this := SwitchFeaturesStacking{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SwitchFeaturesStacking) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchFeaturesStacking) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SwitchFeaturesStacking) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SwitchFeaturesStacking) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *SwitchFeaturesStacking) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchFeaturesStacking) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *SwitchFeaturesStacking) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *SwitchFeaturesStacking) SetRole(v string) {
	o.Role = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *SwitchFeaturesStacking) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchFeaturesStacking) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *SwitchFeaturesStacking) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *SwitchFeaturesStacking) SetPriority(v int32) {
	o.Priority = &v
}

func (o SwitchFeaturesStacking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchFeaturesStacking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableSwitchFeaturesStacking struct {
	value *SwitchFeaturesStacking
	isSet bool
}

func (v NullableSwitchFeaturesStacking) Get() *SwitchFeaturesStacking {
	return v.value
}

func (v *NullableSwitchFeaturesStacking) Set(val *SwitchFeaturesStacking) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchFeaturesStacking) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchFeaturesStacking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchFeaturesStacking(val *SwitchFeaturesStacking) *NullableSwitchFeaturesStacking {
	return &NullableSwitchFeaturesStacking{value: val, isSet: true}
}

func (v NullableSwitchFeaturesStacking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchFeaturesStacking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


