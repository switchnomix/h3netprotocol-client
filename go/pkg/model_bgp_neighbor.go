/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BGPNeighbor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BGPNeighbor{}

// BGPNeighbor struct for BGPNeighbor
type BGPNeighbor struct {
	// Represents either an IPv4 or IPv6 address
	Address string `json:"address"`
	RemoteAs int32 `json:"remoteAs"`
	Description *string `json:"description,omitempty"`
	// Represents either an IPv4 or IPv6 address
	LocalAddress *string `json:"localAddress,omitempty"`
	Timers *BGPNeighborTimers `json:"timers,omitempty"`
}

type _BGPNeighbor BGPNeighbor

// NewBGPNeighbor instantiates a new BGPNeighbor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBGPNeighbor(address string, remoteAs int32) *BGPNeighbor {
	this := BGPNeighbor{}
	this.Address = address
	this.RemoteAs = remoteAs
	return &this
}

// NewBGPNeighborWithDefaults instantiates a new BGPNeighbor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBGPNeighborWithDefaults() *BGPNeighbor {
	this := BGPNeighbor{}
	return &this
}

// GetAddress returns the Address field value
func (o *BGPNeighbor) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *BGPNeighbor) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *BGPNeighbor) SetAddress(v string) {
	o.Address = v
}

// GetRemoteAs returns the RemoteAs field value
func (o *BGPNeighbor) GetRemoteAs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RemoteAs
}

// GetRemoteAsOk returns a tuple with the RemoteAs field value
// and a boolean to check if the value has been set.
func (o *BGPNeighbor) GetRemoteAsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAs, true
}

// SetRemoteAs sets field value
func (o *BGPNeighbor) SetRemoteAs(v int32) {
	o.RemoteAs = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BGPNeighbor) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BGPNeighbor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BGPNeighbor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BGPNeighbor) SetDescription(v string) {
	o.Description = &v
}

// GetLocalAddress returns the LocalAddress field value if set, zero value otherwise.
func (o *BGPNeighbor) GetLocalAddress() string {
	if o == nil || IsNil(o.LocalAddress) {
		var ret string
		return ret
	}
	return *o.LocalAddress
}

// GetLocalAddressOk returns a tuple with the LocalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BGPNeighbor) GetLocalAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LocalAddress) {
		return nil, false
	}
	return o.LocalAddress, true
}

// HasLocalAddress returns a boolean if a field has been set.
func (o *BGPNeighbor) HasLocalAddress() bool {
	if o != nil && !IsNil(o.LocalAddress) {
		return true
	}

	return false
}

// SetLocalAddress gets a reference to the given string and assigns it to the LocalAddress field.
func (o *BGPNeighbor) SetLocalAddress(v string) {
	o.LocalAddress = &v
}

// GetTimers returns the Timers field value if set, zero value otherwise.
func (o *BGPNeighbor) GetTimers() BGPNeighborTimers {
	if o == nil || IsNil(o.Timers) {
		var ret BGPNeighborTimers
		return ret
	}
	return *o.Timers
}

// GetTimersOk returns a tuple with the Timers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BGPNeighbor) GetTimersOk() (*BGPNeighborTimers, bool) {
	if o == nil || IsNil(o.Timers) {
		return nil, false
	}
	return o.Timers, true
}

// HasTimers returns a boolean if a field has been set.
func (o *BGPNeighbor) HasTimers() bool {
	if o != nil && !IsNil(o.Timers) {
		return true
	}

	return false
}

// SetTimers gets a reference to the given BGPNeighborTimers and assigns it to the Timers field.
func (o *BGPNeighbor) SetTimers(v BGPNeighborTimers) {
	o.Timers = &v
}

func (o BGPNeighbor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BGPNeighbor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["remoteAs"] = o.RemoteAs
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LocalAddress) {
		toSerialize["localAddress"] = o.LocalAddress
	}
	if !IsNil(o.Timers) {
		toSerialize["timers"] = o.Timers
	}
	return toSerialize, nil
}

func (o *BGPNeighbor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"remoteAs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBGPNeighbor := _BGPNeighbor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBGPNeighbor)

	if err != nil {
		return err
	}

	*o = BGPNeighbor(varBGPNeighbor)

	return err
}

type NullableBGPNeighbor struct {
	value *BGPNeighbor
	isSet bool
}

func (v NullableBGPNeighbor) Get() *BGPNeighbor {
	return v.value
}

func (v *NullableBGPNeighbor) Set(val *BGPNeighbor) {
	v.value = val
	v.isSet = true
}

func (v NullableBGPNeighbor) IsSet() bool {
	return v.isSet
}

func (v *NullableBGPNeighbor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBGPNeighbor(val *BGPNeighbor) *NullableBGPNeighbor {
	return &NullableBGPNeighbor{value: val, isSet: true}
}

func (v NullableBGPNeighbor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBGPNeighbor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


