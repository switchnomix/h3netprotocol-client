/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ACLActionRatelimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACLActionRatelimit{}

// ACLActionRatelimit struct for ACLActionRatelimit
type ACLActionRatelimit struct {
	// Rate limit in packets per second
	Rate *int32 `json:"rate,omitempty"`
	// Burst size in packets
	Burst *int32 `json:"burst,omitempty"`
}

// NewACLActionRatelimit instantiates a new ACLActionRatelimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLActionRatelimit() *ACLActionRatelimit {
	this := ACLActionRatelimit{}
	return &this
}

// NewACLActionRatelimitWithDefaults instantiates a new ACLActionRatelimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLActionRatelimitWithDefaults() *ACLActionRatelimit {
	this := ACLActionRatelimit{}
	return &this
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *ACLActionRatelimit) GetRate() int32 {
	if o == nil || IsNil(o.Rate) {
		var ret int32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLActionRatelimit) GetRateOk() (*int32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *ACLActionRatelimit) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given int32 and assigns it to the Rate field.
func (o *ACLActionRatelimit) SetRate(v int32) {
	o.Rate = &v
}

// GetBurst returns the Burst field value if set, zero value otherwise.
func (o *ACLActionRatelimit) GetBurst() int32 {
	if o == nil || IsNil(o.Burst) {
		var ret int32
		return ret
	}
	return *o.Burst
}

// GetBurstOk returns a tuple with the Burst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLActionRatelimit) GetBurstOk() (*int32, bool) {
	if o == nil || IsNil(o.Burst) {
		return nil, false
	}
	return o.Burst, true
}

// HasBurst returns a boolean if a field has been set.
func (o *ACLActionRatelimit) HasBurst() bool {
	if o != nil && !IsNil(o.Burst) {
		return true
	}

	return false
}

// SetBurst gets a reference to the given int32 and assigns it to the Burst field.
func (o *ACLActionRatelimit) SetBurst(v int32) {
	o.Burst = &v
}

func (o ACLActionRatelimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACLActionRatelimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.Burst) {
		toSerialize["burst"] = o.Burst
	}
	return toSerialize, nil
}

type NullableACLActionRatelimit struct {
	value *ACLActionRatelimit
	isSet bool
}

func (v NullableACLActionRatelimit) Get() *ACLActionRatelimit {
	return v.value
}

func (v *NullableACLActionRatelimit) Set(val *ACLActionRatelimit) {
	v.value = val
	v.isSet = true
}

func (v NullableACLActionRatelimit) IsSet() bool {
	return v.isSet
}

func (v *NullableACLActionRatelimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLActionRatelimit(val *ACLActionRatelimit) *NullableACLActionRatelimit {
	return &NullableACLActionRatelimit{value: val, isSet: true}
}

func (v NullableACLActionRatelimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLActionRatelimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


