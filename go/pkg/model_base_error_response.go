/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BaseErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseErrorResponse{}

// BaseErrorResponse struct for BaseErrorResponse
type BaseErrorResponse struct {
	// Message type identifier
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	// Response status
	Status string `json:"status"`
	// Original request ID
	RequestId *string `json:"requestId,omitempty"`
	Error ErrorMessage `json:"error"`
	Errors []ErrorDetail `json:"errors,omitempty"`
}

type _BaseErrorResponse BaseErrorResponse

// NewBaseErrorResponse instantiates a new BaseErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseErrorResponse(type_ string, timestamp time.Time, schemaVersion string, status string, error_ ErrorMessage) *BaseErrorResponse {
	this := BaseErrorResponse{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.Status = status
	this.Error = error_
	return &this
}

// NewBaseErrorResponseWithDefaults instantiates a new BaseErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseErrorResponseWithDefaults() *BaseErrorResponse {
	this := BaseErrorResponse{}
	return &this
}

// GetType returns the Type field value
func (o *BaseErrorResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BaseErrorResponse) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *BaseErrorResponse) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BaseErrorResponse) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *BaseErrorResponse) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *BaseErrorResponse) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetStatus returns the Status field value
func (o *BaseErrorResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BaseErrorResponse) SetStatus(v string) {
	o.Status = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *BaseErrorResponse) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *BaseErrorResponse) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *BaseErrorResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetError returns the Error field value
func (o *BaseErrorResponse) GetError() ErrorMessage {
	if o == nil {
		var ret ErrorMessage
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetErrorOk() (*ErrorMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *BaseErrorResponse) SetError(v ErrorMessage) {
	o.Error = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *BaseErrorResponse) GetErrors() []ErrorDetail {
	if o == nil || IsNil(o.Errors) {
		var ret []ErrorDetail
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetErrorsOk() ([]ErrorDetail, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *BaseErrorResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorDetail and assigns it to the Errors field.
func (o *BaseErrorResponse) SetErrors(v []ErrorDetail) {
	o.Errors = v
}

func (o BaseErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["status"] = o.Status
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	toSerialize["error"] = o.Error
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *BaseErrorResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"status",
		"error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseErrorResponse := _BaseErrorResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseErrorResponse)

	if err != nil {
		return err
	}

	*o = BaseErrorResponse(varBaseErrorResponse)

	return err
}

type NullableBaseErrorResponse struct {
	value *BaseErrorResponse
	isSet bool
}

func (v NullableBaseErrorResponse) Get() *BaseErrorResponse {
	return v.value
}

func (v *NullableBaseErrorResponse) Set(val *BaseErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseErrorResponse(val *BaseErrorResponse) *NullableBaseErrorResponse {
	return &NullableBaseErrorResponse{value: val, isSet: true}
}

func (v NullableBaseErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


