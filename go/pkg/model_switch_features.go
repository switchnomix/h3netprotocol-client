/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the SwitchFeatures type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchFeatures{}

// SwitchFeatures Optional switch features and capabilities
type SwitchFeatures struct {
	Stacking *SwitchFeaturesStacking `json:"stacking,omitempty"`
	PortChannels *SwitchFeaturesPortChannels `json:"portChannels,omitempty"`
	SpanningTree *SpanningTreeConfig `json:"spanningTree,omitempty"`
}

// NewSwitchFeatures instantiates a new SwitchFeatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchFeatures() *SwitchFeatures {
	this := SwitchFeatures{}
	return &this
}

// NewSwitchFeaturesWithDefaults instantiates a new SwitchFeatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchFeaturesWithDefaults() *SwitchFeatures {
	this := SwitchFeatures{}
	return &this
}

// GetStacking returns the Stacking field value if set, zero value otherwise.
func (o *SwitchFeatures) GetStacking() SwitchFeaturesStacking {
	if o == nil || IsNil(o.Stacking) {
		var ret SwitchFeaturesStacking
		return ret
	}
	return *o.Stacking
}

// GetStackingOk returns a tuple with the Stacking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchFeatures) GetStackingOk() (*SwitchFeaturesStacking, bool) {
	if o == nil || IsNil(o.Stacking) {
		return nil, false
	}
	return o.Stacking, true
}

// HasStacking returns a boolean if a field has been set.
func (o *SwitchFeatures) HasStacking() bool {
	if o != nil && !IsNil(o.Stacking) {
		return true
	}

	return false
}

// SetStacking gets a reference to the given SwitchFeaturesStacking and assigns it to the Stacking field.
func (o *SwitchFeatures) SetStacking(v SwitchFeaturesStacking) {
	o.Stacking = &v
}

// GetPortChannels returns the PortChannels field value if set, zero value otherwise.
func (o *SwitchFeatures) GetPortChannels() SwitchFeaturesPortChannels {
	if o == nil || IsNil(o.PortChannels) {
		var ret SwitchFeaturesPortChannels
		return ret
	}
	return *o.PortChannels
}

// GetPortChannelsOk returns a tuple with the PortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchFeatures) GetPortChannelsOk() (*SwitchFeaturesPortChannels, bool) {
	if o == nil || IsNil(o.PortChannels) {
		return nil, false
	}
	return o.PortChannels, true
}

// HasPortChannels returns a boolean if a field has been set.
func (o *SwitchFeatures) HasPortChannels() bool {
	if o != nil && !IsNil(o.PortChannels) {
		return true
	}

	return false
}

// SetPortChannels gets a reference to the given SwitchFeaturesPortChannels and assigns it to the PortChannels field.
func (o *SwitchFeatures) SetPortChannels(v SwitchFeaturesPortChannels) {
	o.PortChannels = &v
}

// GetSpanningTree returns the SpanningTree field value if set, zero value otherwise.
func (o *SwitchFeatures) GetSpanningTree() SpanningTreeConfig {
	if o == nil || IsNil(o.SpanningTree) {
		var ret SpanningTreeConfig
		return ret
	}
	return *o.SpanningTree
}

// GetSpanningTreeOk returns a tuple with the SpanningTree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchFeatures) GetSpanningTreeOk() (*SpanningTreeConfig, bool) {
	if o == nil || IsNil(o.SpanningTree) {
		return nil, false
	}
	return o.SpanningTree, true
}

// HasSpanningTree returns a boolean if a field has been set.
func (o *SwitchFeatures) HasSpanningTree() bool {
	if o != nil && !IsNil(o.SpanningTree) {
		return true
	}

	return false
}

// SetSpanningTree gets a reference to the given SpanningTreeConfig and assigns it to the SpanningTree field.
func (o *SwitchFeatures) SetSpanningTree(v SpanningTreeConfig) {
	o.SpanningTree = &v
}

func (o SwitchFeatures) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchFeatures) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Stacking) {
		toSerialize["stacking"] = o.Stacking
	}
	if !IsNil(o.PortChannels) {
		toSerialize["portChannels"] = o.PortChannels
	}
	if !IsNil(o.SpanningTree) {
		toSerialize["spanningTree"] = o.SpanningTree
	}
	return toSerialize, nil
}

type NullableSwitchFeatures struct {
	value *SwitchFeatures
	isSet bool
}

func (v NullableSwitchFeatures) Get() *SwitchFeatures {
	return v.value
}

func (v *NullableSwitchFeatures) Set(val *SwitchFeatures) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchFeatures(val *SwitchFeatures) *NullableSwitchFeatures {
	return &NullableSwitchFeatures{value: val, isSet: true}
}

func (v NullableSwitchFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


