/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FlowEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowEntry{}

// FlowEntry struct for FlowEntry
type FlowEntry struct {
	Type *string `json:"type,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Device identifier
	DeviceId string `json:"deviceId"`
	// Table identifier
	TableId int32 `json:"tableId"`
	// Flow entry priority, higher values take precedence
	Priority int32 `json:"priority"`
	Match FlowMatch `json:"match"`
	Actions FlowAction `json:"actions"`
	// Identifier of the next table to evaluate if this entry matches
	NextTable *int32 `json:"nextTable,omitempty"`
	// Count of packets matched by this flow entry
	PacketCounter *int32 `json:"packetCounter,omitempty"`
	// Total bytes matched by this flow entry
	ByteCounter *int32 `json:"byteCounter,omitempty"`
}

type _FlowEntry FlowEntry

// NewFlowEntry instantiates a new FlowEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowEntry(deviceId string, tableId int32, priority int32, match FlowMatch, actions FlowAction) *FlowEntry {
	this := FlowEntry{}
	this.DeviceId = deviceId
	this.TableId = tableId
	this.Priority = priority
	this.Match = match
	this.Actions = actions
	return &this
}

// NewFlowEntryWithDefaults instantiates a new FlowEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowEntryWithDefaults() *FlowEntry {
	this := FlowEntry{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FlowEntry) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FlowEntry) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FlowEntry) SetType(v string) {
	o.Type = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *FlowEntry) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *FlowEntry) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *FlowEntry) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetDeviceId returns the DeviceId field value
func (o *FlowEntry) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *FlowEntry) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetTableId returns the TableId field value
func (o *FlowEntry) GetTableId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetTableIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableId, true
}

// SetTableId sets field value
func (o *FlowEntry) SetTableId(v int32) {
	o.TableId = v
}

// GetPriority returns the Priority field value
func (o *FlowEntry) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *FlowEntry) SetPriority(v int32) {
	o.Priority = v
}

// GetMatch returns the Match field value
func (o *FlowEntry) GetMatch() FlowMatch {
	if o == nil {
		var ret FlowMatch
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetMatchOk() (*FlowMatch, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *FlowEntry) SetMatch(v FlowMatch) {
	o.Match = v
}

// GetActions returns the Actions field value
func (o *FlowEntry) GetActions() FlowAction {
	if o == nil {
		var ret FlowAction
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetActionsOk() (*FlowAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actions, true
}

// SetActions sets field value
func (o *FlowEntry) SetActions(v FlowAction) {
	o.Actions = v
}

// GetNextTable returns the NextTable field value if set, zero value otherwise.
func (o *FlowEntry) GetNextTable() int32 {
	if o == nil || IsNil(o.NextTable) {
		var ret int32
		return ret
	}
	return *o.NextTable
}

// GetNextTableOk returns a tuple with the NextTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetNextTableOk() (*int32, bool) {
	if o == nil || IsNil(o.NextTable) {
		return nil, false
	}
	return o.NextTable, true
}

// HasNextTable returns a boolean if a field has been set.
func (o *FlowEntry) HasNextTable() bool {
	if o != nil && !IsNil(o.NextTable) {
		return true
	}

	return false
}

// SetNextTable gets a reference to the given int32 and assigns it to the NextTable field.
func (o *FlowEntry) SetNextTable(v int32) {
	o.NextTable = &v
}

// GetPacketCounter returns the PacketCounter field value if set, zero value otherwise.
func (o *FlowEntry) GetPacketCounter() int32 {
	if o == nil || IsNil(o.PacketCounter) {
		var ret int32
		return ret
	}
	return *o.PacketCounter
}

// GetPacketCounterOk returns a tuple with the PacketCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetPacketCounterOk() (*int32, bool) {
	if o == nil || IsNil(o.PacketCounter) {
		return nil, false
	}
	return o.PacketCounter, true
}

// HasPacketCounter returns a boolean if a field has been set.
func (o *FlowEntry) HasPacketCounter() bool {
	if o != nil && !IsNil(o.PacketCounter) {
		return true
	}

	return false
}

// SetPacketCounter gets a reference to the given int32 and assigns it to the PacketCounter field.
func (o *FlowEntry) SetPacketCounter(v int32) {
	o.PacketCounter = &v
}

// GetByteCounter returns the ByteCounter field value if set, zero value otherwise.
func (o *FlowEntry) GetByteCounter() int32 {
	if o == nil || IsNil(o.ByteCounter) {
		var ret int32
		return ret
	}
	return *o.ByteCounter
}

// GetByteCounterOk returns a tuple with the ByteCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowEntry) GetByteCounterOk() (*int32, bool) {
	if o == nil || IsNil(o.ByteCounter) {
		return nil, false
	}
	return o.ByteCounter, true
}

// HasByteCounter returns a boolean if a field has been set.
func (o *FlowEntry) HasByteCounter() bool {
	if o != nil && !IsNil(o.ByteCounter) {
		return true
	}

	return false
}

// SetByteCounter gets a reference to the given int32 and assigns it to the ByteCounter field.
func (o *FlowEntry) SetByteCounter(v int32) {
	o.ByteCounter = &v
}

func (o FlowEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["tableId"] = o.TableId
	toSerialize["priority"] = o.Priority
	toSerialize["match"] = o.Match
	toSerialize["actions"] = o.Actions
	if !IsNil(o.NextTable) {
		toSerialize["nextTable"] = o.NextTable
	}
	if !IsNil(o.PacketCounter) {
		toSerialize["packetCounter"] = o.PacketCounter
	}
	if !IsNil(o.ByteCounter) {
		toSerialize["byteCounter"] = o.ByteCounter
	}
	return toSerialize, nil
}

func (o *FlowEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceId",
		"tableId",
		"priority",
		"match",
		"actions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowEntry := _FlowEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowEntry)

	if err != nil {
		return err
	}

	*o = FlowEntry(varFlowEntry)

	return err
}

type NullableFlowEntry struct {
	value *FlowEntry
	isSet bool
}

func (v NullableFlowEntry) Get() *FlowEntry {
	return v.value
}

func (v *NullableFlowEntry) Set(val *FlowEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowEntry(val *FlowEntry) *NullableFlowEntry {
	return &NullableFlowEntry{value: val, isSet: true}
}

func (v NullableFlowEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


