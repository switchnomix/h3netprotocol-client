/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the InterfaceStatsMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceStatsMessage{}

// InterfaceStatsMessage struct for InterfaceStatsMessage
type InterfaceStatsMessage struct {
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	Device Device `json:"device"`
	InterfaceStats map[string]InterfaceStats `json:"interfaceStats"`
	CollectionTimestamp *time.Time `json:"collectionTimestamp,omitempty"`
	// Collection interval in seconds
	Interval *int32 `json:"interval,omitempty"`
	// Whether stats are aggregated
	Aggregated *bool `json:"aggregated,omitempty"`
}

type _InterfaceStatsMessage InterfaceStatsMessage

// NewInterfaceStatsMessage instantiates a new InterfaceStatsMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceStatsMessage(type_ string, timestamp time.Time, schemaVersion string, device Device, interfaceStats map[string]InterfaceStats) *InterfaceStatsMessage {
	this := InterfaceStatsMessage{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.Device = device
	this.InterfaceStats = interfaceStats
	return &this
}

// NewInterfaceStatsMessageWithDefaults instantiates a new InterfaceStatsMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceStatsMessageWithDefaults() *InterfaceStatsMessage {
	this := InterfaceStatsMessage{}
	return &this
}

// GetType returns the Type field value
func (o *InterfaceStatsMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InterfaceStatsMessage) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *InterfaceStatsMessage) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *InterfaceStatsMessage) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *InterfaceStatsMessage) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *InterfaceStatsMessage) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetDevice returns the Device field value
func (o *InterfaceStatsMessage) GetDevice() Device {
	if o == nil {
		var ret Device
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetDeviceOk() (*Device, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *InterfaceStatsMessage) SetDevice(v Device) {
	o.Device = v
}

// GetInterfaceStats returns the InterfaceStats field value
func (o *InterfaceStatsMessage) GetInterfaceStats() map[string]InterfaceStats {
	if o == nil {
		var ret map[string]InterfaceStats
		return ret
	}

	return o.InterfaceStats
}

// GetInterfaceStatsOk returns a tuple with the InterfaceStats field value
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetInterfaceStatsOk() (map[string]InterfaceStats, bool) {
	if o == nil {
		return map[string]InterfaceStats{}, false
	}
	return o.InterfaceStats, true
}

// SetInterfaceStats sets field value
func (o *InterfaceStatsMessage) SetInterfaceStats(v map[string]InterfaceStats) {
	o.InterfaceStats = v
}

// GetCollectionTimestamp returns the CollectionTimestamp field value if set, zero value otherwise.
func (o *InterfaceStatsMessage) GetCollectionTimestamp() time.Time {
	if o == nil || IsNil(o.CollectionTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CollectionTimestamp
}

// GetCollectionTimestampOk returns a tuple with the CollectionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetCollectionTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CollectionTimestamp) {
		return nil, false
	}
	return o.CollectionTimestamp, true
}

// HasCollectionTimestamp returns a boolean if a field has been set.
func (o *InterfaceStatsMessage) HasCollectionTimestamp() bool {
	if o != nil && !IsNil(o.CollectionTimestamp) {
		return true
	}

	return false
}

// SetCollectionTimestamp gets a reference to the given time.Time and assigns it to the CollectionTimestamp field.
func (o *InterfaceStatsMessage) SetCollectionTimestamp(v time.Time) {
	o.CollectionTimestamp = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *InterfaceStatsMessage) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *InterfaceStatsMessage) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *InterfaceStatsMessage) SetInterval(v int32) {
	o.Interval = &v
}

// GetAggregated returns the Aggregated field value if set, zero value otherwise.
func (o *InterfaceStatsMessage) GetAggregated() bool {
	if o == nil || IsNil(o.Aggregated) {
		var ret bool
		return ret
	}
	return *o.Aggregated
}

// GetAggregatedOk returns a tuple with the Aggregated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsMessage) GetAggregatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Aggregated) {
		return nil, false
	}
	return o.Aggregated, true
}

// HasAggregated returns a boolean if a field has been set.
func (o *InterfaceStatsMessage) HasAggregated() bool {
	if o != nil && !IsNil(o.Aggregated) {
		return true
	}

	return false
}

// SetAggregated gets a reference to the given bool and assigns it to the Aggregated field.
func (o *InterfaceStatsMessage) SetAggregated(v bool) {
	o.Aggregated = &v
}

func (o InterfaceStatsMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceStatsMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["device"] = o.Device
	toSerialize["interfaceStats"] = o.InterfaceStats
	if !IsNil(o.CollectionTimestamp) {
		toSerialize["collectionTimestamp"] = o.CollectionTimestamp
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Aggregated) {
		toSerialize["aggregated"] = o.Aggregated
	}
	return toSerialize, nil
}

func (o *InterfaceStatsMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"device",
		"interfaceStats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterfaceStatsMessage := _InterfaceStatsMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInterfaceStatsMessage)

	if err != nil {
		return err
	}

	*o = InterfaceStatsMessage(varInterfaceStatsMessage)

	return err
}

type NullableInterfaceStatsMessage struct {
	value *InterfaceStatsMessage
	isSet bool
}

func (v NullableInterfaceStatsMessage) Get() *InterfaceStatsMessage {
	return v.value
}

func (v *NullableInterfaceStatsMessage) Set(val *InterfaceStatsMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceStatsMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceStatsMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceStatsMessage(val *InterfaceStatsMessage) *NullableInterfaceStatsMessage {
	return &NullableInterfaceStatsMessage{value: val, isSet: true}
}

func (v NullableInterfaceStatsMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceStatsMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


