/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the DnsSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsSettings{}

// DnsSettings DNS configuration
type DnsSettings struct {
	Servers []string `json:"servers,omitempty"`
	Domain *string `json:"domain,omitempty"`
	SearchDomains []string `json:"searchDomains,omitempty"`
}

// NewDnsSettings instantiates a new DnsSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsSettings() *DnsSettings {
	this := DnsSettings{}
	return &this
}

// NewDnsSettingsWithDefaults instantiates a new DnsSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsSettingsWithDefaults() *DnsSettings {
	this := DnsSettings{}
	return &this
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *DnsSettings) GetServers() []string {
	if o == nil || IsNil(o.Servers) {
		var ret []string
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsSettings) GetServersOk() ([]string, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *DnsSettings) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []string and assigns it to the Servers field.
func (o *DnsSettings) SetServers(v []string) {
	o.Servers = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *DnsSettings) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsSettings) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *DnsSettings) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *DnsSettings) SetDomain(v string) {
	o.Domain = &v
}

// GetSearchDomains returns the SearchDomains field value if set, zero value otherwise.
func (o *DnsSettings) GetSearchDomains() []string {
	if o == nil || IsNil(o.SearchDomains) {
		var ret []string
		return ret
	}
	return o.SearchDomains
}

// GetSearchDomainsOk returns a tuple with the SearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsSettings) GetSearchDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchDomains) {
		return nil, false
	}
	return o.SearchDomains, true
}

// HasSearchDomains returns a boolean if a field has been set.
func (o *DnsSettings) HasSearchDomains() bool {
	if o != nil && !IsNil(o.SearchDomains) {
		return true
	}

	return false
}

// SetSearchDomains gets a reference to the given []string and assigns it to the SearchDomains field.
func (o *DnsSettings) SetSearchDomains(v []string) {
	o.SearchDomains = v
}

func (o DnsSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.SearchDomains) {
		toSerialize["searchDomains"] = o.SearchDomains
	}
	return toSerialize, nil
}

type NullableDnsSettings struct {
	value *DnsSettings
	isSet bool
}

func (v NullableDnsSettings) Get() *DnsSettings {
	return v.value
}

func (v *NullableDnsSettings) Set(val *DnsSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsSettings(val *DnsSettings) *NullableDnsSettings {
	return &NullableDnsSettings{value: val, isSet: true}
}

func (v NullableDnsSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


