/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"fmt"
)

// DeviceRoleEnum the model 'DeviceRoleEnum'
type DeviceRoleEnum string

// List of DeviceRoleEnum
const (
	DEVICEROLEENUM_SWITCH DeviceRoleEnum = "Switch"
	DEVICEROLEENUM_ROUTER DeviceRoleEnum = "Router"
	DEVICEROLEENUM_L2_SWITCH DeviceRoleEnum = "L2 Switch"
	DEVICEROLEENUM_FIREWALL DeviceRoleEnum = "Firewall"
	DEVICEROLEENUM_WIRELESS_ACCESS_POINT DeviceRoleEnum = "Wireless Access Point"
	DEVICEROLEENUM_VO_IP DeviceRoleEnum = "VoIP"
	DEVICEROLEENUM_LOAD_BALANCER DeviceRoleEnum = "Load Balancer"
	DEVICEROLEENUM_VPN_GATEWAY DeviceRoleEnum = "VPN Gateway"
	DEVICEROLEENUM_UTM DeviceRoleEnum = "UTM"
	DEVICEROLEENUM_PDU DeviceRoleEnum = "PDU"
)

// All allowed values of DeviceRoleEnum enum
var AllowedDeviceRoleEnumEnumValues = []DeviceRoleEnum{
	"Switch",
	"Router",
	"L2 Switch",
	"Firewall",
	"Wireless Access Point",
	"VoIP",
	"Load Balancer",
	"VPN Gateway",
	"UTM",
	"PDU",
}

func (v *DeviceRoleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceRoleEnum(value)
	for _, existing := range AllowedDeviceRoleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceRoleEnum", value)
}

// NewDeviceRoleEnumFromValue returns a pointer to a valid DeviceRoleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceRoleEnumFromValue(v string) (*DeviceRoleEnum, error) {
	ev := DeviceRoleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceRoleEnum: valid values are %v", v, AllowedDeviceRoleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceRoleEnum) IsValid() bool {
	for _, existing := range AllowedDeviceRoleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceRoleEnum value
func (v DeviceRoleEnum) Ptr() *DeviceRoleEnum {
	return &v
}

type NullableDeviceRoleEnum struct {
	value *DeviceRoleEnum
	isSet bool
}

func (v NullableDeviceRoleEnum) Get() *DeviceRoleEnum {
	return v.value
}

func (v *NullableDeviceRoleEnum) Set(val *DeviceRoleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRoleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRoleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRoleEnum(val *DeviceRoleEnum) *NullableDeviceRoleEnum {
	return &NullableDeviceRoleEnum{value: val, isSet: true}
}

func (v NullableDeviceRoleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRoleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

