/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventNotificationMessageAllOfSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotificationMessageAllOfSource{}

// EventNotificationMessageAllOfSource struct for EventNotificationMessageAllOfSource
type EventNotificationMessageAllOfSource struct {
	DeviceId string `json:"deviceId"`
	Component *string `json:"component,omitempty"`
}

type _EventNotificationMessageAllOfSource EventNotificationMessageAllOfSource

// NewEventNotificationMessageAllOfSource instantiates a new EventNotificationMessageAllOfSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotificationMessageAllOfSource(deviceId string) *EventNotificationMessageAllOfSource {
	this := EventNotificationMessageAllOfSource{}
	this.DeviceId = deviceId
	return &this
}

// NewEventNotificationMessageAllOfSourceWithDefaults instantiates a new EventNotificationMessageAllOfSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationMessageAllOfSourceWithDefaults() *EventNotificationMessageAllOfSource {
	this := EventNotificationMessageAllOfSource{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *EventNotificationMessageAllOfSource) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *EventNotificationMessageAllOfSource) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *EventNotificationMessageAllOfSource) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *EventNotificationMessageAllOfSource) GetComponent() string {
	if o == nil || IsNil(o.Component) {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotificationMessageAllOfSource) GetComponentOk() (*string, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *EventNotificationMessageAllOfSource) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *EventNotificationMessageAllOfSource) SetComponent(v string) {
	o.Component = &v
}

func (o EventNotificationMessageAllOfSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotificationMessageAllOfSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceId"] = o.DeviceId
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	return toSerialize, nil
}

func (o *EventNotificationMessageAllOfSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventNotificationMessageAllOfSource := _EventNotificationMessageAllOfSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventNotificationMessageAllOfSource)

	if err != nil {
		return err
	}

	*o = EventNotificationMessageAllOfSource(varEventNotificationMessageAllOfSource)

	return err
}

type NullableEventNotificationMessageAllOfSource struct {
	value *EventNotificationMessageAllOfSource
	isSet bool
}

func (v NullableEventNotificationMessageAllOfSource) Get() *EventNotificationMessageAllOfSource {
	return v.value
}

func (v *NullableEventNotificationMessageAllOfSource) Set(val *EventNotificationMessageAllOfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotificationMessageAllOfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotificationMessageAllOfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotificationMessageAllOfSource(val *EventNotificationMessageAllOfSource) *NullableEventNotificationMessageAllOfSource {
	return &NullableEventNotificationMessageAllOfSource{value: val, isSet: true}
}

func (v NullableEventNotificationMessageAllOfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotificationMessageAllOfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


