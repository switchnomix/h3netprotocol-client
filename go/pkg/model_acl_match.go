/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ACLMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACLMatch{}

// ACLMatch ACL match criteria
type ACLMatch struct {
	// Ethernet type
	EthType *int32 `json:"eth_type,omitempty"`
	// IP protocol number
	IpProto *int32 `json:"ip_proto,omitempty"`
	SrcIp *IPAddressWithPrefix `json:"src_ip,omitempty"`
	DstIp *IPAddressWithPrefix `json:"dst_ip,omitempty"`
	// TCP source port
	TcpSrc *int32 `json:"tcp_src,omitempty"`
	// TCP destination port
	TcpDst *int32 `json:"tcp_dst,omitempty"`
	// UDP source port
	UdpSrc *int32 `json:"udp_src,omitempty"`
	// UDP destination port
	UdpDst *int32 `json:"udp_dst,omitempty"`
	// ICMP message type
	IcmpType *int32 `json:"icmp_type,omitempty"`
	// ICMP message code
	IcmpCode *int32 `json:"icmp_code,omitempty"`
	// ICMPv6 message type
	Icmpv6Type *int32 `json:"icmpv6_type,omitempty"`
	// ICMPv6 message code
	Icmpv6Code *int32 `json:"icmpv6_code,omitempty"`
	// VLAN ID
	VlanId *int32 `json:"vlan_id,omitempty"`
	// Differentiated Services Code Point
	Dscp *int32 `json:"dscp,omitempty"`
	// TCP flags to match
	TcpFlags []string `json:"tcp_flags,omitempty"`
}

// NewACLMatch instantiates a new ACLMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLMatch() *ACLMatch {
	this := ACLMatch{}
	return &this
}

// NewACLMatchWithDefaults instantiates a new ACLMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLMatchWithDefaults() *ACLMatch {
	this := ACLMatch{}
	return &this
}

// GetEthType returns the EthType field value if set, zero value otherwise.
func (o *ACLMatch) GetEthType() int32 {
	if o == nil || IsNil(o.EthType) {
		var ret int32
		return ret
	}
	return *o.EthType
}

// GetEthTypeOk returns a tuple with the EthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetEthTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.EthType) {
		return nil, false
	}
	return o.EthType, true
}

// HasEthType returns a boolean if a field has been set.
func (o *ACLMatch) HasEthType() bool {
	if o != nil && !IsNil(o.EthType) {
		return true
	}

	return false
}

// SetEthType gets a reference to the given int32 and assigns it to the EthType field.
func (o *ACLMatch) SetEthType(v int32) {
	o.EthType = &v
}

// GetIpProto returns the IpProto field value if set, zero value otherwise.
func (o *ACLMatch) GetIpProto() int32 {
	if o == nil || IsNil(o.IpProto) {
		var ret int32
		return ret
	}
	return *o.IpProto
}

// GetIpProtoOk returns a tuple with the IpProto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetIpProtoOk() (*int32, bool) {
	if o == nil || IsNil(o.IpProto) {
		return nil, false
	}
	return o.IpProto, true
}

// HasIpProto returns a boolean if a field has been set.
func (o *ACLMatch) HasIpProto() bool {
	if o != nil && !IsNil(o.IpProto) {
		return true
	}

	return false
}

// SetIpProto gets a reference to the given int32 and assigns it to the IpProto field.
func (o *ACLMatch) SetIpProto(v int32) {
	o.IpProto = &v
}

// GetSrcIp returns the SrcIp field value if set, zero value otherwise.
func (o *ACLMatch) GetSrcIp() IPAddressWithPrefix {
	if o == nil || IsNil(o.SrcIp) {
		var ret IPAddressWithPrefix
		return ret
	}
	return *o.SrcIp
}

// GetSrcIpOk returns a tuple with the SrcIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetSrcIpOk() (*IPAddressWithPrefix, bool) {
	if o == nil || IsNil(o.SrcIp) {
		return nil, false
	}
	return o.SrcIp, true
}

// HasSrcIp returns a boolean if a field has been set.
func (o *ACLMatch) HasSrcIp() bool {
	if o != nil && !IsNil(o.SrcIp) {
		return true
	}

	return false
}

// SetSrcIp gets a reference to the given IPAddressWithPrefix and assigns it to the SrcIp field.
func (o *ACLMatch) SetSrcIp(v IPAddressWithPrefix) {
	o.SrcIp = &v
}

// GetDstIp returns the DstIp field value if set, zero value otherwise.
func (o *ACLMatch) GetDstIp() IPAddressWithPrefix {
	if o == nil || IsNil(o.DstIp) {
		var ret IPAddressWithPrefix
		return ret
	}
	return *o.DstIp
}

// GetDstIpOk returns a tuple with the DstIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetDstIpOk() (*IPAddressWithPrefix, bool) {
	if o == nil || IsNil(o.DstIp) {
		return nil, false
	}
	return o.DstIp, true
}

// HasDstIp returns a boolean if a field has been set.
func (o *ACLMatch) HasDstIp() bool {
	if o != nil && !IsNil(o.DstIp) {
		return true
	}

	return false
}

// SetDstIp gets a reference to the given IPAddressWithPrefix and assigns it to the DstIp field.
func (o *ACLMatch) SetDstIp(v IPAddressWithPrefix) {
	o.DstIp = &v
}

// GetTcpSrc returns the TcpSrc field value if set, zero value otherwise.
func (o *ACLMatch) GetTcpSrc() int32 {
	if o == nil || IsNil(o.TcpSrc) {
		var ret int32
		return ret
	}
	return *o.TcpSrc
}

// GetTcpSrcOk returns a tuple with the TcpSrc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetTcpSrcOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpSrc) {
		return nil, false
	}
	return o.TcpSrc, true
}

// HasTcpSrc returns a boolean if a field has been set.
func (o *ACLMatch) HasTcpSrc() bool {
	if o != nil && !IsNil(o.TcpSrc) {
		return true
	}

	return false
}

// SetTcpSrc gets a reference to the given int32 and assigns it to the TcpSrc field.
func (o *ACLMatch) SetTcpSrc(v int32) {
	o.TcpSrc = &v
}

// GetTcpDst returns the TcpDst field value if set, zero value otherwise.
func (o *ACLMatch) GetTcpDst() int32 {
	if o == nil || IsNil(o.TcpDst) {
		var ret int32
		return ret
	}
	return *o.TcpDst
}

// GetTcpDstOk returns a tuple with the TcpDst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetTcpDstOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpDst) {
		return nil, false
	}
	return o.TcpDst, true
}

// HasTcpDst returns a boolean if a field has been set.
func (o *ACLMatch) HasTcpDst() bool {
	if o != nil && !IsNil(o.TcpDst) {
		return true
	}

	return false
}

// SetTcpDst gets a reference to the given int32 and assigns it to the TcpDst field.
func (o *ACLMatch) SetTcpDst(v int32) {
	o.TcpDst = &v
}

// GetUdpSrc returns the UdpSrc field value if set, zero value otherwise.
func (o *ACLMatch) GetUdpSrc() int32 {
	if o == nil || IsNil(o.UdpSrc) {
		var ret int32
		return ret
	}
	return *o.UdpSrc
}

// GetUdpSrcOk returns a tuple with the UdpSrc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetUdpSrcOk() (*int32, bool) {
	if o == nil || IsNil(o.UdpSrc) {
		return nil, false
	}
	return o.UdpSrc, true
}

// HasUdpSrc returns a boolean if a field has been set.
func (o *ACLMatch) HasUdpSrc() bool {
	if o != nil && !IsNil(o.UdpSrc) {
		return true
	}

	return false
}

// SetUdpSrc gets a reference to the given int32 and assigns it to the UdpSrc field.
func (o *ACLMatch) SetUdpSrc(v int32) {
	o.UdpSrc = &v
}

// GetUdpDst returns the UdpDst field value if set, zero value otherwise.
func (o *ACLMatch) GetUdpDst() int32 {
	if o == nil || IsNil(o.UdpDst) {
		var ret int32
		return ret
	}
	return *o.UdpDst
}

// GetUdpDstOk returns a tuple with the UdpDst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetUdpDstOk() (*int32, bool) {
	if o == nil || IsNil(o.UdpDst) {
		return nil, false
	}
	return o.UdpDst, true
}

// HasUdpDst returns a boolean if a field has been set.
func (o *ACLMatch) HasUdpDst() bool {
	if o != nil && !IsNil(o.UdpDst) {
		return true
	}

	return false
}

// SetUdpDst gets a reference to the given int32 and assigns it to the UdpDst field.
func (o *ACLMatch) SetUdpDst(v int32) {
	o.UdpDst = &v
}

// GetIcmpType returns the IcmpType field value if set, zero value otherwise.
func (o *ACLMatch) GetIcmpType() int32 {
	if o == nil || IsNil(o.IcmpType) {
		var ret int32
		return ret
	}
	return *o.IcmpType
}

// GetIcmpTypeOk returns a tuple with the IcmpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetIcmpTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.IcmpType) {
		return nil, false
	}
	return o.IcmpType, true
}

// HasIcmpType returns a boolean if a field has been set.
func (o *ACLMatch) HasIcmpType() bool {
	if o != nil && !IsNil(o.IcmpType) {
		return true
	}

	return false
}

// SetIcmpType gets a reference to the given int32 and assigns it to the IcmpType field.
func (o *ACLMatch) SetIcmpType(v int32) {
	o.IcmpType = &v
}

// GetIcmpCode returns the IcmpCode field value if set, zero value otherwise.
func (o *ACLMatch) GetIcmpCode() int32 {
	if o == nil || IsNil(o.IcmpCode) {
		var ret int32
		return ret
	}
	return *o.IcmpCode
}

// GetIcmpCodeOk returns a tuple with the IcmpCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetIcmpCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.IcmpCode) {
		return nil, false
	}
	return o.IcmpCode, true
}

// HasIcmpCode returns a boolean if a field has been set.
func (o *ACLMatch) HasIcmpCode() bool {
	if o != nil && !IsNil(o.IcmpCode) {
		return true
	}

	return false
}

// SetIcmpCode gets a reference to the given int32 and assigns it to the IcmpCode field.
func (o *ACLMatch) SetIcmpCode(v int32) {
	o.IcmpCode = &v
}

// GetIcmpv6Type returns the Icmpv6Type field value if set, zero value otherwise.
func (o *ACLMatch) GetIcmpv6Type() int32 {
	if o == nil || IsNil(o.Icmpv6Type) {
		var ret int32
		return ret
	}
	return *o.Icmpv6Type
}

// GetIcmpv6TypeOk returns a tuple with the Icmpv6Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetIcmpv6TypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Icmpv6Type) {
		return nil, false
	}
	return o.Icmpv6Type, true
}

// HasIcmpv6Type returns a boolean if a field has been set.
func (o *ACLMatch) HasIcmpv6Type() bool {
	if o != nil && !IsNil(o.Icmpv6Type) {
		return true
	}

	return false
}

// SetIcmpv6Type gets a reference to the given int32 and assigns it to the Icmpv6Type field.
func (o *ACLMatch) SetIcmpv6Type(v int32) {
	o.Icmpv6Type = &v
}

// GetIcmpv6Code returns the Icmpv6Code field value if set, zero value otherwise.
func (o *ACLMatch) GetIcmpv6Code() int32 {
	if o == nil || IsNil(o.Icmpv6Code) {
		var ret int32
		return ret
	}
	return *o.Icmpv6Code
}

// GetIcmpv6CodeOk returns a tuple with the Icmpv6Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetIcmpv6CodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Icmpv6Code) {
		return nil, false
	}
	return o.Icmpv6Code, true
}

// HasIcmpv6Code returns a boolean if a field has been set.
func (o *ACLMatch) HasIcmpv6Code() bool {
	if o != nil && !IsNil(o.Icmpv6Code) {
		return true
	}

	return false
}

// SetIcmpv6Code gets a reference to the given int32 and assigns it to the Icmpv6Code field.
func (o *ACLMatch) SetIcmpv6Code(v int32) {
	o.Icmpv6Code = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *ACLMatch) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *ACLMatch) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *ACLMatch) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *ACLMatch) GetDscp() int32 {
	if o == nil || IsNil(o.Dscp) {
		var ret int32
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetDscpOk() (*int32, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *ACLMatch) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int32 and assigns it to the Dscp field.
func (o *ACLMatch) SetDscp(v int32) {
	o.Dscp = &v
}

// GetTcpFlags returns the TcpFlags field value if set, zero value otherwise.
func (o *ACLMatch) GetTcpFlags() []string {
	if o == nil || IsNil(o.TcpFlags) {
		var ret []string
		return ret
	}
	return o.TcpFlags
}

// GetTcpFlagsOk returns a tuple with the TcpFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLMatch) GetTcpFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.TcpFlags) {
		return nil, false
	}
	return o.TcpFlags, true
}

// HasTcpFlags returns a boolean if a field has been set.
func (o *ACLMatch) HasTcpFlags() bool {
	if o != nil && !IsNil(o.TcpFlags) {
		return true
	}

	return false
}

// SetTcpFlags gets a reference to the given []string and assigns it to the TcpFlags field.
func (o *ACLMatch) SetTcpFlags(v []string) {
	o.TcpFlags = v
}

func (o ACLMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACLMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EthType) {
		toSerialize["eth_type"] = o.EthType
	}
	if !IsNil(o.IpProto) {
		toSerialize["ip_proto"] = o.IpProto
	}
	if !IsNil(o.SrcIp) {
		toSerialize["src_ip"] = o.SrcIp
	}
	if !IsNil(o.DstIp) {
		toSerialize["dst_ip"] = o.DstIp
	}
	if !IsNil(o.TcpSrc) {
		toSerialize["tcp_src"] = o.TcpSrc
	}
	if !IsNil(o.TcpDst) {
		toSerialize["tcp_dst"] = o.TcpDst
	}
	if !IsNil(o.UdpSrc) {
		toSerialize["udp_src"] = o.UdpSrc
	}
	if !IsNil(o.UdpDst) {
		toSerialize["udp_dst"] = o.UdpDst
	}
	if !IsNil(o.IcmpType) {
		toSerialize["icmp_type"] = o.IcmpType
	}
	if !IsNil(o.IcmpCode) {
		toSerialize["icmp_code"] = o.IcmpCode
	}
	if !IsNil(o.Icmpv6Type) {
		toSerialize["icmpv6_type"] = o.Icmpv6Type
	}
	if !IsNil(o.Icmpv6Code) {
		toSerialize["icmpv6_code"] = o.Icmpv6Code
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !IsNil(o.TcpFlags) {
		toSerialize["tcp_flags"] = o.TcpFlags
	}
	return toSerialize, nil
}

type NullableACLMatch struct {
	value *ACLMatch
	isSet bool
}

func (v NullableACLMatch) Get() *ACLMatch {
	return v.value
}

func (v *NullableACLMatch) Set(val *ACLMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableACLMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableACLMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLMatch(val *ACLMatch) *NullableACLMatch {
	return &NullableACLMatch{value: val, isSet: true}
}

func (v NullableACLMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


