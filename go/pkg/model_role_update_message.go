/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RoleUpdateMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleUpdateMessage{}

// RoleUpdateMessage struct for RoleUpdateMessage
type RoleUpdateMessage struct {
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	Device Device `json:"device"`
	NewRoles []Role `json:"newRoles"`
}

type _RoleUpdateMessage RoleUpdateMessage

// NewRoleUpdateMessage instantiates a new RoleUpdateMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleUpdateMessage(type_ string, timestamp time.Time, schemaVersion string, device Device, newRoles []Role) *RoleUpdateMessage {
	this := RoleUpdateMessage{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.Device = device
	this.NewRoles = newRoles
	return &this
}

// NewRoleUpdateMessageWithDefaults instantiates a new RoleUpdateMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleUpdateMessageWithDefaults() *RoleUpdateMessage {
	this := RoleUpdateMessage{}
	return &this
}

// GetType returns the Type field value
func (o *RoleUpdateMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoleUpdateMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoleUpdateMessage) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *RoleUpdateMessage) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *RoleUpdateMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *RoleUpdateMessage) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *RoleUpdateMessage) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *RoleUpdateMessage) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *RoleUpdateMessage) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetDevice returns the Device field value
func (o *RoleUpdateMessage) GetDevice() Device {
	if o == nil {
		var ret Device
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *RoleUpdateMessage) GetDeviceOk() (*Device, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *RoleUpdateMessage) SetDevice(v Device) {
	o.Device = v
}

// GetNewRoles returns the NewRoles field value
func (o *RoleUpdateMessage) GetNewRoles() []Role {
	if o == nil {
		var ret []Role
		return ret
	}

	return o.NewRoles
}

// GetNewRolesOk returns a tuple with the NewRoles field value
// and a boolean to check if the value has been set.
func (o *RoleUpdateMessage) GetNewRolesOk() ([]Role, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewRoles, true
}

// SetNewRoles sets field value
func (o *RoleUpdateMessage) SetNewRoles(v []Role) {
	o.NewRoles = v
}

func (o RoleUpdateMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleUpdateMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["device"] = o.Device
	toSerialize["newRoles"] = o.NewRoles
	return toSerialize, nil
}

func (o *RoleUpdateMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"device",
		"newRoles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleUpdateMessage := _RoleUpdateMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleUpdateMessage)

	if err != nil {
		return err
	}

	*o = RoleUpdateMessage(varRoleUpdateMessage)

	return err
}

type NullableRoleUpdateMessage struct {
	value *RoleUpdateMessage
	isSet bool
}

func (v NullableRoleUpdateMessage) Get() *RoleUpdateMessage {
	return v.value
}

func (v *NullableRoleUpdateMessage) Set(val *RoleUpdateMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleUpdateMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleUpdateMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleUpdateMessage(val *RoleUpdateMessage) *NullableRoleUpdateMessage {
	return &NullableRoleUpdateMessage{value: val, isSet: true}
}

func (v NullableRoleUpdateMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleUpdateMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


