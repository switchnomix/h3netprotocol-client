/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ResourceMetricsCpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceMetricsCpu{}

// ResourceMetricsCpu struct for ResourceMetricsCpu
type ResourceMetricsCpu struct {
	Usage *float32 `json:"usage,omitempty"`
	Load *float32 `json:"load,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
}

// NewResourceMetricsCpu instantiates a new ResourceMetricsCpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceMetricsCpu() *ResourceMetricsCpu {
	this := ResourceMetricsCpu{}
	return &this
}

// NewResourceMetricsCpuWithDefaults instantiates a new ResourceMetricsCpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceMetricsCpuWithDefaults() *ResourceMetricsCpu {
	this := ResourceMetricsCpu{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ResourceMetricsCpu) GetUsage() float32 {
	if o == nil || IsNil(o.Usage) {
		var ret float32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsCpu) GetUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ResourceMetricsCpu) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given float32 and assigns it to the Usage field.
func (o *ResourceMetricsCpu) SetUsage(v float32) {
	o.Usage = &v
}

// GetLoad returns the Load field value if set, zero value otherwise.
func (o *ResourceMetricsCpu) GetLoad() float32 {
	if o == nil || IsNil(o.Load) {
		var ret float32
		return ret
	}
	return *o.Load
}

// GetLoadOk returns a tuple with the Load field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsCpu) GetLoadOk() (*float32, bool) {
	if o == nil || IsNil(o.Load) {
		return nil, false
	}
	return o.Load, true
}

// HasLoad returns a boolean if a field has been set.
func (o *ResourceMetricsCpu) HasLoad() bool {
	if o != nil && !IsNil(o.Load) {
		return true
	}

	return false
}

// SetLoad gets a reference to the given float32 and assigns it to the Load field.
func (o *ResourceMetricsCpu) SetLoad(v float32) {
	o.Load = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *ResourceMetricsCpu) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsCpu) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *ResourceMetricsCpu) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *ResourceMetricsCpu) SetTemperature(v float32) {
	o.Temperature = &v
}

func (o ResourceMetricsCpu) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceMetricsCpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Load) {
		toSerialize["load"] = o.Load
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	return toSerialize, nil
}

type NullableResourceMetricsCpu struct {
	value *ResourceMetricsCpu
	isSet bool
}

func (v NullableResourceMetricsCpu) Get() *ResourceMetricsCpu {
	return v.value
}

func (v *NullableResourceMetricsCpu) Set(val *ResourceMetricsCpu) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceMetricsCpu) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceMetricsCpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceMetricsCpu(val *ResourceMetricsCpu) *NullableResourceMetricsCpu {
	return &NullableResourceMetricsCpu{value: val, isSet: true}
}

func (v NullableResourceMetricsCpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceMetricsCpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


