/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the SwitchConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchConfiguration{}

// SwitchConfiguration struct for SwitchConfiguration
type SwitchConfiguration struct {
	Hostname *string `json:"hostname,omitempty"`
	ManagementIp *string `json:"managementIp,omitempty"`
	DeviceMode *string `json:"deviceMode,omitempty"`
	SystemSettings *SystemSettings `json:"systemSettings,omitempty"`
}

// NewSwitchConfiguration instantiates a new SwitchConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchConfiguration() *SwitchConfiguration {
	this := SwitchConfiguration{}
	return &this
}

// NewSwitchConfigurationWithDefaults instantiates a new SwitchConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchConfigurationWithDefaults() *SwitchConfiguration {
	this := SwitchConfiguration{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *SwitchConfiguration) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchConfiguration) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *SwitchConfiguration) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *SwitchConfiguration) SetHostname(v string) {
	o.Hostname = &v
}

// GetManagementIp returns the ManagementIp field value if set, zero value otherwise.
func (o *SwitchConfiguration) GetManagementIp() string {
	if o == nil || IsNil(o.ManagementIp) {
		var ret string
		return ret
	}
	return *o.ManagementIp
}

// GetManagementIpOk returns a tuple with the ManagementIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchConfiguration) GetManagementIpOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementIp) {
		return nil, false
	}
	return o.ManagementIp, true
}

// HasManagementIp returns a boolean if a field has been set.
func (o *SwitchConfiguration) HasManagementIp() bool {
	if o != nil && !IsNil(o.ManagementIp) {
		return true
	}

	return false
}

// SetManagementIp gets a reference to the given string and assigns it to the ManagementIp field.
func (o *SwitchConfiguration) SetManagementIp(v string) {
	o.ManagementIp = &v
}

// GetDeviceMode returns the DeviceMode field value if set, zero value otherwise.
func (o *SwitchConfiguration) GetDeviceMode() string {
	if o == nil || IsNil(o.DeviceMode) {
		var ret string
		return ret
	}
	return *o.DeviceMode
}

// GetDeviceModeOk returns a tuple with the DeviceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchConfiguration) GetDeviceModeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceMode) {
		return nil, false
	}
	return o.DeviceMode, true
}

// HasDeviceMode returns a boolean if a field has been set.
func (o *SwitchConfiguration) HasDeviceMode() bool {
	if o != nil && !IsNil(o.DeviceMode) {
		return true
	}

	return false
}

// SetDeviceMode gets a reference to the given string and assigns it to the DeviceMode field.
func (o *SwitchConfiguration) SetDeviceMode(v string) {
	o.DeviceMode = &v
}

// GetSystemSettings returns the SystemSettings field value if set, zero value otherwise.
func (o *SwitchConfiguration) GetSystemSettings() SystemSettings {
	if o == nil || IsNil(o.SystemSettings) {
		var ret SystemSettings
		return ret
	}
	return *o.SystemSettings
}

// GetSystemSettingsOk returns a tuple with the SystemSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchConfiguration) GetSystemSettingsOk() (*SystemSettings, bool) {
	if o == nil || IsNil(o.SystemSettings) {
		return nil, false
	}
	return o.SystemSettings, true
}

// HasSystemSettings returns a boolean if a field has been set.
func (o *SwitchConfiguration) HasSystemSettings() bool {
	if o != nil && !IsNil(o.SystemSettings) {
		return true
	}

	return false
}

// SetSystemSettings gets a reference to the given SystemSettings and assigns it to the SystemSettings field.
func (o *SwitchConfiguration) SetSystemSettings(v SystemSettings) {
	o.SystemSettings = &v
}

func (o SwitchConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.ManagementIp) {
		toSerialize["managementIp"] = o.ManagementIp
	}
	if !IsNil(o.DeviceMode) {
		toSerialize["deviceMode"] = o.DeviceMode
	}
	if !IsNil(o.SystemSettings) {
		toSerialize["systemSettings"] = o.SystemSettings
	}
	return toSerialize, nil
}

type NullableSwitchConfiguration struct {
	value *SwitchConfiguration
	isSet bool
}

func (v NullableSwitchConfiguration) Get() *SwitchConfiguration {
	return v.value
}

func (v *NullableSwitchConfiguration) Set(val *SwitchConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchConfiguration(val *SwitchConfiguration) *NullableSwitchConfiguration {
	return &NullableSwitchConfiguration{value: val, isSet: true}
}

func (v NullableSwitchConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


