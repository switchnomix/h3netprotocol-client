/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PipelineConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineConfig{}

// PipelineConfig struct for PipelineConfig
type PipelineConfig struct {
	Type *string `json:"type,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	SwitchId string `json:"switchId"`
	Tables []MatchActionTable `json:"tables"`
	Vlans []VLAN `json:"vlans,omitempty"`
	Acls []ACL `json:"acls,omitempty"`
}

type _PipelineConfig PipelineConfig

// NewPipelineConfig instantiates a new PipelineConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineConfig(switchId string, tables []MatchActionTable) *PipelineConfig {
	this := PipelineConfig{}
	this.SwitchId = switchId
	this.Tables = tables
	return &this
}

// NewPipelineConfigWithDefaults instantiates a new PipelineConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineConfigWithDefaults() *PipelineConfig {
	this := PipelineConfig{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PipelineConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PipelineConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PipelineConfig) SetType(v string) {
	o.Type = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *PipelineConfig) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineConfig) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PipelineConfig) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *PipelineConfig) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetSwitchId returns the SwitchId field value
func (o *PipelineConfig) GetSwitchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value
// and a boolean to check if the value has been set.
func (o *PipelineConfig) GetSwitchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwitchId, true
}

// SetSwitchId sets field value
func (o *PipelineConfig) SetSwitchId(v string) {
	o.SwitchId = v
}

// GetTables returns the Tables field value
func (o *PipelineConfig) GetTables() []MatchActionTable {
	if o == nil {
		var ret []MatchActionTable
		return ret
	}

	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value
// and a boolean to check if the value has been set.
func (o *PipelineConfig) GetTablesOk() ([]MatchActionTable, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tables, true
}

// SetTables sets field value
func (o *PipelineConfig) SetTables(v []MatchActionTable) {
	o.Tables = v
}

// GetVlans returns the Vlans field value if set, zero value otherwise.
func (o *PipelineConfig) GetVlans() []VLAN {
	if o == nil || IsNil(o.Vlans) {
		var ret []VLAN
		return ret
	}
	return o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineConfig) GetVlansOk() ([]VLAN, bool) {
	if o == nil || IsNil(o.Vlans) {
		return nil, false
	}
	return o.Vlans, true
}

// HasVlans returns a boolean if a field has been set.
func (o *PipelineConfig) HasVlans() bool {
	if o != nil && !IsNil(o.Vlans) {
		return true
	}

	return false
}

// SetVlans gets a reference to the given []VLAN and assigns it to the Vlans field.
func (o *PipelineConfig) SetVlans(v []VLAN) {
	o.Vlans = v
}

// GetAcls returns the Acls field value if set, zero value otherwise.
func (o *PipelineConfig) GetAcls() []ACL {
	if o == nil || IsNil(o.Acls) {
		var ret []ACL
		return ret
	}
	return o.Acls
}

// GetAclsOk returns a tuple with the Acls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineConfig) GetAclsOk() ([]ACL, bool) {
	if o == nil || IsNil(o.Acls) {
		return nil, false
	}
	return o.Acls, true
}

// HasAcls returns a boolean if a field has been set.
func (o *PipelineConfig) HasAcls() bool {
	if o != nil && !IsNil(o.Acls) {
		return true
	}

	return false
}

// SetAcls gets a reference to the given []ACL and assigns it to the Acls field.
func (o *PipelineConfig) SetAcls(v []ACL) {
	o.Acls = v
}

func (o PipelineConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["switchId"] = o.SwitchId
	toSerialize["tables"] = o.Tables
	if !IsNil(o.Vlans) {
		toSerialize["vlans"] = o.Vlans
	}
	if !IsNil(o.Acls) {
		toSerialize["acls"] = o.Acls
	}
	return toSerialize, nil
}

func (o *PipelineConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"switchId",
		"tables",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPipelineConfig := _PipelineConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPipelineConfig)

	if err != nil {
		return err
	}

	*o = PipelineConfig(varPipelineConfig)

	return err
}

type NullablePipelineConfig struct {
	value *PipelineConfig
	isSet bool
}

func (v NullablePipelineConfig) Get() *PipelineConfig {
	return v.value
}

func (v *NullablePipelineConfig) Set(val *PipelineConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineConfig(val *PipelineConfig) *NullablePipelineConfig {
	return &NullablePipelineConfig{value: val, isSet: true}
}

func (v NullablePipelineConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


