/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Device type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device{}

// Device struct for Device
type Device struct {
	// Unique identifier for the device
	DeviceId string `json:"deviceId"`
	// Valid hostname according to RFC 1123
	Hostname *string `json:"hostname,omitempty" validate:"regexp=^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?([.][a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*$"`
	// Represents either an IPv4 or IPv6 address
	ManagementIp *string `json:"managementIp,omitempty"`
	// MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
	MacAddress *string `json:"macAddress,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"`
	DeviceRoles []DeviceRoleEnum `json:"deviceRoles"`
}

type _Device Device

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice(deviceId string, deviceRoles []DeviceRoleEnum) *Device {
	this := Device{}
	this.DeviceId = deviceId
	this.DeviceRoles = deviceRoles
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *Device) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *Device) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *Device) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *Device) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *Device) SetHostname(v string) {
	o.Hostname = &v
}

// GetManagementIp returns the ManagementIp field value if set, zero value otherwise.
func (o *Device) GetManagementIp() string {
	if o == nil || IsNil(o.ManagementIp) {
		var ret string
		return ret
	}
	return *o.ManagementIp
}

// GetManagementIpOk returns a tuple with the ManagementIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetManagementIpOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementIp) {
		return nil, false
	}
	return o.ManagementIp, true
}

// HasManagementIp returns a boolean if a field has been set.
func (o *Device) HasManagementIp() bool {
	if o != nil && !IsNil(o.ManagementIp) {
		return true
	}

	return false
}

// SetManagementIp gets a reference to the given string and assigns it to the ManagementIp field.
func (o *Device) SetManagementIp(v string) {
	o.ManagementIp = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *Device) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *Device) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *Device) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetDeviceRoles returns the DeviceRoles field value
func (o *Device) GetDeviceRoles() []DeviceRoleEnum {
	if o == nil {
		var ret []DeviceRoleEnum
		return ret
	}

	return o.DeviceRoles
}

// GetDeviceRolesOk returns a tuple with the DeviceRoles field value
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceRolesOk() ([]DeviceRoleEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceRoles, true
}

// SetDeviceRoles sets field value
func (o *Device) SetDeviceRoles(v []DeviceRoleEnum) {
	o.DeviceRoles = v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceId"] = o.DeviceId
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.ManagementIp) {
		toSerialize["managementIp"] = o.ManagementIp
	}
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	toSerialize["deviceRoles"] = o.DeviceRoles
	return toSerialize, nil
}

func (o *Device) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceId",
		"deviceRoles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevice := _Device{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevice)

	if err != nil {
		return err
	}

	*o = Device(varDevice)

	return err
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


