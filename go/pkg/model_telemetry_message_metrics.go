/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TelemetryMessageMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryMessageMetrics{}

// TelemetryMessageMetrics struct for TelemetryMessageMetrics
type TelemetryMessageMetrics struct {
	PacketCount int32 `json:"packetCount"`
	ErrorCount int32 `json:"errorCount"`
	DeviceSpecificMetrics *DeviceMetrics `json:"deviceSpecificMetrics,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Interval *int32 `json:"interval,omitempty"`
	Sequence *int32 `json:"sequence,omitempty"`
}

type _TelemetryMessageMetrics TelemetryMessageMetrics

// NewTelemetryMessageMetrics instantiates a new TelemetryMessageMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryMessageMetrics(packetCount int32, errorCount int32) *TelemetryMessageMetrics {
	this := TelemetryMessageMetrics{}
	this.PacketCount = packetCount
	this.ErrorCount = errorCount
	return &this
}

// NewTelemetryMessageMetricsWithDefaults instantiates a new TelemetryMessageMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryMessageMetricsWithDefaults() *TelemetryMessageMetrics {
	this := TelemetryMessageMetrics{}
	return &this
}

// GetPacketCount returns the PacketCount field value
func (o *TelemetryMessageMetrics) GetPacketCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PacketCount
}

// GetPacketCountOk returns a tuple with the PacketCount field value
// and a boolean to check if the value has been set.
func (o *TelemetryMessageMetrics) GetPacketCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PacketCount, true
}

// SetPacketCount sets field value
func (o *TelemetryMessageMetrics) SetPacketCount(v int32) {
	o.PacketCount = v
}

// GetErrorCount returns the ErrorCount field value
func (o *TelemetryMessageMetrics) GetErrorCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value
// and a boolean to check if the value has been set.
func (o *TelemetryMessageMetrics) GetErrorCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCount, true
}

// SetErrorCount sets field value
func (o *TelemetryMessageMetrics) SetErrorCount(v int32) {
	o.ErrorCount = v
}

// GetDeviceSpecificMetrics returns the DeviceSpecificMetrics field value if set, zero value otherwise.
func (o *TelemetryMessageMetrics) GetDeviceSpecificMetrics() DeviceMetrics {
	if o == nil || IsNil(o.DeviceSpecificMetrics) {
		var ret DeviceMetrics
		return ret
	}
	return *o.DeviceSpecificMetrics
}

// GetDeviceSpecificMetricsOk returns a tuple with the DeviceSpecificMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryMessageMetrics) GetDeviceSpecificMetricsOk() (*DeviceMetrics, bool) {
	if o == nil || IsNil(o.DeviceSpecificMetrics) {
		return nil, false
	}
	return o.DeviceSpecificMetrics, true
}

// HasDeviceSpecificMetrics returns a boolean if a field has been set.
func (o *TelemetryMessageMetrics) HasDeviceSpecificMetrics() bool {
	if o != nil && !IsNil(o.DeviceSpecificMetrics) {
		return true
	}

	return false
}

// SetDeviceSpecificMetrics gets a reference to the given DeviceMetrics and assigns it to the DeviceSpecificMetrics field.
func (o *TelemetryMessageMetrics) SetDeviceSpecificMetrics(v DeviceMetrics) {
	o.DeviceSpecificMetrics = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TelemetryMessageMetrics) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryMessageMetrics) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TelemetryMessageMetrics) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *TelemetryMessageMetrics) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *TelemetryMessageMetrics) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryMessageMetrics) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *TelemetryMessageMetrics) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *TelemetryMessageMetrics) SetInterval(v int32) {
	o.Interval = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *TelemetryMessageMetrics) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryMessageMetrics) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *TelemetryMessageMetrics) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *TelemetryMessageMetrics) SetSequence(v int32) {
	o.Sequence = &v
}

func (o TelemetryMessageMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryMessageMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["packetCount"] = o.PacketCount
	toSerialize["errorCount"] = o.ErrorCount
	if !IsNil(o.DeviceSpecificMetrics) {
		toSerialize["deviceSpecificMetrics"] = o.DeviceSpecificMetrics
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

func (o *TelemetryMessageMetrics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"packetCount",
		"errorCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryMessageMetrics := _TelemetryMessageMetrics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTelemetryMessageMetrics)

	if err != nil {
		return err
	}

	*o = TelemetryMessageMetrics(varTelemetryMessageMetrics)

	return err
}

type NullableTelemetryMessageMetrics struct {
	value *TelemetryMessageMetrics
	isSet bool
}

func (v NullableTelemetryMessageMetrics) Get() *TelemetryMessageMetrics {
	return v.value
}

func (v *NullableTelemetryMessageMetrics) Set(val *TelemetryMessageMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryMessageMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryMessageMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryMessageMetrics(val *TelemetryMessageMetrics) *NullableTelemetryMessageMetrics {
	return &NullableTelemetryMessageMetrics{value: val, isSet: true}
}

func (v NullableTelemetryMessageMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryMessageMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


