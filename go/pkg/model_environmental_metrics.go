/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the EnvironmentalMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentalMetrics{}

// EnvironmentalMetrics Environmental monitoring metrics
type EnvironmentalMetrics struct {
	Temperature *EnvironmentalMetricsTemperature `json:"temperature,omitempty"`
	Power *EnvironmentalMetricsPower `json:"power,omitempty"`
	Fans []EnvironmentalMetricsFansInner `json:"fans,omitempty"`
}

// NewEnvironmentalMetrics instantiates a new EnvironmentalMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentalMetrics() *EnvironmentalMetrics {
	this := EnvironmentalMetrics{}
	return &this
}

// NewEnvironmentalMetricsWithDefaults instantiates a new EnvironmentalMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentalMetricsWithDefaults() *EnvironmentalMetrics {
	this := EnvironmentalMetrics{}
	return &this
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *EnvironmentalMetrics) GetTemperature() EnvironmentalMetricsTemperature {
	if o == nil || IsNil(o.Temperature) {
		var ret EnvironmentalMetricsTemperature
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetrics) GetTemperatureOk() (*EnvironmentalMetricsTemperature, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *EnvironmentalMetrics) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given EnvironmentalMetricsTemperature and assigns it to the Temperature field.
func (o *EnvironmentalMetrics) SetTemperature(v EnvironmentalMetricsTemperature) {
	o.Temperature = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *EnvironmentalMetrics) GetPower() EnvironmentalMetricsPower {
	if o == nil || IsNil(o.Power) {
		var ret EnvironmentalMetricsPower
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetrics) GetPowerOk() (*EnvironmentalMetricsPower, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *EnvironmentalMetrics) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given EnvironmentalMetricsPower and assigns it to the Power field.
func (o *EnvironmentalMetrics) SetPower(v EnvironmentalMetricsPower) {
	o.Power = &v
}

// GetFans returns the Fans field value if set, zero value otherwise.
func (o *EnvironmentalMetrics) GetFans() []EnvironmentalMetricsFansInner {
	if o == nil || IsNil(o.Fans) {
		var ret []EnvironmentalMetricsFansInner
		return ret
	}
	return o.Fans
}

// GetFansOk returns a tuple with the Fans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetrics) GetFansOk() ([]EnvironmentalMetricsFansInner, bool) {
	if o == nil || IsNil(o.Fans) {
		return nil, false
	}
	return o.Fans, true
}

// HasFans returns a boolean if a field has been set.
func (o *EnvironmentalMetrics) HasFans() bool {
	if o != nil && !IsNil(o.Fans) {
		return true
	}

	return false
}

// SetFans gets a reference to the given []EnvironmentalMetricsFansInner and assigns it to the Fans field.
func (o *EnvironmentalMetrics) SetFans(v []EnvironmentalMetricsFansInner) {
	o.Fans = v
}

func (o EnvironmentalMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentalMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Power) {
		toSerialize["power"] = o.Power
	}
	if !IsNil(o.Fans) {
		toSerialize["fans"] = o.Fans
	}
	return toSerialize, nil
}

type NullableEnvironmentalMetrics struct {
	value *EnvironmentalMetrics
	isSet bool
}

func (v NullableEnvironmentalMetrics) Get() *EnvironmentalMetrics {
	return v.value
}

func (v *NullableEnvironmentalMetrics) Set(val *EnvironmentalMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentalMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentalMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentalMetrics(val *EnvironmentalMetrics) *NullableEnvironmentalMetrics {
	return &NullableEnvironmentalMetrics{value: val, isSet: true}
}

func (v NullableEnvironmentalMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentalMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


