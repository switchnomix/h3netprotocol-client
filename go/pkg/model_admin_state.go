/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"fmt"
)

// AdminState Administrative state
type AdminState string

// List of AdminState
const (
	ADMINSTATE_ENABLED AdminState = "enabled"
	ADMINSTATE_DISABLED AdminState = "disabled"
)

// All allowed values of AdminState enum
var AllowedAdminStateEnumValues = []AdminState{
	"enabled",
	"disabled",
}

func (v *AdminState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminState(value)
	for _, existing := range AllowedAdminStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminState", value)
}

// NewAdminStateFromValue returns a pointer to a valid AdminState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminStateFromValue(v string) (*AdminState, error) {
	ev := AdminState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminState: valid values are %v", v, AllowedAdminStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminState) IsValid() bool {
	for _, existing := range AllowedAdminStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminState value
func (v AdminState) Ptr() *AdminState {
	return &v
}

type NullableAdminState struct {
	value *AdminState
	isSet bool
}

func (v NullableAdminState) Get() *AdminState {
	return v.value
}

func (v *NullableAdminState) Set(val *AdminState) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminState) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminState(val *AdminState) *NullableAdminState {
	return &NullableAdminState{value: val, isSet: true}
}

func (v NullableAdminState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

