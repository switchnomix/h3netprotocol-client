/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DeviceSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceSettings{}

// DeviceSettings struct for DeviceSettings
type DeviceSettings struct {
	// Type of device configuration message
	Type string `json:"type"`
	// Timestamp of the message
	Timestamp time.Time `json:"timestamp"`
	// Unique identifier of the device
	DeviceId string `json:"deviceId"`
	Hostname string `json:"hostname"`
	// Represents either an IPv4 or IPv6 address
	ManagementIp *string `json:"managementIp,omitempty"`
	SnmpCommunity *string `json:"snmpCommunity,omitempty"`
	// List of NTP servers (can be IP addresses or FQDNs)
	NtpServers []DeviceSettingsNtpServersInner `json:"ntpServers,omitempty"`
	// List of syslog servers
	SyslogServers []DeviceSettingsNtpServersInner `json:"syslogServers,omitempty"`
	DnsSettings *DeviceSettingsDnsSettings `json:"dnsSettings,omitempty"`
}

type _DeviceSettings DeviceSettings

// NewDeviceSettings instantiates a new DeviceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSettings(type_ string, timestamp time.Time, deviceId string, hostname string) *DeviceSettings {
	this := DeviceSettings{}
	this.Type = type_
	this.Timestamp = timestamp
	this.DeviceId = deviceId
	this.Hostname = hostname
	return &this
}

// NewDeviceSettingsWithDefaults instantiates a new DeviceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSettingsWithDefaults() *DeviceSettings {
	this := DeviceSettings{}
	return &this
}

// GetType returns the Type field value
func (o *DeviceSettings) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeviceSettings) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *DeviceSettings) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *DeviceSettings) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetDeviceId returns the DeviceId field value
func (o *DeviceSettings) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *DeviceSettings) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetHostname returns the Hostname field value
func (o *DeviceSettings) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *DeviceSettings) SetHostname(v string) {
	o.Hostname = v
}

// GetManagementIp returns the ManagementIp field value if set, zero value otherwise.
func (o *DeviceSettings) GetManagementIp() string {
	if o == nil || IsNil(o.ManagementIp) {
		var ret string
		return ret
	}
	return *o.ManagementIp
}

// GetManagementIpOk returns a tuple with the ManagementIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetManagementIpOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementIp) {
		return nil, false
	}
	return o.ManagementIp, true
}

// HasManagementIp returns a boolean if a field has been set.
func (o *DeviceSettings) HasManagementIp() bool {
	if o != nil && !IsNil(o.ManagementIp) {
		return true
	}

	return false
}

// SetManagementIp gets a reference to the given string and assigns it to the ManagementIp field.
func (o *DeviceSettings) SetManagementIp(v string) {
	o.ManagementIp = &v
}

// GetSnmpCommunity returns the SnmpCommunity field value if set, zero value otherwise.
func (o *DeviceSettings) GetSnmpCommunity() string {
	if o == nil || IsNil(o.SnmpCommunity) {
		var ret string
		return ret
	}
	return *o.SnmpCommunity
}

// GetSnmpCommunityOk returns a tuple with the SnmpCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetSnmpCommunityOk() (*string, bool) {
	if o == nil || IsNil(o.SnmpCommunity) {
		return nil, false
	}
	return o.SnmpCommunity, true
}

// HasSnmpCommunity returns a boolean if a field has been set.
func (o *DeviceSettings) HasSnmpCommunity() bool {
	if o != nil && !IsNil(o.SnmpCommunity) {
		return true
	}

	return false
}

// SetSnmpCommunity gets a reference to the given string and assigns it to the SnmpCommunity field.
func (o *DeviceSettings) SetSnmpCommunity(v string) {
	o.SnmpCommunity = &v
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise.
func (o *DeviceSettings) GetNtpServers() []DeviceSettingsNtpServersInner {
	if o == nil || IsNil(o.NtpServers) {
		var ret []DeviceSettingsNtpServersInner
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetNtpServersOk() ([]DeviceSettingsNtpServersInner, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *DeviceSettings) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []DeviceSettingsNtpServersInner and assigns it to the NtpServers field.
func (o *DeviceSettings) SetNtpServers(v []DeviceSettingsNtpServersInner) {
	o.NtpServers = v
}

// GetSyslogServers returns the SyslogServers field value if set, zero value otherwise.
func (o *DeviceSettings) GetSyslogServers() []DeviceSettingsNtpServersInner {
	if o == nil || IsNil(o.SyslogServers) {
		var ret []DeviceSettingsNtpServersInner
		return ret
	}
	return o.SyslogServers
}

// GetSyslogServersOk returns a tuple with the SyslogServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetSyslogServersOk() ([]DeviceSettingsNtpServersInner, bool) {
	if o == nil || IsNil(o.SyslogServers) {
		return nil, false
	}
	return o.SyslogServers, true
}

// HasSyslogServers returns a boolean if a field has been set.
func (o *DeviceSettings) HasSyslogServers() bool {
	if o != nil && !IsNil(o.SyslogServers) {
		return true
	}

	return false
}

// SetSyslogServers gets a reference to the given []DeviceSettingsNtpServersInner and assigns it to the SyslogServers field.
func (o *DeviceSettings) SetSyslogServers(v []DeviceSettingsNtpServersInner) {
	o.SyslogServers = v
}

// GetDnsSettings returns the DnsSettings field value if set, zero value otherwise.
func (o *DeviceSettings) GetDnsSettings() DeviceSettingsDnsSettings {
	if o == nil || IsNil(o.DnsSettings) {
		var ret DeviceSettingsDnsSettings
		return ret
	}
	return *o.DnsSettings
}

// GetDnsSettingsOk returns a tuple with the DnsSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetDnsSettingsOk() (*DeviceSettingsDnsSettings, bool) {
	if o == nil || IsNil(o.DnsSettings) {
		return nil, false
	}
	return o.DnsSettings, true
}

// HasDnsSettings returns a boolean if a field has been set.
func (o *DeviceSettings) HasDnsSettings() bool {
	if o != nil && !IsNil(o.DnsSettings) {
		return true
	}

	return false
}

// SetDnsSettings gets a reference to the given DeviceSettingsDnsSettings and assigns it to the DnsSettings field.
func (o *DeviceSettings) SetDnsSettings(v DeviceSettingsDnsSettings) {
	o.DnsSettings = &v
}

func (o DeviceSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["hostname"] = o.Hostname
	if !IsNil(o.ManagementIp) {
		toSerialize["managementIp"] = o.ManagementIp
	}
	if !IsNil(o.SnmpCommunity) {
		toSerialize["snmpCommunity"] = o.SnmpCommunity
	}
	if !IsNil(o.NtpServers) {
		toSerialize["ntpServers"] = o.NtpServers
	}
	if !IsNil(o.SyslogServers) {
		toSerialize["syslogServers"] = o.SyslogServers
	}
	if !IsNil(o.DnsSettings) {
		toSerialize["dnsSettings"] = o.DnsSettings
	}
	return toSerialize, nil
}

func (o *DeviceSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"deviceId",
		"hostname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceSettings := _DeviceSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceSettings)

	if err != nil {
		return err
	}

	*o = DeviceSettings(varDeviceSettings)

	return err
}

type NullableDeviceSettings struct {
	value *DeviceSettings
	isSet bool
}

func (v NullableDeviceSettings) Get() *DeviceSettings {
	return v.value
}

func (v *NullableDeviceSettings) Set(val *DeviceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSettings(val *DeviceSettings) *NullableDeviceSettings {
	return &NullableDeviceSettings{value: val, isSet: true}
}

func (v NullableDeviceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


