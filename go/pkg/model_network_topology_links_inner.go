/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkTopologyLinksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkTopologyLinksInner{}

// NetworkTopologyLinksInner struct for NetworkTopologyLinksInner
type NetworkTopologyLinksInner struct {
	// Source device ID
	Source string `json:"source"`
	// Target device ID
	Target string `json:"target"`
	// Source port name
	SourcePort *string `json:"sourcePort,omitempty"`
	// Target port name
	TargetPort *string `json:"targetPort,omitempty"`
	// Type of link
	LinkType *string `json:"linkType,omitempty"`
	// Protocol used to discover this link
	DiscoveryProtocol *string `json:"discoveryProtocol,omitempty"`
}

type _NetworkTopologyLinksInner NetworkTopologyLinksInner

// NewNetworkTopologyLinksInner instantiates a new NetworkTopologyLinksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTopologyLinksInner(source string, target string) *NetworkTopologyLinksInner {
	this := NetworkTopologyLinksInner{}
	this.Source = source
	this.Target = target
	return &this
}

// NewNetworkTopologyLinksInnerWithDefaults instantiates a new NetworkTopologyLinksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTopologyLinksInnerWithDefaults() *NetworkTopologyLinksInner {
	this := NetworkTopologyLinksInner{}
	return &this
}

// GetSource returns the Source field value
func (o *NetworkTopologyLinksInner) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *NetworkTopologyLinksInner) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *NetworkTopologyLinksInner) SetSource(v string) {
	o.Source = v
}

// GetTarget returns the Target field value
func (o *NetworkTopologyLinksInner) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *NetworkTopologyLinksInner) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *NetworkTopologyLinksInner) SetTarget(v string) {
	o.Target = v
}

// GetSourcePort returns the SourcePort field value if set, zero value otherwise.
func (o *NetworkTopologyLinksInner) GetSourcePort() string {
	if o == nil || IsNil(o.SourcePort) {
		var ret string
		return ret
	}
	return *o.SourcePort
}

// GetSourcePortOk returns a tuple with the SourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTopologyLinksInner) GetSourcePortOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePort) {
		return nil, false
	}
	return o.SourcePort, true
}

// HasSourcePort returns a boolean if a field has been set.
func (o *NetworkTopologyLinksInner) HasSourcePort() bool {
	if o != nil && !IsNil(o.SourcePort) {
		return true
	}

	return false
}

// SetSourcePort gets a reference to the given string and assigns it to the SourcePort field.
func (o *NetworkTopologyLinksInner) SetSourcePort(v string) {
	o.SourcePort = &v
}

// GetTargetPort returns the TargetPort field value if set, zero value otherwise.
func (o *NetworkTopologyLinksInner) GetTargetPort() string {
	if o == nil || IsNil(o.TargetPort) {
		var ret string
		return ret
	}
	return *o.TargetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTopologyLinksInner) GetTargetPortOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPort) {
		return nil, false
	}
	return o.TargetPort, true
}

// HasTargetPort returns a boolean if a field has been set.
func (o *NetworkTopologyLinksInner) HasTargetPort() bool {
	if o != nil && !IsNil(o.TargetPort) {
		return true
	}

	return false
}

// SetTargetPort gets a reference to the given string and assigns it to the TargetPort field.
func (o *NetworkTopologyLinksInner) SetTargetPort(v string) {
	o.TargetPort = &v
}

// GetLinkType returns the LinkType field value if set, zero value otherwise.
func (o *NetworkTopologyLinksInner) GetLinkType() string {
	if o == nil || IsNil(o.LinkType) {
		var ret string
		return ret
	}
	return *o.LinkType
}

// GetLinkTypeOk returns a tuple with the LinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTopologyLinksInner) GetLinkTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkType) {
		return nil, false
	}
	return o.LinkType, true
}

// HasLinkType returns a boolean if a field has been set.
func (o *NetworkTopologyLinksInner) HasLinkType() bool {
	if o != nil && !IsNil(o.LinkType) {
		return true
	}

	return false
}

// SetLinkType gets a reference to the given string and assigns it to the LinkType field.
func (o *NetworkTopologyLinksInner) SetLinkType(v string) {
	o.LinkType = &v
}

// GetDiscoveryProtocol returns the DiscoveryProtocol field value if set, zero value otherwise.
func (o *NetworkTopologyLinksInner) GetDiscoveryProtocol() string {
	if o == nil || IsNil(o.DiscoveryProtocol) {
		var ret string
		return ret
	}
	return *o.DiscoveryProtocol
}

// GetDiscoveryProtocolOk returns a tuple with the DiscoveryProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTopologyLinksInner) GetDiscoveryProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryProtocol) {
		return nil, false
	}
	return o.DiscoveryProtocol, true
}

// HasDiscoveryProtocol returns a boolean if a field has been set.
func (o *NetworkTopologyLinksInner) HasDiscoveryProtocol() bool {
	if o != nil && !IsNil(o.DiscoveryProtocol) {
		return true
	}

	return false
}

// SetDiscoveryProtocol gets a reference to the given string and assigns it to the DiscoveryProtocol field.
func (o *NetworkTopologyLinksInner) SetDiscoveryProtocol(v string) {
	o.DiscoveryProtocol = &v
}

func (o NetworkTopologyLinksInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkTopologyLinksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["target"] = o.Target
	if !IsNil(o.SourcePort) {
		toSerialize["sourcePort"] = o.SourcePort
	}
	if !IsNil(o.TargetPort) {
		toSerialize["targetPort"] = o.TargetPort
	}
	if !IsNil(o.LinkType) {
		toSerialize["linkType"] = o.LinkType
	}
	if !IsNil(o.DiscoveryProtocol) {
		toSerialize["discoveryProtocol"] = o.DiscoveryProtocol
	}
	return toSerialize, nil
}

func (o *NetworkTopologyLinksInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkTopologyLinksInner := _NetworkTopologyLinksInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkTopologyLinksInner)

	if err != nil {
		return err
	}

	*o = NetworkTopologyLinksInner(varNetworkTopologyLinksInner)

	return err
}

type NullableNetworkTopologyLinksInner struct {
	value *NetworkTopologyLinksInner
	isSet bool
}

func (v NullableNetworkTopologyLinksInner) Get() *NetworkTopologyLinksInner {
	return v.value
}

func (v *NullableNetworkTopologyLinksInner) Set(val *NetworkTopologyLinksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTopologyLinksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTopologyLinksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTopologyLinksInner(val *NetworkTopologyLinksInner) *NullableNetworkTopologyLinksInner {
	return &NullableNetworkTopologyLinksInner{value: val, isSet: true}
}

func (v NullableNetworkTopologyLinksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTopologyLinksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


