/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the VLANProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VLANProperties{}

// VLANProperties Extended VLAN properties
type VLANProperties struct {
	Mtu *int32 `json:"mtu,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	IgmpSnooping *bool `json:"igmpSnooping,omitempty"`
	DhcpSnooping *bool `json:"dhcpSnooping,omitempty"`
	ArpInspection *bool `json:"arpInspection,omitempty"`
	StormControl *VLANPropertiesStormControl `json:"stormControl,omitempty"`
}

// NewVLANProperties instantiates a new VLANProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVLANProperties() *VLANProperties {
	this := VLANProperties{}
	return &this
}

// NewVLANPropertiesWithDefaults instantiates a new VLANProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVLANPropertiesWithDefaults() *VLANProperties {
	this := VLANProperties{}
	return &this
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *VLANProperties) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANProperties) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *VLANProperties) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *VLANProperties) SetMtu(v int32) {
	o.Mtu = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *VLANProperties) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANProperties) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *VLANProperties) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *VLANProperties) SetPriority(v int32) {
	o.Priority = &v
}

// GetIgmpSnooping returns the IgmpSnooping field value if set, zero value otherwise.
func (o *VLANProperties) GetIgmpSnooping() bool {
	if o == nil || IsNil(o.IgmpSnooping) {
		var ret bool
		return ret
	}
	return *o.IgmpSnooping
}

// GetIgmpSnoopingOk returns a tuple with the IgmpSnooping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANProperties) GetIgmpSnoopingOk() (*bool, bool) {
	if o == nil || IsNil(o.IgmpSnooping) {
		return nil, false
	}
	return o.IgmpSnooping, true
}

// HasIgmpSnooping returns a boolean if a field has been set.
func (o *VLANProperties) HasIgmpSnooping() bool {
	if o != nil && !IsNil(o.IgmpSnooping) {
		return true
	}

	return false
}

// SetIgmpSnooping gets a reference to the given bool and assigns it to the IgmpSnooping field.
func (o *VLANProperties) SetIgmpSnooping(v bool) {
	o.IgmpSnooping = &v
}

// GetDhcpSnooping returns the DhcpSnooping field value if set, zero value otherwise.
func (o *VLANProperties) GetDhcpSnooping() bool {
	if o == nil || IsNil(o.DhcpSnooping) {
		var ret bool
		return ret
	}
	return *o.DhcpSnooping
}

// GetDhcpSnoopingOk returns a tuple with the DhcpSnooping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANProperties) GetDhcpSnoopingOk() (*bool, bool) {
	if o == nil || IsNil(o.DhcpSnooping) {
		return nil, false
	}
	return o.DhcpSnooping, true
}

// HasDhcpSnooping returns a boolean if a field has been set.
func (o *VLANProperties) HasDhcpSnooping() bool {
	if o != nil && !IsNil(o.DhcpSnooping) {
		return true
	}

	return false
}

// SetDhcpSnooping gets a reference to the given bool and assigns it to the DhcpSnooping field.
func (o *VLANProperties) SetDhcpSnooping(v bool) {
	o.DhcpSnooping = &v
}

// GetArpInspection returns the ArpInspection field value if set, zero value otherwise.
func (o *VLANProperties) GetArpInspection() bool {
	if o == nil || IsNil(o.ArpInspection) {
		var ret bool
		return ret
	}
	return *o.ArpInspection
}

// GetArpInspectionOk returns a tuple with the ArpInspection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANProperties) GetArpInspectionOk() (*bool, bool) {
	if o == nil || IsNil(o.ArpInspection) {
		return nil, false
	}
	return o.ArpInspection, true
}

// HasArpInspection returns a boolean if a field has been set.
func (o *VLANProperties) HasArpInspection() bool {
	if o != nil && !IsNil(o.ArpInspection) {
		return true
	}

	return false
}

// SetArpInspection gets a reference to the given bool and assigns it to the ArpInspection field.
func (o *VLANProperties) SetArpInspection(v bool) {
	o.ArpInspection = &v
}

// GetStormControl returns the StormControl field value if set, zero value otherwise.
func (o *VLANProperties) GetStormControl() VLANPropertiesStormControl {
	if o == nil || IsNil(o.StormControl) {
		var ret VLANPropertiesStormControl
		return ret
	}
	return *o.StormControl
}

// GetStormControlOk returns a tuple with the StormControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANProperties) GetStormControlOk() (*VLANPropertiesStormControl, bool) {
	if o == nil || IsNil(o.StormControl) {
		return nil, false
	}
	return o.StormControl, true
}

// HasStormControl returns a boolean if a field has been set.
func (o *VLANProperties) HasStormControl() bool {
	if o != nil && !IsNil(o.StormControl) {
		return true
	}

	return false
}

// SetStormControl gets a reference to the given VLANPropertiesStormControl and assigns it to the StormControl field.
func (o *VLANProperties) SetStormControl(v VLANPropertiesStormControl) {
	o.StormControl = &v
}

func (o VLANProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VLANProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.IgmpSnooping) {
		toSerialize["igmpSnooping"] = o.IgmpSnooping
	}
	if !IsNil(o.DhcpSnooping) {
		toSerialize["dhcpSnooping"] = o.DhcpSnooping
	}
	if !IsNil(o.ArpInspection) {
		toSerialize["arpInspection"] = o.ArpInspection
	}
	if !IsNil(o.StormControl) {
		toSerialize["stormControl"] = o.StormControl
	}
	return toSerialize, nil
}

type NullableVLANProperties struct {
	value *VLANProperties
	isSet bool
}

func (v NullableVLANProperties) Get() *VLANProperties {
	return v.value
}

func (v *NullableVLANProperties) Set(val *VLANProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableVLANProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableVLANProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVLANProperties(val *VLANProperties) *NullableVLANProperties {
	return &NullableVLANProperties{value: val, isSet: true}
}

func (v NullableVLANProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVLANProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


