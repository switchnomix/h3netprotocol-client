/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the SystemSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemSettings{}

// SystemSettings struct for SystemSettings
type SystemSettings struct {
	Timezone *string `json:"timezone,omitempty"`
	NtpServers []string `json:"ntpServers,omitempty"`
	LoggingLevel *string `json:"loggingLevel,omitempty"`
}

// NewSystemSettings instantiates a new SystemSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemSettings() *SystemSettings {
	this := SystemSettings{}
	return &this
}

// NewSystemSettingsWithDefaults instantiates a new SystemSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemSettingsWithDefaults() *SystemSettings {
	this := SystemSettings{}
	return &this
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *SystemSettings) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *SystemSettings) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *SystemSettings) SetTimezone(v string) {
	o.Timezone = &v
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise.
func (o *SystemSettings) GetNtpServers() []string {
	if o == nil || IsNil(o.NtpServers) {
		var ret []string
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *SystemSettings) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *SystemSettings) SetNtpServers(v []string) {
	o.NtpServers = v
}

// GetLoggingLevel returns the LoggingLevel field value if set, zero value otherwise.
func (o *SystemSettings) GetLoggingLevel() string {
	if o == nil || IsNil(o.LoggingLevel) {
		var ret string
		return ret
	}
	return *o.LoggingLevel
}

// GetLoggingLevelOk returns a tuple with the LoggingLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetLoggingLevelOk() (*string, bool) {
	if o == nil || IsNil(o.LoggingLevel) {
		return nil, false
	}
	return o.LoggingLevel, true
}

// HasLoggingLevel returns a boolean if a field has been set.
func (o *SystemSettings) HasLoggingLevel() bool {
	if o != nil && !IsNil(o.LoggingLevel) {
		return true
	}

	return false
}

// SetLoggingLevel gets a reference to the given string and assigns it to the LoggingLevel field.
func (o *SystemSettings) SetLoggingLevel(v string) {
	o.LoggingLevel = &v
}

func (o SystemSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.NtpServers) {
		toSerialize["ntpServers"] = o.NtpServers
	}
	if !IsNil(o.LoggingLevel) {
		toSerialize["loggingLevel"] = o.LoggingLevel
	}
	return toSerialize, nil
}

type NullableSystemSettings struct {
	value *SystemSettings
	isSet bool
}

func (v NullableSystemSettings) Get() *SystemSettings {
	return v.value
}

func (v *NullableSystemSettings) Set(val *SystemSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemSettings(val *SystemSettings) *NullableSystemSettings {
	return &NullableSystemSettings{value: val, isSet: true}
}

func (v NullableSystemSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


