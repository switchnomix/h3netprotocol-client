/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PipelineUpdateMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineUpdateMessage{}

// PipelineUpdateMessage struct for PipelineUpdateMessage
type PipelineUpdateMessage struct {
	Type string `json:"type"`
	Timestamp time.Time `json:"timestamp"`
	SchemaVersion string `json:"schemaVersion"`
	PipelineConfig *PipelineConfig `json:"pipelineConfig,omitempty"`
	// Defines the type of operation for flow rule management
	OperationType string `json:"operationType"`
	// List of flow entries to be added, updated, or deleted
	FlowEntries []FlowEntry `json:"flowEntries"`
	ApplyImmediately bool `json:"applyImmediately"`
}

type _PipelineUpdateMessage PipelineUpdateMessage

// NewPipelineUpdateMessage instantiates a new PipelineUpdateMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineUpdateMessage(type_ string, timestamp time.Time, schemaVersion string, operationType string, flowEntries []FlowEntry, applyImmediately bool) *PipelineUpdateMessage {
	this := PipelineUpdateMessage{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.OperationType = operationType
	this.FlowEntries = flowEntries
	this.ApplyImmediately = applyImmediately
	return &this
}

// NewPipelineUpdateMessageWithDefaults instantiates a new PipelineUpdateMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineUpdateMessageWithDefaults() *PipelineUpdateMessage {
	this := PipelineUpdateMessage{}
	return &this
}

// GetType returns the Type field value
func (o *PipelineUpdateMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PipelineUpdateMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PipelineUpdateMessage) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *PipelineUpdateMessage) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PipelineUpdateMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PipelineUpdateMessage) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *PipelineUpdateMessage) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *PipelineUpdateMessage) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *PipelineUpdateMessage) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetPipelineConfig returns the PipelineConfig field value if set, zero value otherwise.
func (o *PipelineUpdateMessage) GetPipelineConfig() PipelineConfig {
	if o == nil || IsNil(o.PipelineConfig) {
		var ret PipelineConfig
		return ret
	}
	return *o.PipelineConfig
}

// GetPipelineConfigOk returns a tuple with the PipelineConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineUpdateMessage) GetPipelineConfigOk() (*PipelineConfig, bool) {
	if o == nil || IsNil(o.PipelineConfig) {
		return nil, false
	}
	return o.PipelineConfig, true
}

// HasPipelineConfig returns a boolean if a field has been set.
func (o *PipelineUpdateMessage) HasPipelineConfig() bool {
	if o != nil && !IsNil(o.PipelineConfig) {
		return true
	}

	return false
}

// SetPipelineConfig gets a reference to the given PipelineConfig and assigns it to the PipelineConfig field.
func (o *PipelineUpdateMessage) SetPipelineConfig(v PipelineConfig) {
	o.PipelineConfig = &v
}

// GetOperationType returns the OperationType field value
func (o *PipelineUpdateMessage) GetOperationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *PipelineUpdateMessage) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *PipelineUpdateMessage) SetOperationType(v string) {
	o.OperationType = v
}

// GetFlowEntries returns the FlowEntries field value
func (o *PipelineUpdateMessage) GetFlowEntries() []FlowEntry {
	if o == nil {
		var ret []FlowEntry
		return ret
	}

	return o.FlowEntries
}

// GetFlowEntriesOk returns a tuple with the FlowEntries field value
// and a boolean to check if the value has been set.
func (o *PipelineUpdateMessage) GetFlowEntriesOk() ([]FlowEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlowEntries, true
}

// SetFlowEntries sets field value
func (o *PipelineUpdateMessage) SetFlowEntries(v []FlowEntry) {
	o.FlowEntries = v
}

// GetApplyImmediately returns the ApplyImmediately field value
func (o *PipelineUpdateMessage) GetApplyImmediately() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApplyImmediately
}

// GetApplyImmediatelyOk returns a tuple with the ApplyImmediately field value
// and a boolean to check if the value has been set.
func (o *PipelineUpdateMessage) GetApplyImmediatelyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplyImmediately, true
}

// SetApplyImmediately sets field value
func (o *PipelineUpdateMessage) SetApplyImmediately(v bool) {
	o.ApplyImmediately = v
}

func (o PipelineUpdateMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineUpdateMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	if !IsNil(o.PipelineConfig) {
		toSerialize["pipelineConfig"] = o.PipelineConfig
	}
	toSerialize["operationType"] = o.OperationType
	toSerialize["flowEntries"] = o.FlowEntries
	toSerialize["applyImmediately"] = o.ApplyImmediately
	return toSerialize, nil
}

func (o *PipelineUpdateMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"operationType",
		"flowEntries",
		"applyImmediately",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPipelineUpdateMessage := _PipelineUpdateMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPipelineUpdateMessage)

	if err != nil {
		return err
	}

	*o = PipelineUpdateMessage(varPipelineUpdateMessage)

	return err
}

type NullablePipelineUpdateMessage struct {
	value *PipelineUpdateMessage
	isSet bool
}

func (v NullablePipelineUpdateMessage) Get() *PipelineUpdateMessage {
	return v.value
}

func (v *NullablePipelineUpdateMessage) Set(val *PipelineUpdateMessage) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineUpdateMessage) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineUpdateMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineUpdateMessage(val *PipelineUpdateMessage) *NullablePipelineUpdateMessage {
	return &NullablePipelineUpdateMessage{value: val, isSet: true}
}

func (v NullablePipelineUpdateMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineUpdateMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


