/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the Bgp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bgp{}

// Bgp struct for Bgp
type Bgp struct {
	AsNumber *int32 `json:"asNumber,omitempty"`
	// Represents either an IPv4 or IPv6 address
	RouterId *string `json:"routerId,omitempty"`
	Neighbors []BGPNeighbor `json:"neighbors,omitempty"`
}

// NewBgp instantiates a new Bgp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgp() *Bgp {
	this := Bgp{}
	return &this
}

// NewBgpWithDefaults instantiates a new Bgp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpWithDefaults() *Bgp {
	this := Bgp{}
	return &this
}

// GetAsNumber returns the AsNumber field value if set, zero value otherwise.
func (o *Bgp) GetAsNumber() int32 {
	if o == nil || IsNil(o.AsNumber) {
		var ret int32
		return ret
	}
	return *o.AsNumber
}

// GetAsNumberOk returns a tuple with the AsNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bgp) GetAsNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.AsNumber) {
		return nil, false
	}
	return o.AsNumber, true
}

// HasAsNumber returns a boolean if a field has been set.
func (o *Bgp) HasAsNumber() bool {
	if o != nil && !IsNil(o.AsNumber) {
		return true
	}

	return false
}

// SetAsNumber gets a reference to the given int32 and assigns it to the AsNumber field.
func (o *Bgp) SetAsNumber(v int32) {
	o.AsNumber = &v
}

// GetRouterId returns the RouterId field value if set, zero value otherwise.
func (o *Bgp) GetRouterId() string {
	if o == nil || IsNil(o.RouterId) {
		var ret string
		return ret
	}
	return *o.RouterId
}

// GetRouterIdOk returns a tuple with the RouterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bgp) GetRouterIdOk() (*string, bool) {
	if o == nil || IsNil(o.RouterId) {
		return nil, false
	}
	return o.RouterId, true
}

// HasRouterId returns a boolean if a field has been set.
func (o *Bgp) HasRouterId() bool {
	if o != nil && !IsNil(o.RouterId) {
		return true
	}

	return false
}

// SetRouterId gets a reference to the given string and assigns it to the RouterId field.
func (o *Bgp) SetRouterId(v string) {
	o.RouterId = &v
}

// GetNeighbors returns the Neighbors field value if set, zero value otherwise.
func (o *Bgp) GetNeighbors() []BGPNeighbor {
	if o == nil || IsNil(o.Neighbors) {
		var ret []BGPNeighbor
		return ret
	}
	return o.Neighbors
}

// GetNeighborsOk returns a tuple with the Neighbors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bgp) GetNeighborsOk() ([]BGPNeighbor, bool) {
	if o == nil || IsNil(o.Neighbors) {
		return nil, false
	}
	return o.Neighbors, true
}

// HasNeighbors returns a boolean if a field has been set.
func (o *Bgp) HasNeighbors() bool {
	if o != nil && !IsNil(o.Neighbors) {
		return true
	}

	return false
}

// SetNeighbors gets a reference to the given []BGPNeighbor and assigns it to the Neighbors field.
func (o *Bgp) SetNeighbors(v []BGPNeighbor) {
	o.Neighbors = v
}

func (o Bgp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bgp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsNumber) {
		toSerialize["asNumber"] = o.AsNumber
	}
	if !IsNil(o.RouterId) {
		toSerialize["routerId"] = o.RouterId
	}
	if !IsNil(o.Neighbors) {
		toSerialize["neighbors"] = o.Neighbors
	}
	return toSerialize, nil
}

type NullableBgp struct {
	value *Bgp
	isSet bool
}

func (v NullableBgp) Get() *Bgp {
	return v.value
}

func (v *NullableBgp) Set(val *Bgp) {
	v.value = val
	v.isSet = true
}

func (v NullableBgp) IsSet() bool {
	return v.isSet
}

func (v *NullableBgp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgp(val *Bgp) *NullableBgp {
	return &NullableBgp{value: val, isSet: true}
}

func (v NullableBgp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


