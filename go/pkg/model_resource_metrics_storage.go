/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ResourceMetricsStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceMetricsStorage{}

// ResourceMetricsStorage struct for ResourceMetricsStorage
type ResourceMetricsStorage struct {
	Total *float32 `json:"total,omitempty"`
	Used *float32 `json:"used,omitempty"`
	Free *float32 `json:"free,omitempty"`
}

// NewResourceMetricsStorage instantiates a new ResourceMetricsStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceMetricsStorage() *ResourceMetricsStorage {
	this := ResourceMetricsStorage{}
	return &this
}

// NewResourceMetricsStorageWithDefaults instantiates a new ResourceMetricsStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceMetricsStorageWithDefaults() *ResourceMetricsStorage {
	this := ResourceMetricsStorage{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ResourceMetricsStorage) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsStorage) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ResourceMetricsStorage) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *ResourceMetricsStorage) SetTotal(v float32) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *ResourceMetricsStorage) GetUsed() float32 {
	if o == nil || IsNil(o.Used) {
		var ret float32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsStorage) GetUsedOk() (*float32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *ResourceMetricsStorage) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given float32 and assigns it to the Used field.
func (o *ResourceMetricsStorage) SetUsed(v float32) {
	o.Used = &v
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *ResourceMetricsStorage) GetFree() float32 {
	if o == nil || IsNil(o.Free) {
		var ret float32
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMetricsStorage) GetFreeOk() (*float32, bool) {
	if o == nil || IsNil(o.Free) {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *ResourceMetricsStorage) HasFree() bool {
	if o != nil && !IsNil(o.Free) {
		return true
	}

	return false
}

// SetFree gets a reference to the given float32 and assigns it to the Free field.
func (o *ResourceMetricsStorage) SetFree(v float32) {
	o.Free = &v
}

func (o ResourceMetricsStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceMetricsStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.Free) {
		toSerialize["free"] = o.Free
	}
	return toSerialize, nil
}

type NullableResourceMetricsStorage struct {
	value *ResourceMetricsStorage
	isSet bool
}

func (v NullableResourceMetricsStorage) Get() *ResourceMetricsStorage {
	return v.value
}

func (v *NullableResourceMetricsStorage) Set(val *ResourceMetricsStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceMetricsStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceMetricsStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceMetricsStorage(val *ResourceMetricsStorage) *NullableResourceMetricsStorage {
	return &NullableResourceMetricsStorage{value: val, isSet: true}
}

func (v NullableResourceMetricsStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceMetricsStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


