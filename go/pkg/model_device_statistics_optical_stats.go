/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the DeviceStatisticsOpticalStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceStatisticsOpticalStats{}

// DeviceStatisticsOpticalStats Optical device statistics
type DeviceStatisticsOpticalStats struct {
	// Received optical power
	RxPower *float32 `json:"rxPower,omitempty"`
	// Transmitted optical power
	TxPower *float32 `json:"txPower,omitempty"`
	// Device temperature
	Temperature *float32 `json:"temperature,omitempty"`
	// Device voltage
	Voltage *float32 `json:"voltage,omitempty"`
	// Device bias
	Bias *float32 `json:"bias,omitempty"`
}

// NewDeviceStatisticsOpticalStats instantiates a new DeviceStatisticsOpticalStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceStatisticsOpticalStats() *DeviceStatisticsOpticalStats {
	this := DeviceStatisticsOpticalStats{}
	return &this
}

// NewDeviceStatisticsOpticalStatsWithDefaults instantiates a new DeviceStatisticsOpticalStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceStatisticsOpticalStatsWithDefaults() *DeviceStatisticsOpticalStats {
	this := DeviceStatisticsOpticalStats{}
	return &this
}

// GetRxPower returns the RxPower field value if set, zero value otherwise.
func (o *DeviceStatisticsOpticalStats) GetRxPower() float32 {
	if o == nil || IsNil(o.RxPower) {
		var ret float32
		return ret
	}
	return *o.RxPower
}

// GetRxPowerOk returns a tuple with the RxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatisticsOpticalStats) GetRxPowerOk() (*float32, bool) {
	if o == nil || IsNil(o.RxPower) {
		return nil, false
	}
	return o.RxPower, true
}

// HasRxPower returns a boolean if a field has been set.
func (o *DeviceStatisticsOpticalStats) HasRxPower() bool {
	if o != nil && !IsNil(o.RxPower) {
		return true
	}

	return false
}

// SetRxPower gets a reference to the given float32 and assigns it to the RxPower field.
func (o *DeviceStatisticsOpticalStats) SetRxPower(v float32) {
	o.RxPower = &v
}

// GetTxPower returns the TxPower field value if set, zero value otherwise.
func (o *DeviceStatisticsOpticalStats) GetTxPower() float32 {
	if o == nil || IsNil(o.TxPower) {
		var ret float32
		return ret
	}
	return *o.TxPower
}

// GetTxPowerOk returns a tuple with the TxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatisticsOpticalStats) GetTxPowerOk() (*float32, bool) {
	if o == nil || IsNil(o.TxPower) {
		return nil, false
	}
	return o.TxPower, true
}

// HasTxPower returns a boolean if a field has been set.
func (o *DeviceStatisticsOpticalStats) HasTxPower() bool {
	if o != nil && !IsNil(o.TxPower) {
		return true
	}

	return false
}

// SetTxPower gets a reference to the given float32 and assigns it to the TxPower field.
func (o *DeviceStatisticsOpticalStats) SetTxPower(v float32) {
	o.TxPower = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *DeviceStatisticsOpticalStats) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatisticsOpticalStats) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *DeviceStatisticsOpticalStats) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *DeviceStatisticsOpticalStats) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetVoltage returns the Voltage field value if set, zero value otherwise.
func (o *DeviceStatisticsOpticalStats) GetVoltage() float32 {
	if o == nil || IsNil(o.Voltage) {
		var ret float32
		return ret
	}
	return *o.Voltage
}

// GetVoltageOk returns a tuple with the Voltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatisticsOpticalStats) GetVoltageOk() (*float32, bool) {
	if o == nil || IsNil(o.Voltage) {
		return nil, false
	}
	return o.Voltage, true
}

// HasVoltage returns a boolean if a field has been set.
func (o *DeviceStatisticsOpticalStats) HasVoltage() bool {
	if o != nil && !IsNil(o.Voltage) {
		return true
	}

	return false
}

// SetVoltage gets a reference to the given float32 and assigns it to the Voltage field.
func (o *DeviceStatisticsOpticalStats) SetVoltage(v float32) {
	o.Voltage = &v
}

// GetBias returns the Bias field value if set, zero value otherwise.
func (o *DeviceStatisticsOpticalStats) GetBias() float32 {
	if o == nil || IsNil(o.Bias) {
		var ret float32
		return ret
	}
	return *o.Bias
}

// GetBiasOk returns a tuple with the Bias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatisticsOpticalStats) GetBiasOk() (*float32, bool) {
	if o == nil || IsNil(o.Bias) {
		return nil, false
	}
	return o.Bias, true
}

// HasBias returns a boolean if a field has been set.
func (o *DeviceStatisticsOpticalStats) HasBias() bool {
	if o != nil && !IsNil(o.Bias) {
		return true
	}

	return false
}

// SetBias gets a reference to the given float32 and assigns it to the Bias field.
func (o *DeviceStatisticsOpticalStats) SetBias(v float32) {
	o.Bias = &v
}

func (o DeviceStatisticsOpticalStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceStatisticsOpticalStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RxPower) {
		toSerialize["rxPower"] = o.RxPower
	}
	if !IsNil(o.TxPower) {
		toSerialize["txPower"] = o.TxPower
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Voltage) {
		toSerialize["voltage"] = o.Voltage
	}
	if !IsNil(o.Bias) {
		toSerialize["bias"] = o.Bias
	}
	return toSerialize, nil
}

type NullableDeviceStatisticsOpticalStats struct {
	value *DeviceStatisticsOpticalStats
	isSet bool
}

func (v NullableDeviceStatisticsOpticalStats) Get() *DeviceStatisticsOpticalStats {
	return v.value
}

func (v *NullableDeviceStatisticsOpticalStats) Set(val *DeviceStatisticsOpticalStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceStatisticsOpticalStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceStatisticsOpticalStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceStatisticsOpticalStats(val *DeviceStatisticsOpticalStats) *NullableDeviceStatisticsOpticalStats {
	return &NullableDeviceStatisticsOpticalStats{value: val, isSet: true}
}

func (v NullableDeviceStatisticsOpticalStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceStatisticsOpticalStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


