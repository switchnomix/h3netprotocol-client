/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"fmt"
)

// InterfaceSpeed Interface speed in standard units
type InterfaceSpeed string

// List of InterfaceSpeed
const (
	INTERFACESPEED__10_MBPS InterfaceSpeed = "10Mbps"
	INTERFACESPEED__100_MBPS InterfaceSpeed = "100Mbps"
	INTERFACESPEED__1_GBPS InterfaceSpeed = "1Gbps"
	INTERFACESPEED__2_5_GBPS InterfaceSpeed = "2.5Gbps"
	INTERFACESPEED__5_GBPS InterfaceSpeed = "5Gbps"
	INTERFACESPEED__10_GBPS InterfaceSpeed = "10Gbps"
	INTERFACESPEED__25_GBPS InterfaceSpeed = "25Gbps"
	INTERFACESPEED__40_GBPS InterfaceSpeed = "40Gbps"
	INTERFACESPEED__100_GBPS InterfaceSpeed = "100Gbps"
)

// All allowed values of InterfaceSpeed enum
var AllowedInterfaceSpeedEnumValues = []InterfaceSpeed{
	"10Mbps",
	"100Mbps",
	"1Gbps",
	"2.5Gbps",
	"5Gbps",
	"10Gbps",
	"25Gbps",
	"40Gbps",
	"100Gbps",
}

func (v *InterfaceSpeed) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceSpeed(value)
	for _, existing := range AllowedInterfaceSpeedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceSpeed", value)
}

// NewInterfaceSpeedFromValue returns a pointer to a valid InterfaceSpeed
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceSpeedFromValue(v string) (*InterfaceSpeed, error) {
	ev := InterfaceSpeed(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceSpeed: valid values are %v", v, AllowedInterfaceSpeedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceSpeed) IsValid() bool {
	for _, existing := range AllowedInterfaceSpeedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceSpeed value
func (v InterfaceSpeed) Ptr() *InterfaceSpeed {
	return &v
}

type NullableInterfaceSpeed struct {
	value *InterfaceSpeed
	isSet bool
}

func (v NullableInterfaceSpeed) Get() *InterfaceSpeed {
	return v.value
}

func (v *NullableInterfaceSpeed) Set(val *InterfaceSpeed) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceSpeed) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceSpeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceSpeed(val *InterfaceSpeed) *NullableInterfaceSpeed {
	return &NullableInterfaceSpeed{value: val, isSet: true}
}

func (v NullableInterfaceSpeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceSpeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

