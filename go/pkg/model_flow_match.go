/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the FlowMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowMatch{}

// FlowMatch Match fields for flow entries supporting both IPv4 and IPv6
type FlowMatch struct {
	InPort *int32 `json:"in_port,omitempty"`
	EthSrc *string `json:"eth_src,omitempty"`
	EthDst *string `json:"eth_dst,omitempty"`
	// Ethernet type (2048 - 0x0800 for IPv4, 34525 - 0x86DD for IPv6)
	EthType *int32 `json:"eth_type,omitempty"`
	// IP protocol number
	IpProto *int32 `json:"ip_proto,omitempty"`
	// IPv4 source address
	Ipv4Src *string `json:"ipv4_src,omitempty"`
	// IPv4 destination address
	Ipv4Dst *string `json:"ipv4_dst,omitempty"`
	// IPv6 source address
	Ipv6Src *string `json:"ipv6_src,omitempty"`
	// IPv6 destination address
	Ipv6Dst *string `json:"ipv6_dst,omitempty"`
	// IPv6 neighbor discovery target address
	Ipv6NdTarget *string `json:"ipv6_nd_target,omitempty"`
	// IPv6 neighbor discovery source link-layer address
	Ipv6NdSll *string `json:"ipv6_nd_sll,omitempty"`
	// IPv6 neighbor discovery target link-layer address
	Ipv6NdTll *string `json:"ipv6_nd_tll,omitempty"`
	// VLAN ID
	VlanVid *int32 `json:"vlan_vid,omitempty"`
	TcpSrc *int32 `json:"tcp_src,omitempty"`
	TcpDst *int32 `json:"tcp_dst,omitempty"`
	UdpSrc *int32 `json:"udp_src,omitempty"`
	UdpDst *int32 `json:"udp_dst,omitempty"`
	// ICMPv6 type
	Icmpv6Type *int32 `json:"icmpv6_type,omitempty"`
	// ICMPv6 code
	Icmpv6Code *int32 `json:"icmpv6_code,omitempty"`
}

// NewFlowMatch instantiates a new FlowMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowMatch() *FlowMatch {
	this := FlowMatch{}
	return &this
}

// NewFlowMatchWithDefaults instantiates a new FlowMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowMatchWithDefaults() *FlowMatch {
	this := FlowMatch{}
	return &this
}

// GetInPort returns the InPort field value if set, zero value otherwise.
func (o *FlowMatch) GetInPort() int32 {
	if o == nil || IsNil(o.InPort) {
		var ret int32
		return ret
	}
	return *o.InPort
}

// GetInPortOk returns a tuple with the InPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetInPortOk() (*int32, bool) {
	if o == nil || IsNil(o.InPort) {
		return nil, false
	}
	return o.InPort, true
}

// HasInPort returns a boolean if a field has been set.
func (o *FlowMatch) HasInPort() bool {
	if o != nil && !IsNil(o.InPort) {
		return true
	}

	return false
}

// SetInPort gets a reference to the given int32 and assigns it to the InPort field.
func (o *FlowMatch) SetInPort(v int32) {
	o.InPort = &v
}

// GetEthSrc returns the EthSrc field value if set, zero value otherwise.
func (o *FlowMatch) GetEthSrc() string {
	if o == nil || IsNil(o.EthSrc) {
		var ret string
		return ret
	}
	return *o.EthSrc
}

// GetEthSrcOk returns a tuple with the EthSrc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetEthSrcOk() (*string, bool) {
	if o == nil || IsNil(o.EthSrc) {
		return nil, false
	}
	return o.EthSrc, true
}

// HasEthSrc returns a boolean if a field has been set.
func (o *FlowMatch) HasEthSrc() bool {
	if o != nil && !IsNil(o.EthSrc) {
		return true
	}

	return false
}

// SetEthSrc gets a reference to the given string and assigns it to the EthSrc field.
func (o *FlowMatch) SetEthSrc(v string) {
	o.EthSrc = &v
}

// GetEthDst returns the EthDst field value if set, zero value otherwise.
func (o *FlowMatch) GetEthDst() string {
	if o == nil || IsNil(o.EthDst) {
		var ret string
		return ret
	}
	return *o.EthDst
}

// GetEthDstOk returns a tuple with the EthDst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetEthDstOk() (*string, bool) {
	if o == nil || IsNil(o.EthDst) {
		return nil, false
	}
	return o.EthDst, true
}

// HasEthDst returns a boolean if a field has been set.
func (o *FlowMatch) HasEthDst() bool {
	if o != nil && !IsNil(o.EthDst) {
		return true
	}

	return false
}

// SetEthDst gets a reference to the given string and assigns it to the EthDst field.
func (o *FlowMatch) SetEthDst(v string) {
	o.EthDst = &v
}

// GetEthType returns the EthType field value if set, zero value otherwise.
func (o *FlowMatch) GetEthType() int32 {
	if o == nil || IsNil(o.EthType) {
		var ret int32
		return ret
	}
	return *o.EthType
}

// GetEthTypeOk returns a tuple with the EthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetEthTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.EthType) {
		return nil, false
	}
	return o.EthType, true
}

// HasEthType returns a boolean if a field has been set.
func (o *FlowMatch) HasEthType() bool {
	if o != nil && !IsNil(o.EthType) {
		return true
	}

	return false
}

// SetEthType gets a reference to the given int32 and assigns it to the EthType field.
func (o *FlowMatch) SetEthType(v int32) {
	o.EthType = &v
}

// GetIpProto returns the IpProto field value if set, zero value otherwise.
func (o *FlowMatch) GetIpProto() int32 {
	if o == nil || IsNil(o.IpProto) {
		var ret int32
		return ret
	}
	return *o.IpProto
}

// GetIpProtoOk returns a tuple with the IpProto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpProtoOk() (*int32, bool) {
	if o == nil || IsNil(o.IpProto) {
		return nil, false
	}
	return o.IpProto, true
}

// HasIpProto returns a boolean if a field has been set.
func (o *FlowMatch) HasIpProto() bool {
	if o != nil && !IsNil(o.IpProto) {
		return true
	}

	return false
}

// SetIpProto gets a reference to the given int32 and assigns it to the IpProto field.
func (o *FlowMatch) SetIpProto(v int32) {
	o.IpProto = &v
}

// GetIpv4Src returns the Ipv4Src field value if set, zero value otherwise.
func (o *FlowMatch) GetIpv4Src() string {
	if o == nil || IsNil(o.Ipv4Src) {
		var ret string
		return ret
	}
	return *o.Ipv4Src
}

// GetIpv4SrcOk returns a tuple with the Ipv4Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpv4SrcOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Src) {
		return nil, false
	}
	return o.Ipv4Src, true
}

// HasIpv4Src returns a boolean if a field has been set.
func (o *FlowMatch) HasIpv4Src() bool {
	if o != nil && !IsNil(o.Ipv4Src) {
		return true
	}

	return false
}

// SetIpv4Src gets a reference to the given string and assigns it to the Ipv4Src field.
func (o *FlowMatch) SetIpv4Src(v string) {
	o.Ipv4Src = &v
}

// GetIpv4Dst returns the Ipv4Dst field value if set, zero value otherwise.
func (o *FlowMatch) GetIpv4Dst() string {
	if o == nil || IsNil(o.Ipv4Dst) {
		var ret string
		return ret
	}
	return *o.Ipv4Dst
}

// GetIpv4DstOk returns a tuple with the Ipv4Dst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpv4DstOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Dst) {
		return nil, false
	}
	return o.Ipv4Dst, true
}

// HasIpv4Dst returns a boolean if a field has been set.
func (o *FlowMatch) HasIpv4Dst() bool {
	if o != nil && !IsNil(o.Ipv4Dst) {
		return true
	}

	return false
}

// SetIpv4Dst gets a reference to the given string and assigns it to the Ipv4Dst field.
func (o *FlowMatch) SetIpv4Dst(v string) {
	o.Ipv4Dst = &v
}

// GetIpv6Src returns the Ipv6Src field value if set, zero value otherwise.
func (o *FlowMatch) GetIpv6Src() string {
	if o == nil || IsNil(o.Ipv6Src) {
		var ret string
		return ret
	}
	return *o.Ipv6Src
}

// GetIpv6SrcOk returns a tuple with the Ipv6Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpv6SrcOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Src) {
		return nil, false
	}
	return o.Ipv6Src, true
}

// HasIpv6Src returns a boolean if a field has been set.
func (o *FlowMatch) HasIpv6Src() bool {
	if o != nil && !IsNil(o.Ipv6Src) {
		return true
	}

	return false
}

// SetIpv6Src gets a reference to the given string and assigns it to the Ipv6Src field.
func (o *FlowMatch) SetIpv6Src(v string) {
	o.Ipv6Src = &v
}

// GetIpv6Dst returns the Ipv6Dst field value if set, zero value otherwise.
func (o *FlowMatch) GetIpv6Dst() string {
	if o == nil || IsNil(o.Ipv6Dst) {
		var ret string
		return ret
	}
	return *o.Ipv6Dst
}

// GetIpv6DstOk returns a tuple with the Ipv6Dst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpv6DstOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Dst) {
		return nil, false
	}
	return o.Ipv6Dst, true
}

// HasIpv6Dst returns a boolean if a field has been set.
func (o *FlowMatch) HasIpv6Dst() bool {
	if o != nil && !IsNil(o.Ipv6Dst) {
		return true
	}

	return false
}

// SetIpv6Dst gets a reference to the given string and assigns it to the Ipv6Dst field.
func (o *FlowMatch) SetIpv6Dst(v string) {
	o.Ipv6Dst = &v
}

// GetIpv6NdTarget returns the Ipv6NdTarget field value if set, zero value otherwise.
func (o *FlowMatch) GetIpv6NdTarget() string {
	if o == nil || IsNil(o.Ipv6NdTarget) {
		var ret string
		return ret
	}
	return *o.Ipv6NdTarget
}

// GetIpv6NdTargetOk returns a tuple with the Ipv6NdTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpv6NdTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6NdTarget) {
		return nil, false
	}
	return o.Ipv6NdTarget, true
}

// HasIpv6NdTarget returns a boolean if a field has been set.
func (o *FlowMatch) HasIpv6NdTarget() bool {
	if o != nil && !IsNil(o.Ipv6NdTarget) {
		return true
	}

	return false
}

// SetIpv6NdTarget gets a reference to the given string and assigns it to the Ipv6NdTarget field.
func (o *FlowMatch) SetIpv6NdTarget(v string) {
	o.Ipv6NdTarget = &v
}

// GetIpv6NdSll returns the Ipv6NdSll field value if set, zero value otherwise.
func (o *FlowMatch) GetIpv6NdSll() string {
	if o == nil || IsNil(o.Ipv6NdSll) {
		var ret string
		return ret
	}
	return *o.Ipv6NdSll
}

// GetIpv6NdSllOk returns a tuple with the Ipv6NdSll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpv6NdSllOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6NdSll) {
		return nil, false
	}
	return o.Ipv6NdSll, true
}

// HasIpv6NdSll returns a boolean if a field has been set.
func (o *FlowMatch) HasIpv6NdSll() bool {
	if o != nil && !IsNil(o.Ipv6NdSll) {
		return true
	}

	return false
}

// SetIpv6NdSll gets a reference to the given string and assigns it to the Ipv6NdSll field.
func (o *FlowMatch) SetIpv6NdSll(v string) {
	o.Ipv6NdSll = &v
}

// GetIpv6NdTll returns the Ipv6NdTll field value if set, zero value otherwise.
func (o *FlowMatch) GetIpv6NdTll() string {
	if o == nil || IsNil(o.Ipv6NdTll) {
		var ret string
		return ret
	}
	return *o.Ipv6NdTll
}

// GetIpv6NdTllOk returns a tuple with the Ipv6NdTll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIpv6NdTllOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6NdTll) {
		return nil, false
	}
	return o.Ipv6NdTll, true
}

// HasIpv6NdTll returns a boolean if a field has been set.
func (o *FlowMatch) HasIpv6NdTll() bool {
	if o != nil && !IsNil(o.Ipv6NdTll) {
		return true
	}

	return false
}

// SetIpv6NdTll gets a reference to the given string and assigns it to the Ipv6NdTll field.
func (o *FlowMatch) SetIpv6NdTll(v string) {
	o.Ipv6NdTll = &v
}

// GetVlanVid returns the VlanVid field value if set, zero value otherwise.
func (o *FlowMatch) GetVlanVid() int32 {
	if o == nil || IsNil(o.VlanVid) {
		var ret int32
		return ret
	}
	return *o.VlanVid
}

// GetVlanVidOk returns a tuple with the VlanVid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetVlanVidOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanVid) {
		return nil, false
	}
	return o.VlanVid, true
}

// HasVlanVid returns a boolean if a field has been set.
func (o *FlowMatch) HasVlanVid() bool {
	if o != nil && !IsNil(o.VlanVid) {
		return true
	}

	return false
}

// SetVlanVid gets a reference to the given int32 and assigns it to the VlanVid field.
func (o *FlowMatch) SetVlanVid(v int32) {
	o.VlanVid = &v
}

// GetTcpSrc returns the TcpSrc field value if set, zero value otherwise.
func (o *FlowMatch) GetTcpSrc() int32 {
	if o == nil || IsNil(o.TcpSrc) {
		var ret int32
		return ret
	}
	return *o.TcpSrc
}

// GetTcpSrcOk returns a tuple with the TcpSrc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetTcpSrcOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpSrc) {
		return nil, false
	}
	return o.TcpSrc, true
}

// HasTcpSrc returns a boolean if a field has been set.
func (o *FlowMatch) HasTcpSrc() bool {
	if o != nil && !IsNil(o.TcpSrc) {
		return true
	}

	return false
}

// SetTcpSrc gets a reference to the given int32 and assigns it to the TcpSrc field.
func (o *FlowMatch) SetTcpSrc(v int32) {
	o.TcpSrc = &v
}

// GetTcpDst returns the TcpDst field value if set, zero value otherwise.
func (o *FlowMatch) GetTcpDst() int32 {
	if o == nil || IsNil(o.TcpDst) {
		var ret int32
		return ret
	}
	return *o.TcpDst
}

// GetTcpDstOk returns a tuple with the TcpDst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetTcpDstOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpDst) {
		return nil, false
	}
	return o.TcpDst, true
}

// HasTcpDst returns a boolean if a field has been set.
func (o *FlowMatch) HasTcpDst() bool {
	if o != nil && !IsNil(o.TcpDst) {
		return true
	}

	return false
}

// SetTcpDst gets a reference to the given int32 and assigns it to the TcpDst field.
func (o *FlowMatch) SetTcpDst(v int32) {
	o.TcpDst = &v
}

// GetUdpSrc returns the UdpSrc field value if set, zero value otherwise.
func (o *FlowMatch) GetUdpSrc() int32 {
	if o == nil || IsNil(o.UdpSrc) {
		var ret int32
		return ret
	}
	return *o.UdpSrc
}

// GetUdpSrcOk returns a tuple with the UdpSrc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetUdpSrcOk() (*int32, bool) {
	if o == nil || IsNil(o.UdpSrc) {
		return nil, false
	}
	return o.UdpSrc, true
}

// HasUdpSrc returns a boolean if a field has been set.
func (o *FlowMatch) HasUdpSrc() bool {
	if o != nil && !IsNil(o.UdpSrc) {
		return true
	}

	return false
}

// SetUdpSrc gets a reference to the given int32 and assigns it to the UdpSrc field.
func (o *FlowMatch) SetUdpSrc(v int32) {
	o.UdpSrc = &v
}

// GetUdpDst returns the UdpDst field value if set, zero value otherwise.
func (o *FlowMatch) GetUdpDst() int32 {
	if o == nil || IsNil(o.UdpDst) {
		var ret int32
		return ret
	}
	return *o.UdpDst
}

// GetUdpDstOk returns a tuple with the UdpDst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetUdpDstOk() (*int32, bool) {
	if o == nil || IsNil(o.UdpDst) {
		return nil, false
	}
	return o.UdpDst, true
}

// HasUdpDst returns a boolean if a field has been set.
func (o *FlowMatch) HasUdpDst() bool {
	if o != nil && !IsNil(o.UdpDst) {
		return true
	}

	return false
}

// SetUdpDst gets a reference to the given int32 and assigns it to the UdpDst field.
func (o *FlowMatch) SetUdpDst(v int32) {
	o.UdpDst = &v
}

// GetIcmpv6Type returns the Icmpv6Type field value if set, zero value otherwise.
func (o *FlowMatch) GetIcmpv6Type() int32 {
	if o == nil || IsNil(o.Icmpv6Type) {
		var ret int32
		return ret
	}
	return *o.Icmpv6Type
}

// GetIcmpv6TypeOk returns a tuple with the Icmpv6Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIcmpv6TypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Icmpv6Type) {
		return nil, false
	}
	return o.Icmpv6Type, true
}

// HasIcmpv6Type returns a boolean if a field has been set.
func (o *FlowMatch) HasIcmpv6Type() bool {
	if o != nil && !IsNil(o.Icmpv6Type) {
		return true
	}

	return false
}

// SetIcmpv6Type gets a reference to the given int32 and assigns it to the Icmpv6Type field.
func (o *FlowMatch) SetIcmpv6Type(v int32) {
	o.Icmpv6Type = &v
}

// GetIcmpv6Code returns the Icmpv6Code field value if set, zero value otherwise.
func (o *FlowMatch) GetIcmpv6Code() int32 {
	if o == nil || IsNil(o.Icmpv6Code) {
		var ret int32
		return ret
	}
	return *o.Icmpv6Code
}

// GetIcmpv6CodeOk returns a tuple with the Icmpv6Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowMatch) GetIcmpv6CodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Icmpv6Code) {
		return nil, false
	}
	return o.Icmpv6Code, true
}

// HasIcmpv6Code returns a boolean if a field has been set.
func (o *FlowMatch) HasIcmpv6Code() bool {
	if o != nil && !IsNil(o.Icmpv6Code) {
		return true
	}

	return false
}

// SetIcmpv6Code gets a reference to the given int32 and assigns it to the Icmpv6Code field.
func (o *FlowMatch) SetIcmpv6Code(v int32) {
	o.Icmpv6Code = &v
}

func (o FlowMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InPort) {
		toSerialize["in_port"] = o.InPort
	}
	if !IsNil(o.EthSrc) {
		toSerialize["eth_src"] = o.EthSrc
	}
	if !IsNil(o.EthDst) {
		toSerialize["eth_dst"] = o.EthDst
	}
	if !IsNil(o.EthType) {
		toSerialize["eth_type"] = o.EthType
	}
	if !IsNil(o.IpProto) {
		toSerialize["ip_proto"] = o.IpProto
	}
	if !IsNil(o.Ipv4Src) {
		toSerialize["ipv4_src"] = o.Ipv4Src
	}
	if !IsNil(o.Ipv4Dst) {
		toSerialize["ipv4_dst"] = o.Ipv4Dst
	}
	if !IsNil(o.Ipv6Src) {
		toSerialize["ipv6_src"] = o.Ipv6Src
	}
	if !IsNil(o.Ipv6Dst) {
		toSerialize["ipv6_dst"] = o.Ipv6Dst
	}
	if !IsNil(o.Ipv6NdTarget) {
		toSerialize["ipv6_nd_target"] = o.Ipv6NdTarget
	}
	if !IsNil(o.Ipv6NdSll) {
		toSerialize["ipv6_nd_sll"] = o.Ipv6NdSll
	}
	if !IsNil(o.Ipv6NdTll) {
		toSerialize["ipv6_nd_tll"] = o.Ipv6NdTll
	}
	if !IsNil(o.VlanVid) {
		toSerialize["vlan_vid"] = o.VlanVid
	}
	if !IsNil(o.TcpSrc) {
		toSerialize["tcp_src"] = o.TcpSrc
	}
	if !IsNil(o.TcpDst) {
		toSerialize["tcp_dst"] = o.TcpDst
	}
	if !IsNil(o.UdpSrc) {
		toSerialize["udp_src"] = o.UdpSrc
	}
	if !IsNil(o.UdpDst) {
		toSerialize["udp_dst"] = o.UdpDst
	}
	if !IsNil(o.Icmpv6Type) {
		toSerialize["icmpv6_type"] = o.Icmpv6Type
	}
	if !IsNil(o.Icmpv6Code) {
		toSerialize["icmpv6_code"] = o.Icmpv6Code
	}
	return toSerialize, nil
}

type NullableFlowMatch struct {
	value *FlowMatch
	isSet bool
}

func (v NullableFlowMatch) Get() *FlowMatch {
	return v.value
}

func (v *NullableFlowMatch) Set(val *FlowMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowMatch(val *FlowMatch) *NullableFlowMatch {
	return &NullableFlowMatch{value: val, isSet: true}
}

func (v NullableFlowMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


