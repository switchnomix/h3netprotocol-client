/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the VLANQos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VLANQos{}

// VLANQos QoS settings for the VLAN
type VLANQos struct {
	Priority *int32 `json:"priority,omitempty"`
	BandwidthLimit *int32 `json:"bandwidthLimit,omitempty"`
	Dscp *int32 `json:"dscp,omitempty"`
}

// NewVLANQos instantiates a new VLANQos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVLANQos() *VLANQos {
	this := VLANQos{}
	return &this
}

// NewVLANQosWithDefaults instantiates a new VLANQos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVLANQosWithDefaults() *VLANQos {
	this := VLANQos{}
	return &this
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *VLANQos) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANQos) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *VLANQos) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *VLANQos) SetPriority(v int32) {
	o.Priority = &v
}

// GetBandwidthLimit returns the BandwidthLimit field value if set, zero value otherwise.
func (o *VLANQos) GetBandwidthLimit() int32 {
	if o == nil || IsNil(o.BandwidthLimit) {
		var ret int32
		return ret
	}
	return *o.BandwidthLimit
}

// GetBandwidthLimitOk returns a tuple with the BandwidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANQos) GetBandwidthLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.BandwidthLimit) {
		return nil, false
	}
	return o.BandwidthLimit, true
}

// HasBandwidthLimit returns a boolean if a field has been set.
func (o *VLANQos) HasBandwidthLimit() bool {
	if o != nil && !IsNil(o.BandwidthLimit) {
		return true
	}

	return false
}

// SetBandwidthLimit gets a reference to the given int32 and assigns it to the BandwidthLimit field.
func (o *VLANQos) SetBandwidthLimit(v int32) {
	o.BandwidthLimit = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *VLANQos) GetDscp() int32 {
	if o == nil || IsNil(o.Dscp) {
		var ret int32
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLANQos) GetDscpOk() (*int32, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *VLANQos) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int32 and assigns it to the Dscp field.
func (o *VLANQos) SetDscp(v int32) {
	o.Dscp = &v
}

func (o VLANQos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VLANQos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.BandwidthLimit) {
		toSerialize["bandwidthLimit"] = o.BandwidthLimit
	}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	return toSerialize, nil
}

type NullableVLANQos struct {
	value *VLANQos
	isSet bool
}

func (v NullableVLANQos) Get() *VLANQos {
	return v.value
}

func (v *NullableVLANQos) Set(val *VLANQos) {
	v.value = val
	v.isSet = true
}

func (v NullableVLANQos) IsSet() bool {
	return v.isSet
}

func (v *NullableVLANQos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVLANQos(val *VLANQos) *NullableVLANQos {
	return &NullableVLANQos{value: val, isSet: true}
}

func (v NullableVLANQos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVLANQos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


