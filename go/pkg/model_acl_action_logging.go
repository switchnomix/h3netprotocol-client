/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ACLActionLogging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACLActionLogging{}

// ACLActionLogging struct for ACLActionLogging
type ACLActionLogging struct {
	// Enable logging for this rule
	Enabled *bool `json:"enabled,omitempty"`
	// Logging level
	Level *string `json:"level,omitempty"`
}

// NewACLActionLogging instantiates a new ACLActionLogging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLActionLogging() *ACLActionLogging {
	this := ACLActionLogging{}
	return &this
}

// NewACLActionLoggingWithDefaults instantiates a new ACLActionLogging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLActionLoggingWithDefaults() *ACLActionLogging {
	this := ACLActionLogging{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ACLActionLogging) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLActionLogging) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ACLActionLogging) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ACLActionLogging) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ACLActionLogging) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLActionLogging) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ACLActionLogging) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *ACLActionLogging) SetLevel(v string) {
	o.Level = &v
}

func (o ACLActionLogging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACLActionLogging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	return toSerialize, nil
}

type NullableACLActionLogging struct {
	value *ACLActionLogging
	isSet bool
}

func (v NullableACLActionLogging) Get() *ACLActionLogging {
	return v.value
}

func (v *NullableACLActionLogging) Set(val *ACLActionLogging) {
	v.value = val
	v.isSet = true
}

func (v NullableACLActionLogging) IsSet() bool {
	return v.isSet
}

func (v *NullableACLActionLogging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLActionLogging(val *ACLActionLogging) *NullableACLActionLogging {
	return &NullableACLActionLogging{value: val, isSet: true}
}

func (v NullableACLActionLogging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLActionLogging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


