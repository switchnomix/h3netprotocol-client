/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreateOrUpdateDeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrUpdateDeviceRequest{}

// CreateOrUpdateDeviceRequest struct for CreateOrUpdateDeviceRequest
type CreateOrUpdateDeviceRequest struct {
	Type string `json:"type"`
	Timestamp time.Time `json:"timestamp"`
	// Client-generated request ID for tracking
	RequestId string `json:"requestId"`
	Config DeviceConfigUpdateMessage `json:"config"`
}

type _CreateOrUpdateDeviceRequest CreateOrUpdateDeviceRequest

// NewCreateOrUpdateDeviceRequest instantiates a new CreateOrUpdateDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateDeviceRequest(type_ string, timestamp time.Time, requestId string, config DeviceConfigUpdateMessage) *CreateOrUpdateDeviceRequest {
	this := CreateOrUpdateDeviceRequest{}
	this.Type = type_
	this.Timestamp = timestamp
	this.RequestId = requestId
	this.Config = config
	return &this
}

// NewCreateOrUpdateDeviceRequestWithDefaults instantiates a new CreateOrUpdateDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateDeviceRequestWithDefaults() *CreateOrUpdateDeviceRequest {
	this := CreateOrUpdateDeviceRequest{}
	return &this
}

// GetType returns the Type field value
func (o *CreateOrUpdateDeviceRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateDeviceRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateOrUpdateDeviceRequest) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *CreateOrUpdateDeviceRequest) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateDeviceRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CreateOrUpdateDeviceRequest) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetRequestId returns the RequestId field value
func (o *CreateOrUpdateDeviceRequest) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateDeviceRequest) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *CreateOrUpdateDeviceRequest) SetRequestId(v string) {
	o.RequestId = v
}

// GetConfig returns the Config field value
func (o *CreateOrUpdateDeviceRequest) GetConfig() DeviceConfigUpdateMessage {
	if o == nil {
		var ret DeviceConfigUpdateMessage
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateDeviceRequest) GetConfigOk() (*DeviceConfigUpdateMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *CreateOrUpdateDeviceRequest) SetConfig(v DeviceConfigUpdateMessage) {
	o.Config = v
}

func (o CreateOrUpdateDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrUpdateDeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["requestId"] = o.RequestId
	toSerialize["config"] = o.Config
	return toSerialize, nil
}

func (o *CreateOrUpdateDeviceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"requestId",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOrUpdateDeviceRequest := _CreateOrUpdateDeviceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOrUpdateDeviceRequest)

	if err != nil {
		return err
	}

	*o = CreateOrUpdateDeviceRequest(varCreateOrUpdateDeviceRequest)

	return err
}

type NullableCreateOrUpdateDeviceRequest struct {
	value *CreateOrUpdateDeviceRequest
	isSet bool
}

func (v NullableCreateOrUpdateDeviceRequest) Get() *CreateOrUpdateDeviceRequest {
	return v.value
}

func (v *NullableCreateOrUpdateDeviceRequest) Set(val *CreateOrUpdateDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateDeviceRequest(val *CreateOrUpdateDeviceRequest) *NullableCreateOrUpdateDeviceRequest {
	return &NullableCreateOrUpdateDeviceRequest{value: val, isSet: true}
}

func (v NullableCreateOrUpdateDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


