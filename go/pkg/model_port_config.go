/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PortConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortConfig{}

// PortConfig struct for PortConfig
type PortConfig struct {
	// Interface name
	Name string `json:"name"`
	// Interface type
	Type string `json:"type"`
	// Interface description
	Description *string `json:"description,omitempty"`
	// Whether the interface is enabled
	Enabled bool `json:"enabled"`
	IpAddresses []IPAddressWithPrefix `json:"ipAddresses,omitempty"`
	// MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX
	MacAddress *string `json:"macAddress,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"`
	// Maximum Transmission Unit
	Mtu *int32 `json:"mtu,omitempty"`
	Speed *InterfaceSpeed `json:"speed,omitempty"`
	// Interface duplex mode
	Duplex *string `json:"duplex,omitempty"`
	PortId int32 `json:"portId"`
	NativeVlan *int32 `json:"nativeVlan,omitempty"`
	AclIn *string `json:"aclIn,omitempty"`
	MaxLearnedMacs *int32 `json:"maxLearnedMacs,omitempty"`
	DynamicVlan *bool `json:"dynamicVlan,omitempty"`
	StormControl *PortConfigAllOfStormControl `json:"stormControl,omitempty"`
	PortSecurity *PortConfigAllOfPortSecurity `json:"portSecurity,omitempty"`
}

type _PortConfig PortConfig

// NewPortConfig instantiates a new PortConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortConfig(name string, type_ string, enabled bool, portId int32) *PortConfig {
	this := PortConfig{}
	this.Name = name
	this.Type = type_
	this.Enabled = enabled
	this.PortId = portId
	return &this
}

// NewPortConfigWithDefaults instantiates a new PortConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortConfigWithDefaults() *PortConfig {
	this := PortConfig{}
	return &this
}

// GetName returns the Name field value
func (o *PortConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PortConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PortConfig) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *PortConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PortConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PortConfig) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PortConfig) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PortConfig) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PortConfig) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *PortConfig) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *PortConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *PortConfig) SetEnabled(v bool) {
	o.Enabled = v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *PortConfig) GetIpAddresses() []IPAddressWithPrefix {
	if o == nil || IsNil(o.IpAddresses) {
		var ret []IPAddressWithPrefix
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetIpAddressesOk() ([]IPAddressWithPrefix, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *PortConfig) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []IPAddressWithPrefix and assigns it to the IpAddresses field.
func (o *PortConfig) SetIpAddresses(v []IPAddressWithPrefix) {
	o.IpAddresses = v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *PortConfig) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *PortConfig) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *PortConfig) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *PortConfig) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *PortConfig) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *PortConfig) SetMtu(v int32) {
	o.Mtu = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *PortConfig) GetSpeed() InterfaceSpeed {
	if o == nil || IsNil(o.Speed) {
		var ret InterfaceSpeed
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetSpeedOk() (*InterfaceSpeed, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *PortConfig) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given InterfaceSpeed and assigns it to the Speed field.
func (o *PortConfig) SetSpeed(v InterfaceSpeed) {
	o.Speed = &v
}

// GetDuplex returns the Duplex field value if set, zero value otherwise.
func (o *PortConfig) GetDuplex() string {
	if o == nil || IsNil(o.Duplex) {
		var ret string
		return ret
	}
	return *o.Duplex
}

// GetDuplexOk returns a tuple with the Duplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetDuplexOk() (*string, bool) {
	if o == nil || IsNil(o.Duplex) {
		return nil, false
	}
	return o.Duplex, true
}

// HasDuplex returns a boolean if a field has been set.
func (o *PortConfig) HasDuplex() bool {
	if o != nil && !IsNil(o.Duplex) {
		return true
	}

	return false
}

// SetDuplex gets a reference to the given string and assigns it to the Duplex field.
func (o *PortConfig) SetDuplex(v string) {
	o.Duplex = &v
}

// GetPortId returns the PortId field value
func (o *PortConfig) GetPortId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value
// and a boolean to check if the value has been set.
func (o *PortConfig) GetPortIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortId, true
}

// SetPortId sets field value
func (o *PortConfig) SetPortId(v int32) {
	o.PortId = v
}

// GetNativeVlan returns the NativeVlan field value if set, zero value otherwise.
func (o *PortConfig) GetNativeVlan() int32 {
	if o == nil || IsNil(o.NativeVlan) {
		var ret int32
		return ret
	}
	return *o.NativeVlan
}

// GetNativeVlanOk returns a tuple with the NativeVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetNativeVlanOk() (*int32, bool) {
	if o == nil || IsNil(o.NativeVlan) {
		return nil, false
	}
	return o.NativeVlan, true
}

// HasNativeVlan returns a boolean if a field has been set.
func (o *PortConfig) HasNativeVlan() bool {
	if o != nil && !IsNil(o.NativeVlan) {
		return true
	}

	return false
}

// SetNativeVlan gets a reference to the given int32 and assigns it to the NativeVlan field.
func (o *PortConfig) SetNativeVlan(v int32) {
	o.NativeVlan = &v
}

// GetAclIn returns the AclIn field value if set, zero value otherwise.
func (o *PortConfig) GetAclIn() string {
	if o == nil || IsNil(o.AclIn) {
		var ret string
		return ret
	}
	return *o.AclIn
}

// GetAclInOk returns a tuple with the AclIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetAclInOk() (*string, bool) {
	if o == nil || IsNil(o.AclIn) {
		return nil, false
	}
	return o.AclIn, true
}

// HasAclIn returns a boolean if a field has been set.
func (o *PortConfig) HasAclIn() bool {
	if o != nil && !IsNil(o.AclIn) {
		return true
	}

	return false
}

// SetAclIn gets a reference to the given string and assigns it to the AclIn field.
func (o *PortConfig) SetAclIn(v string) {
	o.AclIn = &v
}

// GetMaxLearnedMacs returns the MaxLearnedMacs field value if set, zero value otherwise.
func (o *PortConfig) GetMaxLearnedMacs() int32 {
	if o == nil || IsNil(o.MaxLearnedMacs) {
		var ret int32
		return ret
	}
	return *o.MaxLearnedMacs
}

// GetMaxLearnedMacsOk returns a tuple with the MaxLearnedMacs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetMaxLearnedMacsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLearnedMacs) {
		return nil, false
	}
	return o.MaxLearnedMacs, true
}

// HasMaxLearnedMacs returns a boolean if a field has been set.
func (o *PortConfig) HasMaxLearnedMacs() bool {
	if o != nil && !IsNil(o.MaxLearnedMacs) {
		return true
	}

	return false
}

// SetMaxLearnedMacs gets a reference to the given int32 and assigns it to the MaxLearnedMacs field.
func (o *PortConfig) SetMaxLearnedMacs(v int32) {
	o.MaxLearnedMacs = &v
}

// GetDynamicVlan returns the DynamicVlan field value if set, zero value otherwise.
func (o *PortConfig) GetDynamicVlan() bool {
	if o == nil || IsNil(o.DynamicVlan) {
		var ret bool
		return ret
	}
	return *o.DynamicVlan
}

// GetDynamicVlanOk returns a tuple with the DynamicVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetDynamicVlanOk() (*bool, bool) {
	if o == nil || IsNil(o.DynamicVlan) {
		return nil, false
	}
	return o.DynamicVlan, true
}

// HasDynamicVlan returns a boolean if a field has been set.
func (o *PortConfig) HasDynamicVlan() bool {
	if o != nil && !IsNil(o.DynamicVlan) {
		return true
	}

	return false
}

// SetDynamicVlan gets a reference to the given bool and assigns it to the DynamicVlan field.
func (o *PortConfig) SetDynamicVlan(v bool) {
	o.DynamicVlan = &v
}

// GetStormControl returns the StormControl field value if set, zero value otherwise.
func (o *PortConfig) GetStormControl() PortConfigAllOfStormControl {
	if o == nil || IsNil(o.StormControl) {
		var ret PortConfigAllOfStormControl
		return ret
	}
	return *o.StormControl
}

// GetStormControlOk returns a tuple with the StormControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetStormControlOk() (*PortConfigAllOfStormControl, bool) {
	if o == nil || IsNil(o.StormControl) {
		return nil, false
	}
	return o.StormControl, true
}

// HasStormControl returns a boolean if a field has been set.
func (o *PortConfig) HasStormControl() bool {
	if o != nil && !IsNil(o.StormControl) {
		return true
	}

	return false
}

// SetStormControl gets a reference to the given PortConfigAllOfStormControl and assigns it to the StormControl field.
func (o *PortConfig) SetStormControl(v PortConfigAllOfStormControl) {
	o.StormControl = &v
}

// GetPortSecurity returns the PortSecurity field value if set, zero value otherwise.
func (o *PortConfig) GetPortSecurity() PortConfigAllOfPortSecurity {
	if o == nil || IsNil(o.PortSecurity) {
		var ret PortConfigAllOfPortSecurity
		return ret
	}
	return *o.PortSecurity
}

// GetPortSecurityOk returns a tuple with the PortSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfig) GetPortSecurityOk() (*PortConfigAllOfPortSecurity, bool) {
	if o == nil || IsNil(o.PortSecurity) {
		return nil, false
	}
	return o.PortSecurity, true
}

// HasPortSecurity returns a boolean if a field has been set.
func (o *PortConfig) HasPortSecurity() bool {
	if o != nil && !IsNil(o.PortSecurity) {
		return true
	}

	return false
}

// SetPortSecurity gets a reference to the given PortConfigAllOfPortSecurity and assigns it to the PortSecurity field.
func (o *PortConfig) SetPortSecurity(v PortConfigAllOfPortSecurity) {
	o.PortSecurity = &v
}

func (o PortConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.IpAddresses) {
		toSerialize["ipAddresses"] = o.IpAddresses
	}
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Duplex) {
		toSerialize["duplex"] = o.Duplex
	}
	toSerialize["portId"] = o.PortId
	if !IsNil(o.NativeVlan) {
		toSerialize["nativeVlan"] = o.NativeVlan
	}
	if !IsNil(o.AclIn) {
		toSerialize["aclIn"] = o.AclIn
	}
	if !IsNil(o.MaxLearnedMacs) {
		toSerialize["maxLearnedMacs"] = o.MaxLearnedMacs
	}
	if !IsNil(o.DynamicVlan) {
		toSerialize["dynamicVlan"] = o.DynamicVlan
	}
	if !IsNil(o.StormControl) {
		toSerialize["stormControl"] = o.StormControl
	}
	if !IsNil(o.PortSecurity) {
		toSerialize["portSecurity"] = o.PortSecurity
	}
	return toSerialize, nil
}

func (o *PortConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"enabled",
		"portId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortConfig := _PortConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPortConfig)

	if err != nil {
		return err
	}

	*o = PortConfig(varPortConfig)

	return err
}

type NullablePortConfig struct {
	value *PortConfig
	isSet bool
}

func (v NullablePortConfig) Get() *PortConfig {
	return v.value
}

func (v *NullablePortConfig) Set(val *PortConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePortConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePortConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortConfig(val *PortConfig) *NullablePortConfig {
	return &NullablePortConfig{value: val, isSet: true}
}

func (v NullablePortConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


