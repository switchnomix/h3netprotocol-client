/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the EnvironmentalMetricsTemperature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentalMetricsTemperature{}

// EnvironmentalMetricsTemperature struct for EnvironmentalMetricsTemperature
type EnvironmentalMetricsTemperature struct {
	Ambient *float32 `json:"ambient,omitempty"`
	Components *map[string]float32 `json:"components,omitempty"`
}

// NewEnvironmentalMetricsTemperature instantiates a new EnvironmentalMetricsTemperature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentalMetricsTemperature() *EnvironmentalMetricsTemperature {
	this := EnvironmentalMetricsTemperature{}
	return &this
}

// NewEnvironmentalMetricsTemperatureWithDefaults instantiates a new EnvironmentalMetricsTemperature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentalMetricsTemperatureWithDefaults() *EnvironmentalMetricsTemperature {
	this := EnvironmentalMetricsTemperature{}
	return &this
}

// GetAmbient returns the Ambient field value if set, zero value otherwise.
func (o *EnvironmentalMetricsTemperature) GetAmbient() float32 {
	if o == nil || IsNil(o.Ambient) {
		var ret float32
		return ret
	}
	return *o.Ambient
}

// GetAmbientOk returns a tuple with the Ambient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetricsTemperature) GetAmbientOk() (*float32, bool) {
	if o == nil || IsNil(o.Ambient) {
		return nil, false
	}
	return o.Ambient, true
}

// HasAmbient returns a boolean if a field has been set.
func (o *EnvironmentalMetricsTemperature) HasAmbient() bool {
	if o != nil && !IsNil(o.Ambient) {
		return true
	}

	return false
}

// SetAmbient gets a reference to the given float32 and assigns it to the Ambient field.
func (o *EnvironmentalMetricsTemperature) SetAmbient(v float32) {
	o.Ambient = &v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *EnvironmentalMetricsTemperature) GetComponents() map[string]float32 {
	if o == nil || IsNil(o.Components) {
		var ret map[string]float32
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetricsTemperature) GetComponentsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *EnvironmentalMetricsTemperature) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given map[string]float32 and assigns it to the Components field.
func (o *EnvironmentalMetricsTemperature) SetComponents(v map[string]float32) {
	o.Components = &v
}

func (o EnvironmentalMetricsTemperature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentalMetricsTemperature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ambient) {
		toSerialize["ambient"] = o.Ambient
	}
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	return toSerialize, nil
}

type NullableEnvironmentalMetricsTemperature struct {
	value *EnvironmentalMetricsTemperature
	isSet bool
}

func (v NullableEnvironmentalMetricsTemperature) Get() *EnvironmentalMetricsTemperature {
	return v.value
}

func (v *NullableEnvironmentalMetricsTemperature) Set(val *EnvironmentalMetricsTemperature) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentalMetricsTemperature) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentalMetricsTemperature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentalMetricsTemperature(val *EnvironmentalMetricsTemperature) *NullableEnvironmentalMetricsTemperature {
	return &NullableEnvironmentalMetricsTemperature{value: val, isSet: true}
}

func (v NullableEnvironmentalMetricsTemperature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentalMetricsTemperature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


