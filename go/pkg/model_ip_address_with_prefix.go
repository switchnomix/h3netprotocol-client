/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IPAddressWithPrefix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPAddressWithPrefix{}

// IPAddressWithPrefix IP address with network prefix length (CIDR notation)
type IPAddressWithPrefix struct {
	// Represents either an IPv4 or IPv6 address
	Address string `json:"address"`
	// Network prefix length (0-32 for IPv4, 0-128 for IPv6)
	PrefixLength int32 `json:"prefixLength"`
}

type _IPAddressWithPrefix IPAddressWithPrefix

// NewIPAddressWithPrefix instantiates a new IPAddressWithPrefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPAddressWithPrefix(address string, prefixLength int32) *IPAddressWithPrefix {
	this := IPAddressWithPrefix{}
	this.Address = address
	this.PrefixLength = prefixLength
	return &this
}

// NewIPAddressWithPrefixWithDefaults instantiates a new IPAddressWithPrefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPAddressWithPrefixWithDefaults() *IPAddressWithPrefix {
	this := IPAddressWithPrefix{}
	return &this
}

// GetAddress returns the Address field value
func (o *IPAddressWithPrefix) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *IPAddressWithPrefix) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *IPAddressWithPrefix) SetAddress(v string) {
	o.Address = v
}

// GetPrefixLength returns the PrefixLength field value
func (o *IPAddressWithPrefix) GetPrefixLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *IPAddressWithPrefix) GetPrefixLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *IPAddressWithPrefix) SetPrefixLength(v int32) {
	o.PrefixLength = v
}

func (o IPAddressWithPrefix) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPAddressWithPrefix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["prefixLength"] = o.PrefixLength
	return toSerialize, nil
}

func (o *IPAddressWithPrefix) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"prefixLength",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIPAddressWithPrefix := _IPAddressWithPrefix{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIPAddressWithPrefix)

	if err != nil {
		return err
	}

	*o = IPAddressWithPrefix(varIPAddressWithPrefix)

	return err
}

type NullableIPAddressWithPrefix struct {
	value *IPAddressWithPrefix
	isSet bool
}

func (v NullableIPAddressWithPrefix) Get() *IPAddressWithPrefix {
	return v.value
}

func (v *NullableIPAddressWithPrefix) Set(val *IPAddressWithPrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAddressWithPrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAddressWithPrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAddressWithPrefix(val *IPAddressWithPrefix) *NullableIPAddressWithPrefix {
	return &NullableIPAddressWithPrefix{value: val, isSet: true}
}

func (v NullableIPAddressWithPrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAddressWithPrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


