/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the EnvironmentalMetricsPower type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentalMetricsPower{}

// EnvironmentalMetricsPower struct for EnvironmentalMetricsPower
type EnvironmentalMetricsPower struct {
	Consumption *float32 `json:"consumption,omitempty"`
	Efficiency *float32 `json:"efficiency,omitempty"`
	Sources []EnvironmentalMetricsPowerSourcesInner `json:"sources,omitempty"`
}

// NewEnvironmentalMetricsPower instantiates a new EnvironmentalMetricsPower object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentalMetricsPower() *EnvironmentalMetricsPower {
	this := EnvironmentalMetricsPower{}
	return &this
}

// NewEnvironmentalMetricsPowerWithDefaults instantiates a new EnvironmentalMetricsPower object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentalMetricsPowerWithDefaults() *EnvironmentalMetricsPower {
	this := EnvironmentalMetricsPower{}
	return &this
}

// GetConsumption returns the Consumption field value if set, zero value otherwise.
func (o *EnvironmentalMetricsPower) GetConsumption() float32 {
	if o == nil || IsNil(o.Consumption) {
		var ret float32
		return ret
	}
	return *o.Consumption
}

// GetConsumptionOk returns a tuple with the Consumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetricsPower) GetConsumptionOk() (*float32, bool) {
	if o == nil || IsNil(o.Consumption) {
		return nil, false
	}
	return o.Consumption, true
}

// HasConsumption returns a boolean if a field has been set.
func (o *EnvironmentalMetricsPower) HasConsumption() bool {
	if o != nil && !IsNil(o.Consumption) {
		return true
	}

	return false
}

// SetConsumption gets a reference to the given float32 and assigns it to the Consumption field.
func (o *EnvironmentalMetricsPower) SetConsumption(v float32) {
	o.Consumption = &v
}

// GetEfficiency returns the Efficiency field value if set, zero value otherwise.
func (o *EnvironmentalMetricsPower) GetEfficiency() float32 {
	if o == nil || IsNil(o.Efficiency) {
		var ret float32
		return ret
	}
	return *o.Efficiency
}

// GetEfficiencyOk returns a tuple with the Efficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetricsPower) GetEfficiencyOk() (*float32, bool) {
	if o == nil || IsNil(o.Efficiency) {
		return nil, false
	}
	return o.Efficiency, true
}

// HasEfficiency returns a boolean if a field has been set.
func (o *EnvironmentalMetricsPower) HasEfficiency() bool {
	if o != nil && !IsNil(o.Efficiency) {
		return true
	}

	return false
}

// SetEfficiency gets a reference to the given float32 and assigns it to the Efficiency field.
func (o *EnvironmentalMetricsPower) SetEfficiency(v float32) {
	o.Efficiency = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *EnvironmentalMetricsPower) GetSources() []EnvironmentalMetricsPowerSourcesInner {
	if o == nil || IsNil(o.Sources) {
		var ret []EnvironmentalMetricsPowerSourcesInner
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentalMetricsPower) GetSourcesOk() ([]EnvironmentalMetricsPowerSourcesInner, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *EnvironmentalMetricsPower) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []EnvironmentalMetricsPowerSourcesInner and assigns it to the Sources field.
func (o *EnvironmentalMetricsPower) SetSources(v []EnvironmentalMetricsPowerSourcesInner) {
	o.Sources = v
}

func (o EnvironmentalMetricsPower) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentalMetricsPower) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Consumption) {
		toSerialize["consumption"] = o.Consumption
	}
	if !IsNil(o.Efficiency) {
		toSerialize["efficiency"] = o.Efficiency
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableEnvironmentalMetricsPower struct {
	value *EnvironmentalMetricsPower
	isSet bool
}

func (v NullableEnvironmentalMetricsPower) Get() *EnvironmentalMetricsPower {
	return v.value
}

func (v *NullableEnvironmentalMetricsPower) Set(val *EnvironmentalMetricsPower) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentalMetricsPower) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentalMetricsPower) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentalMetricsPower(val *EnvironmentalMetricsPower) *NullableEnvironmentalMetricsPower {
	return &NullableEnvironmentalMetricsPower{value: val, isSet: true}
}

func (v NullableEnvironmentalMetricsPower) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentalMetricsPower) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


