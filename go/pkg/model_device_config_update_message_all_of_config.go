/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceConfigUpdateMessageAllOfConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceConfigUpdateMessageAllOfConfig{}

// DeviceConfigUpdateMessageAllOfConfig struct for DeviceConfigUpdateMessageAllOfConfig
type DeviceConfigUpdateMessageAllOfConfig struct {
	DeviceSettings DeviceSettings `json:"deviceSettings"`
	Interfaces map[string]DeviceConfigUpdateMessageAllOfConfigInterfaces `json:"interfaces,omitempty"`
}

type _DeviceConfigUpdateMessageAllOfConfig DeviceConfigUpdateMessageAllOfConfig

// NewDeviceConfigUpdateMessageAllOfConfig instantiates a new DeviceConfigUpdateMessageAllOfConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceConfigUpdateMessageAllOfConfig(deviceSettings DeviceSettings) *DeviceConfigUpdateMessageAllOfConfig {
	this := DeviceConfigUpdateMessageAllOfConfig{}
	this.DeviceSettings = deviceSettings
	return &this
}

// NewDeviceConfigUpdateMessageAllOfConfigWithDefaults instantiates a new DeviceConfigUpdateMessageAllOfConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceConfigUpdateMessageAllOfConfigWithDefaults() *DeviceConfigUpdateMessageAllOfConfig {
	this := DeviceConfigUpdateMessageAllOfConfig{}
	return &this
}

// GetDeviceSettings returns the DeviceSettings field value
func (o *DeviceConfigUpdateMessageAllOfConfig) GetDeviceSettings() DeviceSettings {
	if o == nil {
		var ret DeviceSettings
		return ret
	}

	return o.DeviceSettings
}

// GetDeviceSettingsOk returns a tuple with the DeviceSettings field value
// and a boolean to check if the value has been set.
func (o *DeviceConfigUpdateMessageAllOfConfig) GetDeviceSettingsOk() (*DeviceSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceSettings, true
}

// SetDeviceSettings sets field value
func (o *DeviceConfigUpdateMessageAllOfConfig) SetDeviceSettings(v DeviceSettings) {
	o.DeviceSettings = v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *DeviceConfigUpdateMessageAllOfConfig) GetInterfaces() map[string]DeviceConfigUpdateMessageAllOfConfigInterfaces {
	if o == nil || IsNil(o.Interfaces) {
		var ret map[string]DeviceConfigUpdateMessageAllOfConfigInterfaces
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigUpdateMessageAllOfConfig) GetInterfacesOk() (map[string]DeviceConfigUpdateMessageAllOfConfigInterfaces, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return map[string]DeviceConfigUpdateMessageAllOfConfigInterfaces{}, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *DeviceConfigUpdateMessageAllOfConfig) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given map[string]DeviceConfigUpdateMessageAllOfConfigInterfaces and assigns it to the Interfaces field.
func (o *DeviceConfigUpdateMessageAllOfConfig) SetInterfaces(v map[string]DeviceConfigUpdateMessageAllOfConfigInterfaces) {
	o.Interfaces = v
}

func (o DeviceConfigUpdateMessageAllOfConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceConfigUpdateMessageAllOfConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceSettings"] = o.DeviceSettings
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	return toSerialize, nil
}

func (o *DeviceConfigUpdateMessageAllOfConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceSettings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceConfigUpdateMessageAllOfConfig := _DeviceConfigUpdateMessageAllOfConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceConfigUpdateMessageAllOfConfig)

	if err != nil {
		return err
	}

	*o = DeviceConfigUpdateMessageAllOfConfig(varDeviceConfigUpdateMessageAllOfConfig)

	return err
}

type NullableDeviceConfigUpdateMessageAllOfConfig struct {
	value *DeviceConfigUpdateMessageAllOfConfig
	isSet bool
}

func (v NullableDeviceConfigUpdateMessageAllOfConfig) Get() *DeviceConfigUpdateMessageAllOfConfig {
	return v.value
}

func (v *NullableDeviceConfigUpdateMessageAllOfConfig) Set(val *DeviceConfigUpdateMessageAllOfConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceConfigUpdateMessageAllOfConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceConfigUpdateMessageAllOfConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceConfigUpdateMessageAllOfConfig(val *DeviceConfigUpdateMessageAllOfConfig) *NullableDeviceConfigUpdateMessageAllOfConfig {
	return &NullableDeviceConfigUpdateMessageAllOfConfig{value: val, isSet: true}
}

func (v NullableDeviceConfigUpdateMessageAllOfConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceConfigUpdateMessageAllOfConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


