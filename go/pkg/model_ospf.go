/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the Ospf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ospf{}

// Ospf struct for Ospf
type Ospf struct {
	ProcessId *int32 `json:"processId,omitempty"`
	// Represents either an IPv4 or IPv6 address
	RouterId *string `json:"routerId,omitempty"`
	Areas []RoutingConfigOspfAreasInner `json:"areas,omitempty"`
}

// NewOspf instantiates a new Ospf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOspf() *Ospf {
	this := Ospf{}
	return &this
}

// NewOspfWithDefaults instantiates a new Ospf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOspfWithDefaults() *Ospf {
	this := Ospf{}
	return &this
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *Ospf) GetProcessId() int32 {
	if o == nil || IsNil(o.ProcessId) {
		var ret int32
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ospf) GetProcessIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessId) {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *Ospf) HasProcessId() bool {
	if o != nil && !IsNil(o.ProcessId) {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given int32 and assigns it to the ProcessId field.
func (o *Ospf) SetProcessId(v int32) {
	o.ProcessId = &v
}

// GetRouterId returns the RouterId field value if set, zero value otherwise.
func (o *Ospf) GetRouterId() string {
	if o == nil || IsNil(o.RouterId) {
		var ret string
		return ret
	}
	return *o.RouterId
}

// GetRouterIdOk returns a tuple with the RouterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ospf) GetRouterIdOk() (*string, bool) {
	if o == nil || IsNil(o.RouterId) {
		return nil, false
	}
	return o.RouterId, true
}

// HasRouterId returns a boolean if a field has been set.
func (o *Ospf) HasRouterId() bool {
	if o != nil && !IsNil(o.RouterId) {
		return true
	}

	return false
}

// SetRouterId gets a reference to the given string and assigns it to the RouterId field.
func (o *Ospf) SetRouterId(v string) {
	o.RouterId = &v
}

// GetAreas returns the Areas field value if set, zero value otherwise.
func (o *Ospf) GetAreas() []RoutingConfigOspfAreasInner {
	if o == nil || IsNil(o.Areas) {
		var ret []RoutingConfigOspfAreasInner
		return ret
	}
	return o.Areas
}

// GetAreasOk returns a tuple with the Areas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ospf) GetAreasOk() ([]RoutingConfigOspfAreasInner, bool) {
	if o == nil || IsNil(o.Areas) {
		return nil, false
	}
	return o.Areas, true
}

// HasAreas returns a boolean if a field has been set.
func (o *Ospf) HasAreas() bool {
	if o != nil && !IsNil(o.Areas) {
		return true
	}

	return false
}

// SetAreas gets a reference to the given []RoutingConfigOspfAreasInner and assigns it to the Areas field.
func (o *Ospf) SetAreas(v []RoutingConfigOspfAreasInner) {
	o.Areas = v
}

func (o Ospf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ospf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProcessId) {
		toSerialize["processId"] = o.ProcessId
	}
	if !IsNil(o.RouterId) {
		toSerialize["routerId"] = o.RouterId
	}
	if !IsNil(o.Areas) {
		toSerialize["areas"] = o.Areas
	}
	return toSerialize, nil
}

type NullableOspf struct {
	value *Ospf
	isSet bool
}

func (v NullableOspf) Get() *Ospf {
	return v.value
}

func (v *NullableOspf) Set(val *Ospf) {
	v.value = val
	v.isSet = true
}

func (v NullableOspf) IsSet() bool {
	return v.isSet
}

func (v *NullableOspf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOspf(val *Ospf) *NullableOspf {
	return &NullableOspf{value: val, isSet: true}
}

func (v NullableOspf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOspf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


