/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the HelloMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelloMessage{}

// HelloMessage struct for HelloMessage
type HelloMessage struct {
	// Message type identifier
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	MessageType *string `json:"messageType,omitempty"`
	Device Device `json:"device"`
	// Optional greeting or additional information.
	Message *string `json:"message,omitempty"`
}

type _HelloMessage HelloMessage

// NewHelloMessage instantiates a new HelloMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelloMessage(type_ string, timestamp time.Time, schemaVersion string, device Device) *HelloMessage {
	this := HelloMessage{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.Device = device
	return &this
}

// NewHelloMessageWithDefaults instantiates a new HelloMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelloMessageWithDefaults() *HelloMessage {
	this := HelloMessage{}
	return &this
}

// GetType returns the Type field value
func (o *HelloMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *HelloMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *HelloMessage) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *HelloMessage) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *HelloMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *HelloMessage) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *HelloMessage) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *HelloMessage) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *HelloMessage) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *HelloMessage) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelloMessage) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *HelloMessage) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *HelloMessage) SetMessageType(v string) {
	o.MessageType = &v
}

// GetDevice returns the Device field value
func (o *HelloMessage) GetDevice() Device {
	if o == nil {
		var ret Device
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *HelloMessage) GetDeviceOk() (*Device, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *HelloMessage) SetDevice(v Device) {
	o.Device = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *HelloMessage) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelloMessage) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *HelloMessage) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *HelloMessage) SetMessage(v string) {
	o.Message = &v
}

func (o HelloMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelloMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	if !IsNil(o.MessageType) {
		toSerialize["messageType"] = o.MessageType
	}
	toSerialize["device"] = o.Device
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

func (o *HelloMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"device",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelloMessage := _HelloMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHelloMessage)

	if err != nil {
		return err
	}

	*o = HelloMessage(varHelloMessage)

	return err
}

type NullableHelloMessage struct {
	value *HelloMessage
	isSet bool
}

func (v NullableHelloMessage) Get() *HelloMessage {
	return v.value
}

func (v *NullableHelloMessage) Set(val *HelloMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableHelloMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableHelloMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelloMessage(val *HelloMessage) *NullableHelloMessage {
	return &NullableHelloMessage{value: val, isSet: true}
}

func (v NullableHelloMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelloMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


