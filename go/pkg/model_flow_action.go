/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlowAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowAction{}

// FlowAction struct for FlowAction
type FlowAction struct {
	Action string `json:"action"`
	OutputPort *int32 `json:"output_port,omitempty"`
	// Action related to VLAN handling
	VlanAction *string `json:"vlan_action,omitempty"`
}

type _FlowAction FlowAction

// NewFlowAction instantiates a new FlowAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowAction(action string) *FlowAction {
	this := FlowAction{}
	this.Action = action
	return &this
}

// NewFlowActionWithDefaults instantiates a new FlowAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowActionWithDefaults() *FlowAction {
	this := FlowAction{}
	return &this
}

// GetAction returns the Action field value
func (o *FlowAction) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *FlowAction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *FlowAction) SetAction(v string) {
	o.Action = v
}

// GetOutputPort returns the OutputPort field value if set, zero value otherwise.
func (o *FlowAction) GetOutputPort() int32 {
	if o == nil || IsNil(o.OutputPort) {
		var ret int32
		return ret
	}
	return *o.OutputPort
}

// GetOutputPortOk returns a tuple with the OutputPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowAction) GetOutputPortOk() (*int32, bool) {
	if o == nil || IsNil(o.OutputPort) {
		return nil, false
	}
	return o.OutputPort, true
}

// HasOutputPort returns a boolean if a field has been set.
func (o *FlowAction) HasOutputPort() bool {
	if o != nil && !IsNil(o.OutputPort) {
		return true
	}

	return false
}

// SetOutputPort gets a reference to the given int32 and assigns it to the OutputPort field.
func (o *FlowAction) SetOutputPort(v int32) {
	o.OutputPort = &v
}

// GetVlanAction returns the VlanAction field value if set, zero value otherwise.
func (o *FlowAction) GetVlanAction() string {
	if o == nil || IsNil(o.VlanAction) {
		var ret string
		return ret
	}
	return *o.VlanAction
}

// GetVlanActionOk returns a tuple with the VlanAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowAction) GetVlanActionOk() (*string, bool) {
	if o == nil || IsNil(o.VlanAction) {
		return nil, false
	}
	return o.VlanAction, true
}

// HasVlanAction returns a boolean if a field has been set.
func (o *FlowAction) HasVlanAction() bool {
	if o != nil && !IsNil(o.VlanAction) {
		return true
	}

	return false
}

// SetVlanAction gets a reference to the given string and assigns it to the VlanAction field.
func (o *FlowAction) SetVlanAction(v string) {
	o.VlanAction = &v
}

func (o FlowAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.OutputPort) {
		toSerialize["output_port"] = o.OutputPort
	}
	if !IsNil(o.VlanAction) {
		toSerialize["vlan_action"] = o.VlanAction
	}
	return toSerialize, nil
}

func (o *FlowAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowAction := _FlowAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowAction)

	if err != nil {
		return err
	}

	*o = FlowAction(varFlowAction)

	return err
}

type NullableFlowAction struct {
	value *FlowAction
	isSet bool
}

func (v NullableFlowAction) Get() *FlowAction {
	return v.value
}

func (v *NullableFlowAction) Set(val *FlowAction) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowAction) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowAction(val *FlowAction) *NullableFlowAction {
	return &NullableFlowAction{value: val, isSet: true}
}

func (v NullableFlowAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


