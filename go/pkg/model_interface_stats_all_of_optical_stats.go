/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the InterfaceStatsAllOfOpticalStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceStatsAllOfOpticalStats{}

// InterfaceStatsAllOfOpticalStats Optical interface statistics
type InterfaceStatsAllOfOpticalStats struct {
	RxPower *float32 `json:"rxPower,omitempty"`
	TxPower *float32 `json:"txPower,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
	Voltage *float32 `json:"voltage,omitempty"`
	Bias *float32 `json:"bias,omitempty"`
}

// NewInterfaceStatsAllOfOpticalStats instantiates a new InterfaceStatsAllOfOpticalStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceStatsAllOfOpticalStats() *InterfaceStatsAllOfOpticalStats {
	this := InterfaceStatsAllOfOpticalStats{}
	return &this
}

// NewInterfaceStatsAllOfOpticalStatsWithDefaults instantiates a new InterfaceStatsAllOfOpticalStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceStatsAllOfOpticalStatsWithDefaults() *InterfaceStatsAllOfOpticalStats {
	this := InterfaceStatsAllOfOpticalStats{}
	return &this
}

// GetRxPower returns the RxPower field value if set, zero value otherwise.
func (o *InterfaceStatsAllOfOpticalStats) GetRxPower() float32 {
	if o == nil || IsNil(o.RxPower) {
		var ret float32
		return ret
	}
	return *o.RxPower
}

// GetRxPowerOk returns a tuple with the RxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsAllOfOpticalStats) GetRxPowerOk() (*float32, bool) {
	if o == nil || IsNil(o.RxPower) {
		return nil, false
	}
	return o.RxPower, true
}

// HasRxPower returns a boolean if a field has been set.
func (o *InterfaceStatsAllOfOpticalStats) HasRxPower() bool {
	if o != nil && !IsNil(o.RxPower) {
		return true
	}

	return false
}

// SetRxPower gets a reference to the given float32 and assigns it to the RxPower field.
func (o *InterfaceStatsAllOfOpticalStats) SetRxPower(v float32) {
	o.RxPower = &v
}

// GetTxPower returns the TxPower field value if set, zero value otherwise.
func (o *InterfaceStatsAllOfOpticalStats) GetTxPower() float32 {
	if o == nil || IsNil(o.TxPower) {
		var ret float32
		return ret
	}
	return *o.TxPower
}

// GetTxPowerOk returns a tuple with the TxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsAllOfOpticalStats) GetTxPowerOk() (*float32, bool) {
	if o == nil || IsNil(o.TxPower) {
		return nil, false
	}
	return o.TxPower, true
}

// HasTxPower returns a boolean if a field has been set.
func (o *InterfaceStatsAllOfOpticalStats) HasTxPower() bool {
	if o != nil && !IsNil(o.TxPower) {
		return true
	}

	return false
}

// SetTxPower gets a reference to the given float32 and assigns it to the TxPower field.
func (o *InterfaceStatsAllOfOpticalStats) SetTxPower(v float32) {
	o.TxPower = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *InterfaceStatsAllOfOpticalStats) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsAllOfOpticalStats) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *InterfaceStatsAllOfOpticalStats) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *InterfaceStatsAllOfOpticalStats) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetVoltage returns the Voltage field value if set, zero value otherwise.
func (o *InterfaceStatsAllOfOpticalStats) GetVoltage() float32 {
	if o == nil || IsNil(o.Voltage) {
		var ret float32
		return ret
	}
	return *o.Voltage
}

// GetVoltageOk returns a tuple with the Voltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsAllOfOpticalStats) GetVoltageOk() (*float32, bool) {
	if o == nil || IsNil(o.Voltage) {
		return nil, false
	}
	return o.Voltage, true
}

// HasVoltage returns a boolean if a field has been set.
func (o *InterfaceStatsAllOfOpticalStats) HasVoltage() bool {
	if o != nil && !IsNil(o.Voltage) {
		return true
	}

	return false
}

// SetVoltage gets a reference to the given float32 and assigns it to the Voltage field.
func (o *InterfaceStatsAllOfOpticalStats) SetVoltage(v float32) {
	o.Voltage = &v
}

// GetBias returns the Bias field value if set, zero value otherwise.
func (o *InterfaceStatsAllOfOpticalStats) GetBias() float32 {
	if o == nil || IsNil(o.Bias) {
		var ret float32
		return ret
	}
	return *o.Bias
}

// GetBiasOk returns a tuple with the Bias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsAllOfOpticalStats) GetBiasOk() (*float32, bool) {
	if o == nil || IsNil(o.Bias) {
		return nil, false
	}
	return o.Bias, true
}

// HasBias returns a boolean if a field has been set.
func (o *InterfaceStatsAllOfOpticalStats) HasBias() bool {
	if o != nil && !IsNil(o.Bias) {
		return true
	}

	return false
}

// SetBias gets a reference to the given float32 and assigns it to the Bias field.
func (o *InterfaceStatsAllOfOpticalStats) SetBias(v float32) {
	o.Bias = &v
}

func (o InterfaceStatsAllOfOpticalStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceStatsAllOfOpticalStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RxPower) {
		toSerialize["rxPower"] = o.RxPower
	}
	if !IsNil(o.TxPower) {
		toSerialize["txPower"] = o.TxPower
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Voltage) {
		toSerialize["voltage"] = o.Voltage
	}
	if !IsNil(o.Bias) {
		toSerialize["bias"] = o.Bias
	}
	return toSerialize, nil
}

type NullableInterfaceStatsAllOfOpticalStats struct {
	value *InterfaceStatsAllOfOpticalStats
	isSet bool
}

func (v NullableInterfaceStatsAllOfOpticalStats) Get() *InterfaceStatsAllOfOpticalStats {
	return v.value
}

func (v *NullableInterfaceStatsAllOfOpticalStats) Set(val *InterfaceStatsAllOfOpticalStats) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceStatsAllOfOpticalStats) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceStatsAllOfOpticalStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceStatsAllOfOpticalStats(val *InterfaceStatsAllOfOpticalStats) *NullableInterfaceStatsAllOfOpticalStats {
	return &NullableInterfaceStatsAllOfOpticalStats{value: val, isSet: true}
}

func (v NullableInterfaceStatsAllOfOpticalStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceStatsAllOfOpticalStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


