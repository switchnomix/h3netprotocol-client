/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the PortConfigAllOfStormControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortConfigAllOfStormControl{}

// PortConfigAllOfStormControl Storm control settings
type PortConfigAllOfStormControl struct {
	Broadcast *int32 `json:"broadcast,omitempty"`
	Multicast *int32 `json:"multicast,omitempty"`
	Unicast *int32 `json:"unicast,omitempty"`
}

// NewPortConfigAllOfStormControl instantiates a new PortConfigAllOfStormControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortConfigAllOfStormControl() *PortConfigAllOfStormControl {
	this := PortConfigAllOfStormControl{}
	return &this
}

// NewPortConfigAllOfStormControlWithDefaults instantiates a new PortConfigAllOfStormControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortConfigAllOfStormControlWithDefaults() *PortConfigAllOfStormControl {
	this := PortConfigAllOfStormControl{}
	return &this
}

// GetBroadcast returns the Broadcast field value if set, zero value otherwise.
func (o *PortConfigAllOfStormControl) GetBroadcast() int32 {
	if o == nil || IsNil(o.Broadcast) {
		var ret int32
		return ret
	}
	return *o.Broadcast
}

// GetBroadcastOk returns a tuple with the Broadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfigAllOfStormControl) GetBroadcastOk() (*int32, bool) {
	if o == nil || IsNil(o.Broadcast) {
		return nil, false
	}
	return o.Broadcast, true
}

// HasBroadcast returns a boolean if a field has been set.
func (o *PortConfigAllOfStormControl) HasBroadcast() bool {
	if o != nil && !IsNil(o.Broadcast) {
		return true
	}

	return false
}

// SetBroadcast gets a reference to the given int32 and assigns it to the Broadcast field.
func (o *PortConfigAllOfStormControl) SetBroadcast(v int32) {
	o.Broadcast = &v
}

// GetMulticast returns the Multicast field value if set, zero value otherwise.
func (o *PortConfigAllOfStormControl) GetMulticast() int32 {
	if o == nil || IsNil(o.Multicast) {
		var ret int32
		return ret
	}
	return *o.Multicast
}

// GetMulticastOk returns a tuple with the Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfigAllOfStormControl) GetMulticastOk() (*int32, bool) {
	if o == nil || IsNil(o.Multicast) {
		return nil, false
	}
	return o.Multicast, true
}

// HasMulticast returns a boolean if a field has been set.
func (o *PortConfigAllOfStormControl) HasMulticast() bool {
	if o != nil && !IsNil(o.Multicast) {
		return true
	}

	return false
}

// SetMulticast gets a reference to the given int32 and assigns it to the Multicast field.
func (o *PortConfigAllOfStormControl) SetMulticast(v int32) {
	o.Multicast = &v
}

// GetUnicast returns the Unicast field value if set, zero value otherwise.
func (o *PortConfigAllOfStormControl) GetUnicast() int32 {
	if o == nil || IsNil(o.Unicast) {
		var ret int32
		return ret
	}
	return *o.Unicast
}

// GetUnicastOk returns a tuple with the Unicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortConfigAllOfStormControl) GetUnicastOk() (*int32, bool) {
	if o == nil || IsNil(o.Unicast) {
		return nil, false
	}
	return o.Unicast, true
}

// HasUnicast returns a boolean if a field has been set.
func (o *PortConfigAllOfStormControl) HasUnicast() bool {
	if o != nil && !IsNil(o.Unicast) {
		return true
	}

	return false
}

// SetUnicast gets a reference to the given int32 and assigns it to the Unicast field.
func (o *PortConfigAllOfStormControl) SetUnicast(v int32) {
	o.Unicast = &v
}

func (o PortConfigAllOfStormControl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortConfigAllOfStormControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Broadcast) {
		toSerialize["broadcast"] = o.Broadcast
	}
	if !IsNil(o.Multicast) {
		toSerialize["multicast"] = o.Multicast
	}
	if !IsNil(o.Unicast) {
		toSerialize["unicast"] = o.Unicast
	}
	return toSerialize, nil
}

type NullablePortConfigAllOfStormControl struct {
	value *PortConfigAllOfStormControl
	isSet bool
}

func (v NullablePortConfigAllOfStormControl) Get() *PortConfigAllOfStormControl {
	return v.value
}

func (v *NullablePortConfigAllOfStormControl) Set(val *PortConfigAllOfStormControl) {
	v.value = val
	v.isSet = true
}

func (v NullablePortConfigAllOfStormControl) IsSet() bool {
	return v.isSet
}

func (v *NullablePortConfigAllOfStormControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortConfigAllOfStormControl(val *PortConfigAllOfStormControl) *NullablePortConfigAllOfStormControl {
	return &NullablePortConfigAllOfStormControl{value: val, isSet: true}
}

func (v NullablePortConfigAllOfStormControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortConfigAllOfStormControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


