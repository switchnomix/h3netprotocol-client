/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeterConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeterConfig{}

// MeterConfig struct for MeterConfig
type MeterConfig struct {
	MeterId int32 `json:"meterId"`
	// Rate in kbps
	Rate int32 `json:"rate"`
	// Burst size in bytes
	BurstSize int32 `json:"burst_size"`
	// Meter action when threshold is exceeded
	Action string `json:"action"`
}

type _MeterConfig MeterConfig

// NewMeterConfig instantiates a new MeterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeterConfig(meterId int32, rate int32, burstSize int32, action string) *MeterConfig {
	this := MeterConfig{}
	this.MeterId = meterId
	this.Rate = rate
	this.BurstSize = burstSize
	this.Action = action
	return &this
}

// NewMeterConfigWithDefaults instantiates a new MeterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeterConfigWithDefaults() *MeterConfig {
	this := MeterConfig{}
	return &this
}

// GetMeterId returns the MeterId field value
func (o *MeterConfig) GetMeterId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value
// and a boolean to check if the value has been set.
func (o *MeterConfig) GetMeterIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeterId, true
}

// SetMeterId sets field value
func (o *MeterConfig) SetMeterId(v int32) {
	o.MeterId = v
}

// GetRate returns the Rate field value
func (o *MeterConfig) GetRate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *MeterConfig) GetRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *MeterConfig) SetRate(v int32) {
	o.Rate = v
}

// GetBurstSize returns the BurstSize field value
func (o *MeterConfig) GetBurstSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BurstSize
}

// GetBurstSizeOk returns a tuple with the BurstSize field value
// and a boolean to check if the value has been set.
func (o *MeterConfig) GetBurstSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurstSize, true
}

// SetBurstSize sets field value
func (o *MeterConfig) SetBurstSize(v int32) {
	o.BurstSize = v
}

// GetAction returns the Action field value
func (o *MeterConfig) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *MeterConfig) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *MeterConfig) SetAction(v string) {
	o.Action = v
}

func (o MeterConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeterConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["meterId"] = o.MeterId
	toSerialize["rate"] = o.Rate
	toSerialize["burst_size"] = o.BurstSize
	toSerialize["action"] = o.Action
	return toSerialize, nil
}

func (o *MeterConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meterId",
		"rate",
		"burst_size",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeterConfig := _MeterConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeterConfig)

	if err != nil {
		return err
	}

	*o = MeterConfig(varMeterConfig)

	return err
}

type NullableMeterConfig struct {
	value *MeterConfig
	isSet bool
}

func (v NullableMeterConfig) Get() *MeterConfig {
	return v.value
}

func (v *NullableMeterConfig) Set(val *MeterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMeterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMeterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeterConfig(val *MeterConfig) *NullableMeterConfig {
	return &NullableMeterConfig{value: val, isSet: true}
}

func (v NullableMeterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


