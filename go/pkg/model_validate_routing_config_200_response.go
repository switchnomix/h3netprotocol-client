/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ValidateRoutingConfig200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateRoutingConfig200Response{}

// ValidateRoutingConfig200Response struct for ValidateRoutingConfig200Response
type ValidateRoutingConfig200Response struct {
	Valid *bool `json:"valid,omitempty"`
	Errors []ValidateRoutingConfig200ResponseErrorsInner `json:"errors,omitempty"`
	Warnings []ValidateRoutingConfig200ResponseErrorsInner `json:"warnings,omitempty"`
}

// NewValidateRoutingConfig200Response instantiates a new ValidateRoutingConfig200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateRoutingConfig200Response() *ValidateRoutingConfig200Response {
	this := ValidateRoutingConfig200Response{}
	return &this
}

// NewValidateRoutingConfig200ResponseWithDefaults instantiates a new ValidateRoutingConfig200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateRoutingConfig200ResponseWithDefaults() *ValidateRoutingConfig200Response {
	this := ValidateRoutingConfig200Response{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *ValidateRoutingConfig200Response) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRoutingConfig200Response) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *ValidateRoutingConfig200Response) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *ValidateRoutingConfig200Response) SetValid(v bool) {
	o.Valid = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ValidateRoutingConfig200Response) GetErrors() []ValidateRoutingConfig200ResponseErrorsInner {
	if o == nil || IsNil(o.Errors) {
		var ret []ValidateRoutingConfig200ResponseErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRoutingConfig200Response) GetErrorsOk() ([]ValidateRoutingConfig200ResponseErrorsInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ValidateRoutingConfig200Response) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ValidateRoutingConfig200ResponseErrorsInner and assigns it to the Errors field.
func (o *ValidateRoutingConfig200Response) SetErrors(v []ValidateRoutingConfig200ResponseErrorsInner) {
	o.Errors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ValidateRoutingConfig200Response) GetWarnings() []ValidateRoutingConfig200ResponseErrorsInner {
	if o == nil || IsNil(o.Warnings) {
		var ret []ValidateRoutingConfig200ResponseErrorsInner
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRoutingConfig200Response) GetWarningsOk() ([]ValidateRoutingConfig200ResponseErrorsInner, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ValidateRoutingConfig200Response) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []ValidateRoutingConfig200ResponseErrorsInner and assigns it to the Warnings field.
func (o *ValidateRoutingConfig200Response) SetWarnings(v []ValidateRoutingConfig200ResponseErrorsInner) {
	o.Warnings = v
}

func (o ValidateRoutingConfig200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateRoutingConfig200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableValidateRoutingConfig200Response struct {
	value *ValidateRoutingConfig200Response
	isSet bool
}

func (v NullableValidateRoutingConfig200Response) Get() *ValidateRoutingConfig200Response {
	return v.value
}

func (v *NullableValidateRoutingConfig200Response) Set(val *ValidateRoutingConfig200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateRoutingConfig200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateRoutingConfig200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateRoutingConfig200Response(val *ValidateRoutingConfig200Response) *NullableValidateRoutingConfig200Response {
	return &NullableValidateRoutingConfig200Response{value: val, isSet: true}
}

func (v NullableValidateRoutingConfig200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateRoutingConfig200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


