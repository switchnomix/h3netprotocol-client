/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpanningTreeConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanningTreeConfig{}

// SpanningTreeConfig struct for SpanningTreeConfig
type SpanningTreeConfig struct {
	Enabled bool `json:"enabled"`
	Mode *string `json:"mode,omitempty"`
}

type _SpanningTreeConfig SpanningTreeConfig

// NewSpanningTreeConfig instantiates a new SpanningTreeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanningTreeConfig(enabled bool) *SpanningTreeConfig {
	this := SpanningTreeConfig{}
	this.Enabled = enabled
	return &this
}

// NewSpanningTreeConfigWithDefaults instantiates a new SpanningTreeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanningTreeConfigWithDefaults() *SpanningTreeConfig {
	this := SpanningTreeConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *SpanningTreeConfig) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SpanningTreeConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SpanningTreeConfig) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *SpanningTreeConfig) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanningTreeConfig) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *SpanningTreeConfig) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *SpanningTreeConfig) SetMode(v string) {
	o.Mode = &v
}

func (o SpanningTreeConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanningTreeConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	return toSerialize, nil
}

func (o *SpanningTreeConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpanningTreeConfig := _SpanningTreeConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpanningTreeConfig)

	if err != nil {
		return err
	}

	*o = SpanningTreeConfig(varSpanningTreeConfig)

	return err
}

type NullableSpanningTreeConfig struct {
	value *SpanningTreeConfig
	isSet bool
}

func (v NullableSpanningTreeConfig) Get() *SpanningTreeConfig {
	return v.value
}

func (v *NullableSpanningTreeConfig) Set(val *SpanningTreeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanningTreeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanningTreeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanningTreeConfig(val *SpanningTreeConfig) *NullableSpanningTreeConfig {
	return &NullableSpanningTreeConfig{value: val, isSet: true}
}

func (v NullableSpanningTreeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanningTreeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


