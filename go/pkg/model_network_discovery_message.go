/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the NetworkDiscoveryMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDiscoveryMessage{}

// NetworkDiscoveryMessage struct for NetworkDiscoveryMessage
type NetworkDiscoveryMessage struct {
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	DiscoveryType string `json:"discoveryType"`
	// Starting points for discovery
	StartPoints []string `json:"startPoints,omitempty"`
	// Subnets to discover
	Subnets []IPAddressWithPrefix `json:"subnets,omitempty"`
}

type _NetworkDiscoveryMessage NetworkDiscoveryMessage

// NewNetworkDiscoveryMessage instantiates a new NetworkDiscoveryMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDiscoveryMessage(type_ string, timestamp time.Time, schemaVersion string, discoveryType string) *NetworkDiscoveryMessage {
	this := NetworkDiscoveryMessage{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.DiscoveryType = discoveryType
	return &this
}

// NewNetworkDiscoveryMessageWithDefaults instantiates a new NetworkDiscoveryMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDiscoveryMessageWithDefaults() *NetworkDiscoveryMessage {
	this := NetworkDiscoveryMessage{}
	return &this
}

// GetType returns the Type field value
func (o *NetworkDiscoveryMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NetworkDiscoveryMessage) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *NetworkDiscoveryMessage) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *NetworkDiscoveryMessage) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *NetworkDiscoveryMessage) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryMessage) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *NetworkDiscoveryMessage) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetDiscoveryType returns the DiscoveryType field value
func (o *NetworkDiscoveryMessage) GetDiscoveryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscoveryType
}

// GetDiscoveryTypeOk returns a tuple with the DiscoveryType field value
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryMessage) GetDiscoveryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscoveryType, true
}

// SetDiscoveryType sets field value
func (o *NetworkDiscoveryMessage) SetDiscoveryType(v string) {
	o.DiscoveryType = v
}

// GetStartPoints returns the StartPoints field value if set, zero value otherwise.
func (o *NetworkDiscoveryMessage) GetStartPoints() []string {
	if o == nil || IsNil(o.StartPoints) {
		var ret []string
		return ret
	}
	return o.StartPoints
}

// GetStartPointsOk returns a tuple with the StartPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryMessage) GetStartPointsOk() ([]string, bool) {
	if o == nil || IsNil(o.StartPoints) {
		return nil, false
	}
	return o.StartPoints, true
}

// HasStartPoints returns a boolean if a field has been set.
func (o *NetworkDiscoveryMessage) HasStartPoints() bool {
	if o != nil && !IsNil(o.StartPoints) {
		return true
	}

	return false
}

// SetStartPoints gets a reference to the given []string and assigns it to the StartPoints field.
func (o *NetworkDiscoveryMessage) SetStartPoints(v []string) {
	o.StartPoints = v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *NetworkDiscoveryMessage) GetSubnets() []IPAddressWithPrefix {
	if o == nil || IsNil(o.Subnets) {
		var ret []IPAddressWithPrefix
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDiscoveryMessage) GetSubnetsOk() ([]IPAddressWithPrefix, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *NetworkDiscoveryMessage) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []IPAddressWithPrefix and assigns it to the Subnets field.
func (o *NetworkDiscoveryMessage) SetSubnets(v []IPAddressWithPrefix) {
	o.Subnets = v
}

func (o NetworkDiscoveryMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDiscoveryMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["discoveryType"] = o.DiscoveryType
	if !IsNil(o.StartPoints) {
		toSerialize["startPoints"] = o.StartPoints
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	return toSerialize, nil
}

func (o *NetworkDiscoveryMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"discoveryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDiscoveryMessage := _NetworkDiscoveryMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkDiscoveryMessage)

	if err != nil {
		return err
	}

	*o = NetworkDiscoveryMessage(varNetworkDiscoveryMessage)

	return err
}

type NullableNetworkDiscoveryMessage struct {
	value *NetworkDiscoveryMessage
	isSet bool
}

func (v NullableNetworkDiscoveryMessage) Get() *NetworkDiscoveryMessage {
	return v.value
}

func (v *NullableNetworkDiscoveryMessage) Set(val *NetworkDiscoveryMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDiscoveryMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDiscoveryMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDiscoveryMessage(val *NetworkDiscoveryMessage) *NullableNetworkDiscoveryMessage {
	return &NullableNetworkDiscoveryMessage{value: val, isSet: true}
}

func (v NullableNetworkDiscoveryMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDiscoveryMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


