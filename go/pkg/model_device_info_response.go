/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DeviceInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceInfoResponse{}

// DeviceInfoResponse struct for DeviceInfoResponse
type DeviceInfoResponse struct {
	// Must be DEVICE_INFO_RESPONSE
	Type string `json:"type"`
	// ISO 8601 formatted timestamp with timezone
	Timestamp time.Time `json:"timestamp"`
	// Schema version
	SchemaVersion string `json:"schemaVersion"`
	DeviceId string `json:"deviceId"`
	Settings DeviceSettings `json:"settings"`
}

type _DeviceInfoResponse DeviceInfoResponse

// NewDeviceInfoResponse instantiates a new DeviceInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceInfoResponse(type_ string, timestamp time.Time, schemaVersion string, deviceId string, settings DeviceSettings) *DeviceInfoResponse {
	this := DeviceInfoResponse{}
	this.Type = type_
	this.Timestamp = timestamp
	this.SchemaVersion = schemaVersion
	this.DeviceId = deviceId
	this.Settings = settings
	return &this
}

// NewDeviceInfoResponseWithDefaults instantiates a new DeviceInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceInfoResponseWithDefaults() *DeviceInfoResponse {
	this := DeviceInfoResponse{}
	return &this
}

// GetType returns the Type field value
func (o *DeviceInfoResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeviceInfoResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeviceInfoResponse) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *DeviceInfoResponse) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *DeviceInfoResponse) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *DeviceInfoResponse) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *DeviceInfoResponse) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *DeviceInfoResponse) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *DeviceInfoResponse) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetDeviceId returns the DeviceId field value
func (o *DeviceInfoResponse) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *DeviceInfoResponse) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *DeviceInfoResponse) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetSettings returns the Settings field value
func (o *DeviceInfoResponse) GetSettings() DeviceSettings {
	if o == nil {
		var ret DeviceSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *DeviceInfoResponse) GetSettingsOk() (*DeviceSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *DeviceInfoResponse) SetSettings(v DeviceSettings) {
	o.Settings = v
}

func (o DeviceInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["settings"] = o.Settings
	return toSerialize, nil
}

func (o *DeviceInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"timestamp",
		"schemaVersion",
		"deviceId",
		"settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceInfoResponse := _DeviceInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceInfoResponse)

	if err != nil {
		return err
	}

	*o = DeviceInfoResponse(varDeviceInfoResponse)

	return err
}

type NullableDeviceInfoResponse struct {
	value *DeviceInfoResponse
	isSet bool
}

func (v NullableDeviceInfoResponse) Get() *DeviceInfoResponse {
	return v.value
}

func (v *NullableDeviceInfoResponse) Set(val *DeviceInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceInfoResponse(val *DeviceInfoResponse) *NullableDeviceInfoResponse {
	return &NullableDeviceInfoResponse{value: val, isSet: true}
}

func (v NullableDeviceInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


