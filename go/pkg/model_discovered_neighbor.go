/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DiscoveredNeighbor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveredNeighbor{}

// DiscoveredNeighbor struct for DiscoveredNeighbor
type DiscoveredNeighbor struct {
	Device Device `json:"device"`
	DiscoveryProtocol string `json:"discoveryProtocol"`
	// Hops from start point
	Distance *int32 `json:"distance,omitempty"`
	// Last time device was discovered
	LastSeen *time.Time `json:"lastSeen,omitempty"`
	// Discovery confidence score
	Confidence *float32 `json:"confidence,omitempty"`
	ConnectionDetails *DiscoveredNeighborConnectionDetails `json:"connectionDetails,omitempty"`
}

type _DiscoveredNeighbor DiscoveredNeighbor

// NewDiscoveredNeighbor instantiates a new DiscoveredNeighbor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveredNeighbor(device Device, discoveryProtocol string) *DiscoveredNeighbor {
	this := DiscoveredNeighbor{}
	this.Device = device
	this.DiscoveryProtocol = discoveryProtocol
	return &this
}

// NewDiscoveredNeighborWithDefaults instantiates a new DiscoveredNeighbor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveredNeighborWithDefaults() *DiscoveredNeighbor {
	this := DiscoveredNeighbor{}
	return &this
}

// GetDevice returns the Device field value
func (o *DiscoveredNeighbor) GetDevice() Device {
	if o == nil {
		var ret Device
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighbor) GetDeviceOk() (*Device, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *DiscoveredNeighbor) SetDevice(v Device) {
	o.Device = v
}

// GetDiscoveryProtocol returns the DiscoveryProtocol field value
func (o *DiscoveredNeighbor) GetDiscoveryProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscoveryProtocol
}

// GetDiscoveryProtocolOk returns a tuple with the DiscoveryProtocol field value
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighbor) GetDiscoveryProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscoveryProtocol, true
}

// SetDiscoveryProtocol sets field value
func (o *DiscoveredNeighbor) SetDiscoveryProtocol(v string) {
	o.DiscoveryProtocol = v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *DiscoveredNeighbor) GetDistance() int32 {
	if o == nil || IsNil(o.Distance) {
		var ret int32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighbor) GetDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *DiscoveredNeighbor) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given int32 and assigns it to the Distance field.
func (o *DiscoveredNeighbor) SetDistance(v int32) {
	o.Distance = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *DiscoveredNeighbor) GetLastSeen() time.Time {
	if o == nil || IsNil(o.LastSeen) {
		var ret time.Time
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighbor) GetLastSeenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *DiscoveredNeighbor) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given time.Time and assigns it to the LastSeen field.
func (o *DiscoveredNeighbor) SetLastSeen(v time.Time) {
	o.LastSeen = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *DiscoveredNeighbor) GetConfidence() float32 {
	if o == nil || IsNil(o.Confidence) {
		var ret float32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighbor) GetConfidenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *DiscoveredNeighbor) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given float32 and assigns it to the Confidence field.
func (o *DiscoveredNeighbor) SetConfidence(v float32) {
	o.Confidence = &v
}

// GetConnectionDetails returns the ConnectionDetails field value if set, zero value otherwise.
func (o *DiscoveredNeighbor) GetConnectionDetails() DiscoveredNeighborConnectionDetails {
	if o == nil || IsNil(o.ConnectionDetails) {
		var ret DiscoveredNeighborConnectionDetails
		return ret
	}
	return *o.ConnectionDetails
}

// GetConnectionDetailsOk returns a tuple with the ConnectionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredNeighbor) GetConnectionDetailsOk() (*DiscoveredNeighborConnectionDetails, bool) {
	if o == nil || IsNil(o.ConnectionDetails) {
		return nil, false
	}
	return o.ConnectionDetails, true
}

// HasConnectionDetails returns a boolean if a field has been set.
func (o *DiscoveredNeighbor) HasConnectionDetails() bool {
	if o != nil && !IsNil(o.ConnectionDetails) {
		return true
	}

	return false
}

// SetConnectionDetails gets a reference to the given DiscoveredNeighborConnectionDetails and assigns it to the ConnectionDetails field.
func (o *DiscoveredNeighbor) SetConnectionDetails(v DiscoveredNeighborConnectionDetails) {
	o.ConnectionDetails = &v
}

func (o DiscoveredNeighbor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveredNeighbor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device"] = o.Device
	toSerialize["discoveryProtocol"] = o.DiscoveryProtocol
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.LastSeen) {
		toSerialize["lastSeen"] = o.LastSeen
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	if !IsNil(o.ConnectionDetails) {
		toSerialize["connectionDetails"] = o.ConnectionDetails
	}
	return toSerialize, nil
}

func (o *DiscoveredNeighbor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device",
		"discoveryProtocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiscoveredNeighbor := _DiscoveredNeighbor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiscoveredNeighbor)

	if err != nil {
		return err
	}

	*o = DiscoveredNeighbor(varDiscoveredNeighbor)

	return err
}

type NullableDiscoveredNeighbor struct {
	value *DiscoveredNeighbor
	isSet bool
}

func (v NullableDiscoveredNeighbor) Get() *DiscoveredNeighbor {
	return v.value
}

func (v *NullableDiscoveredNeighbor) Set(val *DiscoveredNeighbor) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveredNeighbor) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveredNeighbor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveredNeighbor(val *DiscoveredNeighbor) *NullableDiscoveredNeighbor {
	return &NullableDiscoveredNeighbor{value: val, isSet: true}
}

func (v NullableDiscoveredNeighbor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveredNeighbor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


