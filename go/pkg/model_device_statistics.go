/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the DeviceStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceStatistics{}

// DeviceStatistics Device statistics
type DeviceStatistics struct {
	// Device identifier
	DeviceId *string `json:"deviceId,omitempty"`
	// Device name
	Name *string `json:"name,omitempty"`
	// Device type
	Type *string `json:"type,omitempty"`
	// Whether the device is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Device operational status
	OperStatus *string `json:"operStatus,omitempty"`
	// Device administrative status
	AdminStatus *string `json:"adminStatus,omitempty"`
	// List of VLAN IDs
	VlanIds []int32 `json:"vlanIds,omitempty"`
	// Last time the device flapped
	LastFlapped *float32 `json:"lastFlapped,omitempty"`
	Counters *InterfaceCounters `json:"counters,omitempty"`
	QosStats *QoSStats `json:"qosStats,omitempty"`
	ErrorStats *ErrorStats `json:"errorStats,omitempty"`
	OpticalStats *DeviceStatisticsOpticalStats `json:"opticalStats,omitempty"`
	RateStats *DeviceStatisticsRateStats `json:"rateStats,omitempty"`
}

// NewDeviceStatistics instantiates a new DeviceStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceStatistics() *DeviceStatistics {
	this := DeviceStatistics{}
	return &this
}

// NewDeviceStatisticsWithDefaults instantiates a new DeviceStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceStatisticsWithDefaults() *DeviceStatistics {
	this := DeviceStatistics{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DeviceStatistics) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceStatistics) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DeviceStatistics) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceStatistics) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceStatistics) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceStatistics) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceStatistics) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceStatistics) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeviceStatistics) SetType(v string) {
	o.Type = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DeviceStatistics) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DeviceStatistics) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DeviceStatistics) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetOperStatus returns the OperStatus field value if set, zero value otherwise.
func (o *DeviceStatistics) GetOperStatus() string {
	if o == nil || IsNil(o.OperStatus) {
		var ret string
		return ret
	}
	return *o.OperStatus
}

// GetOperStatusOk returns a tuple with the OperStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetOperStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OperStatus) {
		return nil, false
	}
	return o.OperStatus, true
}

// HasOperStatus returns a boolean if a field has been set.
func (o *DeviceStatistics) HasOperStatus() bool {
	if o != nil && !IsNil(o.OperStatus) {
		return true
	}

	return false
}

// SetOperStatus gets a reference to the given string and assigns it to the OperStatus field.
func (o *DeviceStatistics) SetOperStatus(v string) {
	o.OperStatus = &v
}

// GetAdminStatus returns the AdminStatus field value if set, zero value otherwise.
func (o *DeviceStatistics) GetAdminStatus() string {
	if o == nil || IsNil(o.AdminStatus) {
		var ret string
		return ret
	}
	return *o.AdminStatus
}

// GetAdminStatusOk returns a tuple with the AdminStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetAdminStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AdminStatus) {
		return nil, false
	}
	return o.AdminStatus, true
}

// HasAdminStatus returns a boolean if a field has been set.
func (o *DeviceStatistics) HasAdminStatus() bool {
	if o != nil && !IsNil(o.AdminStatus) {
		return true
	}

	return false
}

// SetAdminStatus gets a reference to the given string and assigns it to the AdminStatus field.
func (o *DeviceStatistics) SetAdminStatus(v string) {
	o.AdminStatus = &v
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *DeviceStatistics) GetVlanIds() []int32 {
	if o == nil || IsNil(o.VlanIds) {
		var ret []int32
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetVlanIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *DeviceStatistics) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []int32 and assigns it to the VlanIds field.
func (o *DeviceStatistics) SetVlanIds(v []int32) {
	o.VlanIds = v
}

// GetLastFlapped returns the LastFlapped field value if set, zero value otherwise.
func (o *DeviceStatistics) GetLastFlapped() float32 {
	if o == nil || IsNil(o.LastFlapped) {
		var ret float32
		return ret
	}
	return *o.LastFlapped
}

// GetLastFlappedOk returns a tuple with the LastFlapped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetLastFlappedOk() (*float32, bool) {
	if o == nil || IsNil(o.LastFlapped) {
		return nil, false
	}
	return o.LastFlapped, true
}

// HasLastFlapped returns a boolean if a field has been set.
func (o *DeviceStatistics) HasLastFlapped() bool {
	if o != nil && !IsNil(o.LastFlapped) {
		return true
	}

	return false
}

// SetLastFlapped gets a reference to the given float32 and assigns it to the LastFlapped field.
func (o *DeviceStatistics) SetLastFlapped(v float32) {
	o.LastFlapped = &v
}

// GetCounters returns the Counters field value if set, zero value otherwise.
func (o *DeviceStatistics) GetCounters() InterfaceCounters {
	if o == nil || IsNil(o.Counters) {
		var ret InterfaceCounters
		return ret
	}
	return *o.Counters
}

// GetCountersOk returns a tuple with the Counters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetCountersOk() (*InterfaceCounters, bool) {
	if o == nil || IsNil(o.Counters) {
		return nil, false
	}
	return o.Counters, true
}

// HasCounters returns a boolean if a field has been set.
func (o *DeviceStatistics) HasCounters() bool {
	if o != nil && !IsNil(o.Counters) {
		return true
	}

	return false
}

// SetCounters gets a reference to the given InterfaceCounters and assigns it to the Counters field.
func (o *DeviceStatistics) SetCounters(v InterfaceCounters) {
	o.Counters = &v
}

// GetQosStats returns the QosStats field value if set, zero value otherwise.
func (o *DeviceStatistics) GetQosStats() QoSStats {
	if o == nil || IsNil(o.QosStats) {
		var ret QoSStats
		return ret
	}
	return *o.QosStats
}

// GetQosStatsOk returns a tuple with the QosStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetQosStatsOk() (*QoSStats, bool) {
	if o == nil || IsNil(o.QosStats) {
		return nil, false
	}
	return o.QosStats, true
}

// HasQosStats returns a boolean if a field has been set.
func (o *DeviceStatistics) HasQosStats() bool {
	if o != nil && !IsNil(o.QosStats) {
		return true
	}

	return false
}

// SetQosStats gets a reference to the given QoSStats and assigns it to the QosStats field.
func (o *DeviceStatistics) SetQosStats(v QoSStats) {
	o.QosStats = &v
}

// GetErrorStats returns the ErrorStats field value if set, zero value otherwise.
func (o *DeviceStatistics) GetErrorStats() ErrorStats {
	if o == nil || IsNil(o.ErrorStats) {
		var ret ErrorStats
		return ret
	}
	return *o.ErrorStats
}

// GetErrorStatsOk returns a tuple with the ErrorStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetErrorStatsOk() (*ErrorStats, bool) {
	if o == nil || IsNil(o.ErrorStats) {
		return nil, false
	}
	return o.ErrorStats, true
}

// HasErrorStats returns a boolean if a field has been set.
func (o *DeviceStatistics) HasErrorStats() bool {
	if o != nil && !IsNil(o.ErrorStats) {
		return true
	}

	return false
}

// SetErrorStats gets a reference to the given ErrorStats and assigns it to the ErrorStats field.
func (o *DeviceStatistics) SetErrorStats(v ErrorStats) {
	o.ErrorStats = &v
}

// GetOpticalStats returns the OpticalStats field value if set, zero value otherwise.
func (o *DeviceStatistics) GetOpticalStats() DeviceStatisticsOpticalStats {
	if o == nil || IsNil(o.OpticalStats) {
		var ret DeviceStatisticsOpticalStats
		return ret
	}
	return *o.OpticalStats
}

// GetOpticalStatsOk returns a tuple with the OpticalStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetOpticalStatsOk() (*DeviceStatisticsOpticalStats, bool) {
	if o == nil || IsNil(o.OpticalStats) {
		return nil, false
	}
	return o.OpticalStats, true
}

// HasOpticalStats returns a boolean if a field has been set.
func (o *DeviceStatistics) HasOpticalStats() bool {
	if o != nil && !IsNil(o.OpticalStats) {
		return true
	}

	return false
}

// SetOpticalStats gets a reference to the given DeviceStatisticsOpticalStats and assigns it to the OpticalStats field.
func (o *DeviceStatistics) SetOpticalStats(v DeviceStatisticsOpticalStats) {
	o.OpticalStats = &v
}

// GetRateStats returns the RateStats field value if set, zero value otherwise.
func (o *DeviceStatistics) GetRateStats() DeviceStatisticsRateStats {
	if o == nil || IsNil(o.RateStats) {
		var ret DeviceStatisticsRateStats
		return ret
	}
	return *o.RateStats
}

// GetRateStatsOk returns a tuple with the RateStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatistics) GetRateStatsOk() (*DeviceStatisticsRateStats, bool) {
	if o == nil || IsNil(o.RateStats) {
		return nil, false
	}
	return o.RateStats, true
}

// HasRateStats returns a boolean if a field has been set.
func (o *DeviceStatistics) HasRateStats() bool {
	if o != nil && !IsNil(o.RateStats) {
		return true
	}

	return false
}

// SetRateStats gets a reference to the given DeviceStatisticsRateStats and assigns it to the RateStats field.
func (o *DeviceStatistics) SetRateStats(v DeviceStatisticsRateStats) {
	o.RateStats = &v
}

func (o DeviceStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.OperStatus) {
		toSerialize["operStatus"] = o.OperStatus
	}
	if !IsNil(o.AdminStatus) {
		toSerialize["adminStatus"] = o.AdminStatus
	}
	if !IsNil(o.VlanIds) {
		toSerialize["vlanIds"] = o.VlanIds
	}
	if !IsNil(o.LastFlapped) {
		toSerialize["lastFlapped"] = o.LastFlapped
	}
	if !IsNil(o.Counters) {
		toSerialize["counters"] = o.Counters
	}
	if !IsNil(o.QosStats) {
		toSerialize["qosStats"] = o.QosStats
	}
	if !IsNil(o.ErrorStats) {
		toSerialize["errorStats"] = o.ErrorStats
	}
	if !IsNil(o.OpticalStats) {
		toSerialize["opticalStats"] = o.OpticalStats
	}
	if !IsNil(o.RateStats) {
		toSerialize["rateStats"] = o.RateStats
	}
	return toSerialize, nil
}

type NullableDeviceStatistics struct {
	value *DeviceStatistics
	isSet bool
}

func (v NullableDeviceStatistics) Get() *DeviceStatistics {
	return v.value
}

func (v *NullableDeviceStatistics) Set(val *DeviceStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceStatistics(val *DeviceStatistics) *NullableDeviceStatistics {
	return &NullableDeviceStatistics{value: val, isSet: true}
}

func (v NullableDeviceStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


