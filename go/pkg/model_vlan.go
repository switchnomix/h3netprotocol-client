/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VLAN type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VLAN{}

// VLAN struct for VLAN
type VLAN struct {
	VlanId int32 `json:"vlanId"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Status *string `json:"status,omitempty"`
	Ports VLANPorts `json:"ports"`
	// Ingress ACL applied to VLAN
	AclIn *string `json:"aclIn,omitempty"`
	// Egress ACL applied to VLAN
	AclOut *string `json:"aclOut,omitempty"`
	// MAC address for the VLAN's router interface
	VVLANRouterMac *string `json:"vVLANRouterMac,omitempty"`
	InterVLANRoutingVips []IPConfig `json:"interVLANRoutingVips,omitempty"`
	Properties *VLANProperties `json:"properties,omitempty"`
	Security *VLANSecurity `json:"security,omitempty"`
	Qos *VLANQos `json:"qos,omitempty"`
}

type _VLAN VLAN

// NewVLAN instantiates a new VLAN object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVLAN(vlanId int32, name string, ports VLANPorts) *VLAN {
	this := VLAN{}
	this.VlanId = vlanId
	this.Name = name
	this.Ports = ports
	return &this
}

// NewVLANWithDefaults instantiates a new VLAN object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVLANWithDefaults() *VLAN {
	this := VLAN{}
	return &this
}

// GetVlanId returns the VlanId field value
func (o *VLAN) GetVlanId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value
// and a boolean to check if the value has been set.
func (o *VLAN) GetVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanId, true
}

// SetVlanId sets field value
func (o *VLAN) SetVlanId(v int32) {
	o.VlanId = v
}

// GetName returns the Name field value
func (o *VLAN) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VLAN) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VLAN) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VLAN) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VLAN) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VLAN) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VLAN) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VLAN) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VLAN) SetStatus(v string) {
	o.Status = &v
}

// GetPorts returns the Ports field value
func (o *VLAN) GetPorts() VLANPorts {
	if o == nil {
		var ret VLANPorts
		return ret
	}

	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value
// and a boolean to check if the value has been set.
func (o *VLAN) GetPortsOk() (*VLANPorts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ports, true
}

// SetPorts sets field value
func (o *VLAN) SetPorts(v VLANPorts) {
	o.Ports = v
}

// GetAclIn returns the AclIn field value if set, zero value otherwise.
func (o *VLAN) GetAclIn() string {
	if o == nil || IsNil(o.AclIn) {
		var ret string
		return ret
	}
	return *o.AclIn
}

// GetAclInOk returns a tuple with the AclIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetAclInOk() (*string, bool) {
	if o == nil || IsNil(o.AclIn) {
		return nil, false
	}
	return o.AclIn, true
}

// HasAclIn returns a boolean if a field has been set.
func (o *VLAN) HasAclIn() bool {
	if o != nil && !IsNil(o.AclIn) {
		return true
	}

	return false
}

// SetAclIn gets a reference to the given string and assigns it to the AclIn field.
func (o *VLAN) SetAclIn(v string) {
	o.AclIn = &v
}

// GetAclOut returns the AclOut field value if set, zero value otherwise.
func (o *VLAN) GetAclOut() string {
	if o == nil || IsNil(o.AclOut) {
		var ret string
		return ret
	}
	return *o.AclOut
}

// GetAclOutOk returns a tuple with the AclOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetAclOutOk() (*string, bool) {
	if o == nil || IsNil(o.AclOut) {
		return nil, false
	}
	return o.AclOut, true
}

// HasAclOut returns a boolean if a field has been set.
func (o *VLAN) HasAclOut() bool {
	if o != nil && !IsNil(o.AclOut) {
		return true
	}

	return false
}

// SetAclOut gets a reference to the given string and assigns it to the AclOut field.
func (o *VLAN) SetAclOut(v string) {
	o.AclOut = &v
}

// GetVVLANRouterMac returns the VVLANRouterMac field value if set, zero value otherwise.
func (o *VLAN) GetVVLANRouterMac() string {
	if o == nil || IsNil(o.VVLANRouterMac) {
		var ret string
		return ret
	}
	return *o.VVLANRouterMac
}

// GetVVLANRouterMacOk returns a tuple with the VVLANRouterMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetVVLANRouterMacOk() (*string, bool) {
	if o == nil || IsNil(o.VVLANRouterMac) {
		return nil, false
	}
	return o.VVLANRouterMac, true
}

// HasVVLANRouterMac returns a boolean if a field has been set.
func (o *VLAN) HasVVLANRouterMac() bool {
	if o != nil && !IsNil(o.VVLANRouterMac) {
		return true
	}

	return false
}

// SetVVLANRouterMac gets a reference to the given string and assigns it to the VVLANRouterMac field.
func (o *VLAN) SetVVLANRouterMac(v string) {
	o.VVLANRouterMac = &v
}

// GetInterVLANRoutingVips returns the InterVLANRoutingVips field value if set, zero value otherwise.
func (o *VLAN) GetInterVLANRoutingVips() []IPConfig {
	if o == nil || IsNil(o.InterVLANRoutingVips) {
		var ret []IPConfig
		return ret
	}
	return o.InterVLANRoutingVips
}

// GetInterVLANRoutingVipsOk returns a tuple with the InterVLANRoutingVips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetInterVLANRoutingVipsOk() ([]IPConfig, bool) {
	if o == nil || IsNil(o.InterVLANRoutingVips) {
		return nil, false
	}
	return o.InterVLANRoutingVips, true
}

// HasInterVLANRoutingVips returns a boolean if a field has been set.
func (o *VLAN) HasInterVLANRoutingVips() bool {
	if o != nil && !IsNil(o.InterVLANRoutingVips) {
		return true
	}

	return false
}

// SetInterVLANRoutingVips gets a reference to the given []IPConfig and assigns it to the InterVLANRoutingVips field.
func (o *VLAN) SetInterVLANRoutingVips(v []IPConfig) {
	o.InterVLANRoutingVips = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *VLAN) GetProperties() VLANProperties {
	if o == nil || IsNil(o.Properties) {
		var ret VLANProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetPropertiesOk() (*VLANProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *VLAN) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given VLANProperties and assigns it to the Properties field.
func (o *VLAN) SetProperties(v VLANProperties) {
	o.Properties = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *VLAN) GetSecurity() VLANSecurity {
	if o == nil || IsNil(o.Security) {
		var ret VLANSecurity
		return ret
	}
	return *o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetSecurityOk() (*VLANSecurity, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *VLAN) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given VLANSecurity and assigns it to the Security field.
func (o *VLAN) SetSecurity(v VLANSecurity) {
	o.Security = &v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *VLAN) GetQos() VLANQos {
	if o == nil || IsNil(o.Qos) {
		var ret VLANQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VLAN) GetQosOk() (*VLANQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *VLAN) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given VLANQos and assigns it to the Qos field.
func (o *VLAN) SetQos(v VLANQos) {
	o.Qos = &v
}

func (o VLAN) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VLAN) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vlanId"] = o.VlanId
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["ports"] = o.Ports
	if !IsNil(o.AclIn) {
		toSerialize["aclIn"] = o.AclIn
	}
	if !IsNil(o.AclOut) {
		toSerialize["aclOut"] = o.AclOut
	}
	if !IsNil(o.VVLANRouterMac) {
		toSerialize["vVLANRouterMac"] = o.VVLANRouterMac
	}
	if !IsNil(o.InterVLANRoutingVips) {
		toSerialize["interVLANRoutingVips"] = o.InterVLANRoutingVips
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	return toSerialize, nil
}

func (o *VLAN) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vlanId",
		"name",
		"ports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVLAN := _VLAN{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVLAN)

	if err != nil {
		return err
	}

	*o = VLAN(varVLAN)

	return err
}

type NullableVLAN struct {
	value *VLAN
	isSet bool
}

func (v NullableVLAN) Get() *VLAN {
	return v.value
}

func (v *NullableVLAN) Set(val *VLAN) {
	v.value = val
	v.isSet = true
}

func (v NullableVLAN) IsSet() bool {
	return v.isSet
}

func (v *NullableVLAN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVLAN(val *VLAN) *NullableVLAN {
	return &NullableVLAN{value: val, isSet: true}
}

func (v NullableVLAN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVLAN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


