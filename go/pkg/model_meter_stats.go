/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MeterStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeterStats{}

// MeterStats Meter statistics
type MeterStats struct {
	// Device identifier
	DeviceId string `json:"deviceId"`
	// Meter identifier
	MeterId string `json:"meterId"`
	// Meter name
	Name *string `json:"name,omitempty"`
	// Type of meter
	Type *string `json:"type,omitempty"`
	// Current rate
	Rate *float32 `json:"rate,omitempty"`
	// Burst size
	BurstSize *float32 `json:"burstSize,omitempty"`
	Bands []MeterStatsBandsInner `json:"bands,omitempty"`
	// Total packet count
	PacketCount *float32 `json:"packetCount,omitempty"`
	// Total byte count
	ByteCount *float32 `json:"byteCount,omitempty"`
	// Duration in seconds
	Duration *float32 `json:"duration,omitempty"`
	// Last update timestamp
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

type _MeterStats MeterStats

// NewMeterStats instantiates a new MeterStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeterStats(deviceId string, meterId string) *MeterStats {
	this := MeterStats{}
	this.DeviceId = deviceId
	this.MeterId = meterId
	return &this
}

// NewMeterStatsWithDefaults instantiates a new MeterStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeterStatsWithDefaults() *MeterStats {
	this := MeterStats{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *MeterStats) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *MeterStats) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *MeterStats) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetMeterId returns the MeterId field value
func (o *MeterStats) GetMeterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value
// and a boolean to check if the value has been set.
func (o *MeterStats) GetMeterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeterId, true
}

// SetMeterId sets field value
func (o *MeterStats) SetMeterId(v string) {
	o.MeterId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MeterStats) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MeterStats) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MeterStats) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MeterStats) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MeterStats) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MeterStats) SetType(v string) {
	o.Type = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *MeterStats) GetRate() float32 {
	if o == nil || IsNil(o.Rate) {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetRateOk() (*float32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *MeterStats) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *MeterStats) SetRate(v float32) {
	o.Rate = &v
}

// GetBurstSize returns the BurstSize field value if set, zero value otherwise.
func (o *MeterStats) GetBurstSize() float32 {
	if o == nil || IsNil(o.BurstSize) {
		var ret float32
		return ret
	}
	return *o.BurstSize
}

// GetBurstSizeOk returns a tuple with the BurstSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetBurstSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.BurstSize) {
		return nil, false
	}
	return o.BurstSize, true
}

// HasBurstSize returns a boolean if a field has been set.
func (o *MeterStats) HasBurstSize() bool {
	if o != nil && !IsNil(o.BurstSize) {
		return true
	}

	return false
}

// SetBurstSize gets a reference to the given float32 and assigns it to the BurstSize field.
func (o *MeterStats) SetBurstSize(v float32) {
	o.BurstSize = &v
}

// GetBands returns the Bands field value if set, zero value otherwise.
func (o *MeterStats) GetBands() []MeterStatsBandsInner {
	if o == nil || IsNil(o.Bands) {
		var ret []MeterStatsBandsInner
		return ret
	}
	return o.Bands
}

// GetBandsOk returns a tuple with the Bands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetBandsOk() ([]MeterStatsBandsInner, bool) {
	if o == nil || IsNil(o.Bands) {
		return nil, false
	}
	return o.Bands, true
}

// HasBands returns a boolean if a field has been set.
func (o *MeterStats) HasBands() bool {
	if o != nil && !IsNil(o.Bands) {
		return true
	}

	return false
}

// SetBands gets a reference to the given []MeterStatsBandsInner and assigns it to the Bands field.
func (o *MeterStats) SetBands(v []MeterStatsBandsInner) {
	o.Bands = v
}

// GetPacketCount returns the PacketCount field value if set, zero value otherwise.
func (o *MeterStats) GetPacketCount() float32 {
	if o == nil || IsNil(o.PacketCount) {
		var ret float32
		return ret
	}
	return *o.PacketCount
}

// GetPacketCountOk returns a tuple with the PacketCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetPacketCountOk() (*float32, bool) {
	if o == nil || IsNil(o.PacketCount) {
		return nil, false
	}
	return o.PacketCount, true
}

// HasPacketCount returns a boolean if a field has been set.
func (o *MeterStats) HasPacketCount() bool {
	if o != nil && !IsNil(o.PacketCount) {
		return true
	}

	return false
}

// SetPacketCount gets a reference to the given float32 and assigns it to the PacketCount field.
func (o *MeterStats) SetPacketCount(v float32) {
	o.PacketCount = &v
}

// GetByteCount returns the ByteCount field value if set, zero value otherwise.
func (o *MeterStats) GetByteCount() float32 {
	if o == nil || IsNil(o.ByteCount) {
		var ret float32
		return ret
	}
	return *o.ByteCount
}

// GetByteCountOk returns a tuple with the ByteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetByteCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ByteCount) {
		return nil, false
	}
	return o.ByteCount, true
}

// HasByteCount returns a boolean if a field has been set.
func (o *MeterStats) HasByteCount() bool {
	if o != nil && !IsNil(o.ByteCount) {
		return true
	}

	return false
}

// SetByteCount gets a reference to the given float32 and assigns it to the ByteCount field.
func (o *MeterStats) SetByteCount(v float32) {
	o.ByteCount = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *MeterStats) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *MeterStats) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *MeterStats) SetDuration(v float32) {
	o.Duration = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *MeterStats) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterStats) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *MeterStats) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *MeterStats) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o MeterStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeterStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["meterId"] = o.MeterId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.BurstSize) {
		toSerialize["burstSize"] = o.BurstSize
	}
	if !IsNil(o.Bands) {
		toSerialize["bands"] = o.Bands
	}
	if !IsNil(o.PacketCount) {
		toSerialize["packetCount"] = o.PacketCount
	}
	if !IsNil(o.ByteCount) {
		toSerialize["byteCount"] = o.ByteCount
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return toSerialize, nil
}

func (o *MeterStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceId",
		"meterId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeterStats := _MeterStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeterStats)

	if err != nil {
		return err
	}

	*o = MeterStats(varMeterStats)

	return err
}

type NullableMeterStats struct {
	value *MeterStats
	isSet bool
}

func (v NullableMeterStats) Get() *MeterStats {
	return v.value
}

func (v *NullableMeterStats) Set(val *MeterStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMeterStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMeterStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeterStats(val *MeterStats) *NullableMeterStats {
	return &NullableMeterStats{value: val, isSet: true}
}

func (v NullableMeterStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeterStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


