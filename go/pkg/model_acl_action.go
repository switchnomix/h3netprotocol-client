/*
H3Net Protocol API

H3Net Protocol schema with various messages and configurations.

API version: 1.0.0
Contact: h3netprotocol@googlegroups.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h3netclient

import (
	"encoding/json"
)

// checks if the ACLAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACLAction{}

// ACLAction ACL action configuration
type ACLAction struct {
	// Allow traffic matching this rule
	Allow *bool `json:"allow,omitempty"`
	// Deny traffic matching this rule
	Deny *bool `json:"deny,omitempty"`
	// Mirror traffic to specified port
	Mirror *int32 `json:"mirror,omitempty"`
	// Output port for matching traffic
	Output *int32 `json:"output,omitempty"`
	Ratelimit *ACLActionRatelimit `json:"ratelimit,omitempty"`
	Redirect *ACLActionRedirect `json:"redirect,omitempty"`
	Logging *ACLActionLogging `json:"logging,omitempty"`
}

// NewACLAction instantiates a new ACLAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLAction() *ACLAction {
	this := ACLAction{}
	return &this
}

// NewACLActionWithDefaults instantiates a new ACLAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLActionWithDefaults() *ACLAction {
	this := ACLAction{}
	return &this
}

// GetAllow returns the Allow field value if set, zero value otherwise.
func (o *ACLAction) GetAllow() bool {
	if o == nil || IsNil(o.Allow) {
		var ret bool
		return ret
	}
	return *o.Allow
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLAction) GetAllowOk() (*bool, bool) {
	if o == nil || IsNil(o.Allow) {
		return nil, false
	}
	return o.Allow, true
}

// HasAllow returns a boolean if a field has been set.
func (o *ACLAction) HasAllow() bool {
	if o != nil && !IsNil(o.Allow) {
		return true
	}

	return false
}

// SetAllow gets a reference to the given bool and assigns it to the Allow field.
func (o *ACLAction) SetAllow(v bool) {
	o.Allow = &v
}

// GetDeny returns the Deny field value if set, zero value otherwise.
func (o *ACLAction) GetDeny() bool {
	if o == nil || IsNil(o.Deny) {
		var ret bool
		return ret
	}
	return *o.Deny
}

// GetDenyOk returns a tuple with the Deny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLAction) GetDenyOk() (*bool, bool) {
	if o == nil || IsNil(o.Deny) {
		return nil, false
	}
	return o.Deny, true
}

// HasDeny returns a boolean if a field has been set.
func (o *ACLAction) HasDeny() bool {
	if o != nil && !IsNil(o.Deny) {
		return true
	}

	return false
}

// SetDeny gets a reference to the given bool and assigns it to the Deny field.
func (o *ACLAction) SetDeny(v bool) {
	o.Deny = &v
}

// GetMirror returns the Mirror field value if set, zero value otherwise.
func (o *ACLAction) GetMirror() int32 {
	if o == nil || IsNil(o.Mirror) {
		var ret int32
		return ret
	}
	return *o.Mirror
}

// GetMirrorOk returns a tuple with the Mirror field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLAction) GetMirrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Mirror) {
		return nil, false
	}
	return o.Mirror, true
}

// HasMirror returns a boolean if a field has been set.
func (o *ACLAction) HasMirror() bool {
	if o != nil && !IsNil(o.Mirror) {
		return true
	}

	return false
}

// SetMirror gets a reference to the given int32 and assigns it to the Mirror field.
func (o *ACLAction) SetMirror(v int32) {
	o.Mirror = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ACLAction) GetOutput() int32 {
	if o == nil || IsNil(o.Output) {
		var ret int32
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLAction) GetOutputOk() (*int32, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ACLAction) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given int32 and assigns it to the Output field.
func (o *ACLAction) SetOutput(v int32) {
	o.Output = &v
}

// GetRatelimit returns the Ratelimit field value if set, zero value otherwise.
func (o *ACLAction) GetRatelimit() ACLActionRatelimit {
	if o == nil || IsNil(o.Ratelimit) {
		var ret ACLActionRatelimit
		return ret
	}
	return *o.Ratelimit
}

// GetRatelimitOk returns a tuple with the Ratelimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLAction) GetRatelimitOk() (*ACLActionRatelimit, bool) {
	if o == nil || IsNil(o.Ratelimit) {
		return nil, false
	}
	return o.Ratelimit, true
}

// HasRatelimit returns a boolean if a field has been set.
func (o *ACLAction) HasRatelimit() bool {
	if o != nil && !IsNil(o.Ratelimit) {
		return true
	}

	return false
}

// SetRatelimit gets a reference to the given ACLActionRatelimit and assigns it to the Ratelimit field.
func (o *ACLAction) SetRatelimit(v ACLActionRatelimit) {
	o.Ratelimit = &v
}

// GetRedirect returns the Redirect field value if set, zero value otherwise.
func (o *ACLAction) GetRedirect() ACLActionRedirect {
	if o == nil || IsNil(o.Redirect) {
		var ret ACLActionRedirect
		return ret
	}
	return *o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLAction) GetRedirectOk() (*ACLActionRedirect, bool) {
	if o == nil || IsNil(o.Redirect) {
		return nil, false
	}
	return o.Redirect, true
}

// HasRedirect returns a boolean if a field has been set.
func (o *ACLAction) HasRedirect() bool {
	if o != nil && !IsNil(o.Redirect) {
		return true
	}

	return false
}

// SetRedirect gets a reference to the given ACLActionRedirect and assigns it to the Redirect field.
func (o *ACLAction) SetRedirect(v ACLActionRedirect) {
	o.Redirect = &v
}

// GetLogging returns the Logging field value if set, zero value otherwise.
func (o *ACLAction) GetLogging() ACLActionLogging {
	if o == nil || IsNil(o.Logging) {
		var ret ACLActionLogging
		return ret
	}
	return *o.Logging
}

// GetLoggingOk returns a tuple with the Logging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLAction) GetLoggingOk() (*ACLActionLogging, bool) {
	if o == nil || IsNil(o.Logging) {
		return nil, false
	}
	return o.Logging, true
}

// HasLogging returns a boolean if a field has been set.
func (o *ACLAction) HasLogging() bool {
	if o != nil && !IsNil(o.Logging) {
		return true
	}

	return false
}

// SetLogging gets a reference to the given ACLActionLogging and assigns it to the Logging field.
func (o *ACLAction) SetLogging(v ACLActionLogging) {
	o.Logging = &v
}

func (o ACLAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACLAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allow) {
		toSerialize["allow"] = o.Allow
	}
	if !IsNil(o.Deny) {
		toSerialize["deny"] = o.Deny
	}
	if !IsNil(o.Mirror) {
		toSerialize["mirror"] = o.Mirror
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.Ratelimit) {
		toSerialize["ratelimit"] = o.Ratelimit
	}
	if !IsNil(o.Redirect) {
		toSerialize["redirect"] = o.Redirect
	}
	if !IsNil(o.Logging) {
		toSerialize["logging"] = o.Logging
	}
	return toSerialize, nil
}

type NullableACLAction struct {
	value *ACLAction
	isSet bool
}

func (v NullableACLAction) Get() *ACLAction {
	return v.value
}

func (v *NullableACLAction) Set(val *ACLAction) {
	v.value = val
	v.isSet = true
}

func (v NullableACLAction) IsSet() bool {
	return v.isSet
}

func (v *NullableACLAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLAction(val *ACLAction) *NullableACLAction {
	return &NullableACLAction{value: val, isSet: true}
}

func (v NullableACLAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


