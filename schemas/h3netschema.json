{
  "openapi": "3.0.0",
  "info": {
    "title": "H3Net Protocol API",
    "version": "1.0.0",
    "description": "H3Net Protocol schema with various messages and configurations.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact": {
      "name": "Switchnomix Inc.",
      "url": "https://www.switchnomix.com",
      "email": "h3netprotocol@googlegroups.com"
    },
    "x-author": "Shivaram Mysore",
    "x-company": "Switchnomix Inc.",
    "x-copyright": "Copyright Â© 2025 Switchnomix Inc. All rights reserved.",
    "x-documentation": "https://h3net.switchnomix.com/api",
    "x-support": "h3netprotocol@googlegroups.com",
    "x-schema-version": "1.0.0",
    "x-api-version": "v1",
    "x-case-convention": {
      "parameters": "camelCase",
      "enums": "SCREAMING_SNAKE_CASE",
      "endpoints": "kebab-case"
    },
    "x-rate-limiting": {
      "tiers": {
        "basic": "1000 requests/hour",
        "premium": "10000 requests/hour"
      }
    },
    "x-idempotency-guidelines": {
      "description": "Guidelines for idempotent operations",
      "version": "1.0",
      "requirements": [
        "All mutation operations (POST/PUT/DELETE) require an Idempotency-Key header",
        "Idempotency keys must be UUIDs and are valid for 24 hours",
        "Client timestamp required for all requests",
        "Duplicate requests within TTL return the original response",
        "Clients should implement exponential backoff for retries"
      ],
      "retryGuidelines": {
        "description": "Recommended retry strategy",
        "strategy": [
          "Use exponential backoff starting at 1 second",
          "Maximum of 3 retry attempts",
          "Maximum delay of 5 seconds between attempts",
          "Only retry on 408, 429, 500, 502, 503, 504 status codes"
        ]
      }
    },
    "x-protocols": {
      "definitions": {
        "standard": {
          "type": "string",
          "enum": [
            "http",
            "https",
            "http3-webtransport"
          ],
          "default": "http",
          "description": "Protocols supported by this endpoint. Use HTTP/HTTPS for standard REST clients, HTTP/3 with WebTransport for bidirectional streaming."
        },
        "http-only": {
          "type": "string",
          "enum": [
            "http",
            "https"
          ],
          "default": "http",
          "description": "Endpoint supports only HTTP/HTTPS protocols."
        },
        "http3-webtransport-only": {
          "type": "string",
          "enum": [
            "http3-webtransport"
          ],
          "default": "http3-webtransport",
          "description": "Endpoint requires HTTP/3 with WebTransport protocol."
        }
      },
      "http": {
        "description": "Standard HTTP/HTTPS endpoints",
        "ports": {
          "http": 80,
          "https": 443,
          "development": 9001
        },
        "usage": "Standard request-response pattern",
        "example": "curl -k https://localhost:9001/hello -H \"Content-Type: application/json\" -d '{...}'"
      },
      "http3-webtransport": {
        "description": "HTTP/3 with WebTransport protocol support",
        "ports": {
          "development": 9000
        },
        "usage": "Bidirectional streaming for real-time updates",
        "requirements": [
          "HTTP/3 support",
          "HTTP/3 with WebTransport protocol support",
          "QUIC transport layer"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://h3net.switchnomix.com/api",
      "description": "H3Net Protocol API Reference"
    },
    {
      "url": "https://api.h3net.switchnomix.com/v1",
      "description": "H3Net Protocol Production server"
    },
    {
      "url": "https://staging-api.h3net.switchnomix.com/v1",
      "description": "H3Net Protocol Staging server"
    }
  ],
  "security": [],
  "tags": [
    {
      "name": "core",
      "description": "Core APIs",
      "x-protocol": {
        "$ref": "#/info/x-protocols/definitions/standard"
      }
    },
    {
      "name": "config",
      "description": "Configuration Management APIs",
      "x-protocol": {
        "$ref": "#/info/x-protocols/definitions/standard"
      }
    },
    {
      "name": "pipeline",
      "description": "Pipeline Management APIs",
      "x-protocol": {
        "$ref": "#/info/x-protocols/definitions/standard"
      }
    },
    {
      "name": "discovery",
      "description": "Discovery Management APIs",
      "x-protocol": {
        "$ref": "#/info/x-protocols/definitions/standard"
      }
    },
    {
      "name": "telemetry",
      "description": "Telemetry Management APIs",
      "x-protocol": {
        "$ref": "#/info/x-protocols/definitions/standard"
      }
    },
    {
      "name": "operations",
      "description": "Operations Management APIs",
      "x-protocol": {
        "$ref": "#/info/x-protocols/definitions/standard"
      }
    },
    {
      "name": "security",
      "description": "Security Management APIs",
      "x-protocol": {
        "$ref": "#/info/x-protocols/definitions/standard"
      }
    }
  ],
  "externalDocs": {
    "description": "H3Net Protocol API Reference in Redocly format",
    "url": "/api/H3Net_Protocol_API.html"
  },
  "paths": {
    "/hello": {
      "post": {
        "summary": "Send hello message to establish connection",
        "operationId": "core.sendHello",
        "tags": [
          "core"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HelloMessage"
              },
              "example": {
                "type": "HELLO",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0.0",
                "device": {
                  "deviceId": "switch-01",
                  "hostname": "switch-01.local",
                  "managementIp": "192.168.1.1",
                  "macAddress": "00:1A:2B:3C:4D:5E",
                  "deviceRoles": [
                    "Switch"
                  ]
                },
                "message": "Hello from switch-01"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hello acknowledged. Server responds with HELLO_RESPONSE and may send a CAPABILITY_REQUEST",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelloResponse"
                },
                "example": {
                  "type": "HELLO_RESPONSE",
                  "timestamp": "2024-01-01T00:00:01Z",
                  "schemaVersion": "1.0.0",
                  "status": "success",
                  "message": "Connection established successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-h3net-webtransport": {
          "enabled": true,
          "actions": [
            {
              "on": "HELLO_RESPONSE",
              "send": "CAPABILITY_REQUEST"
            }
          ]
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Check system health",
        "operationId": "core.checkHealth",
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "description": "System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatusMessage"
                },
                "example": {
                  "type": "HEALTH_STATUS",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "schemaVersion": "1.0.0",
                  "status": {
                    "type": "STATUS",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "state": "healthy"
                  },
                  "uptime": "P1DT2H",
                  "lastChecked": "2024-01-01T00:00:00Z",
                  "components": {
                    "database": "healthy",
                    "api": "healthy",
                    "telemetry": "healthy"
                  },
                  "metrics": {
                    "activeConnections": 100,
                    "cpuUsage": 20.5,
                    "memoryUsage": 45.3
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Health information not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - System is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "post": {
        "summary": "Send event notification",
        "operationId": "events.sendEventNotification",
        "tags": [
          "events"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventNotificationMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/discovery/capabilities": {
      "get": {
        "summary": "Get device capabilities",
        "operationId": "getDeviceCapabilities",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the device to query"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CAPABILITY_REQUEST"
              ]
            },
            "description": "Message type, must be CAPABILITY_REQUEST"
          },
          {
            "name": "detail",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "basic",
                "detailed",
                "full"
              ],
              "default": "basic"
            },
            "description": "Level of detail in capability response"
          },
          {
            "name": "requestedCapabilities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "explode": true,
            "style": "form",
            "description": "Specific capabilities to query, from CapabilityRequestMessage schema"
          }
        ],
        "responses": {
          "200": {
            "description": "Device capabilities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilityQueryResponse"
                },
                "example": {
                  "type": "CAPABILITY_QUERY_RESPONSE",
                  "timestamp": "2024-01-01T00:00:01Z",
                  "schemaVersion": "1.0",
                  "status": "success",
                  "device": {
                    "deviceId": "switch-01",
                    "hostname": "core-switch-01",
                    "deviceRoles": [
                      "Switch"
                    ]
                  },
                  "capabilities": {
                    "routingSupport": true,
                    "firewallSupport": false,
                    "vpnSupport": false,
                    "loadBalancing": false,
                    "qosSupport": true,
                    "ipv6Support": true,
                    "mplsSupport": false,
                    "sflowSupport": true,
                    "netflowSupport": false,
                    "features": {
                      "stacking": true,
                      "portChannels": true
                    },
                    "supportedProtocols": [
                      "lldp",
                      "stp",
                      "lacp"
                    ],
                    "hardwareCapabilities": {
                      "tcamSize": 8192,
                      "bufferSize": 32768,
                      "forwardingCapacity": "400Gbps"
                    }
                  },
                  "interfaces": [
                    {
                      "name": "eth0",
                      "type": "ethernet",
                      "speed": "1Gbps",
                      "enabled": true
                    }
                  ],
                  "supportedTables": [
                    "acl",
                    "mac",
                    "route"
                  ],
                  "constraints": {
                    "maxFlowEntries": 10000,
                    "maxTables": 8,
                    "maxVlans": 4094
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No capabilities found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Query specific device capabilities",
        "operationId": "queryDeviceCapabilities",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CapabilityRequestMessage"
              },
              "example": {
                "type": "CAPABILITY_REQUEST",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0",
                "detail": "detailed",
                "requestedCapabilities": [
                  "routingSupport",
                  "firewallSupport",
                  "vpnSupport"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Capabilities query processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilityQueryResponse"
                },
                "example": {
                  "type": "CAPABILITY_QUERY_RESPONSE",
                  "timestamp": "2024-01-01T00:00:01Z",
                  "schemaVersion": "1.0",
                  "status": "success",
                  "device": {
                    "deviceId": "router-01",
                    "hostname": "edge-router-01",
                    "deviceRoles": [
                      "Router"
                    ]
                  },
                  "capabilities": {
                    "routingSupport": true,
                    "firewallSupport": true,
                    "vpnSupport": true,
                    "loadBalancing": false,
                    "qosSupport": true,
                    "ipv6Support": true,
                    "mplsSupport": true,
                    "sflowSupport": false,
                    "netflowSupport": true,
                    "features": {
                      "bgp": true,
                      "ospf": true,
                      "nat": true
                    },
                    "supportedProtocols": [
                      "bgp",
                      "ospf",
                      "rip",
                      "eigrp"
                    ],
                    "hardwareCapabilities": {
                      "tcamSize": 16384,
                      "bufferSize": 65536,
                      "forwardingCapacity": "100Gbps"
                    }
                  },
                  "interfaces": [
                    {
                      "name": "eth0",
                      "type": "ethernet",
                      "speed": "10Gbps",
                      "enabled": true
                    }
                  ],
                  "supportedTables": [
                    "route",
                    "nat",
                    "policy"
                  ],
                  "constraints": {
                    "maxFlowEntries": 20000,
                    "maxTables": 16,
                    "maxVlans": 4094
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Capability not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/capabilities/bulk": {
      "post": {
        "summary": "Query capabilities for multiple devices",
        "description": "Query capabilities for multiple devices in a single request. This endpoint allows efficient retrieval of capability information for a batch of devices.",
        "operationId": "queryBulkCapabilities",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of device IDs"
                  },
                  "query": {
                    "$ref": "#/components/schemas/CapabilityRequestMessage"
                  }
                },
                "required": [
                  "devices",
                  "query"
                ]
              },
              "example": {
                "devices": [
                  "switch-01",
                  "switch-02",
                  "router-01"
                ],
                "query": {
                  "type": "CAPABILITY_REQUEST",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "schemaVersion": "1.0",
                  "detail": "detailed",
                  "requestedCapabilities": [
                    "routingSupport",
                    "firewallSupport"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk capability query response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/CapabilityQueryResponse"
                      }
                    }
                  }
                },
                "example": {
                  "results": {
                    "switch-01": {
                      "type": "CAPABILITY_QUERY_RESPONSE",
                      "timestamp": "2024-01-01T00:00:01Z",
                      "schemaVersion": "1.0",
                      "status": "success",
                      "device": {
                        "deviceId": "switch-01",
                        "hostname": "core-switch-01",
                        "deviceRoles": [
                          "Switch"
                        ]
                      },
                      "capabilities": {
                        "routingSupport": true,
                        "firewallSupport": false
                      },
                      "interfaces": [
                        {
                          "name": "eth0",
                          "type": "ethernet",
                          "speed": "1Gbps",
                          "enabled": true
                        }
                      ]
                    },
                    "switch-02": {
                      "type": "CAPABILITY_QUERY_RESPONSE",
                      "timestamp": "2024-01-01T00:00:01Z",
                      "schemaVersion": "1.0",
                      "status": "success",
                      "device": {
                        "deviceId": "switch-02",
                        "hostname": "access-switch-01",
                        "deviceRoles": [
                          "Switch"
                        ]
                      },
                      "capabilities": {
                        "routingSupport": false,
                        "firewallSupport": false
                      },
                      "interfaces": [
                        {
                          "name": "eth0",
                          "type": "ethernet",
                          "speed": "1Gbps",
                          "enabled": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/network": {
      "get": {
        "summary": "Get network discovery status",
        "operationId": "getNetworkDiscoveryStatus",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current network discovery status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDiscoveryResponseMessage"
                },
                "example": {
                  "type": "NETWORK_DISCOVERY_RESPONSE",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "schemaVersion": "1.0",
                  "discoveryType": "lldp",
                  "discoveredDevices": [
                    {
                      "device": {
                        "deviceId": "switch-02",
                        "hostname": "access-switch-01",
                        "deviceRoles": [
                          "Switch"
                        ]
                      },
                      "discoveryProtocol": "lldp",
                      "distance": 1,
                      "lastSeen": "2024-01-01T00:00:00Z",
                      "confidence": 1,
                      "connectionDetails": {
                        "localPort": "eth1",
                        "remotePort": "eth0",
                        "linkType": "ethernet",
                        "localAddress": "192.168.1.1",
                        "remoteAddress": "192.168.1.2"
                      }
                    }
                  ],
                  "topology": {
                    "links": [
                      {
                        "source": "192.168.1.1",
                        "target": "192.168.1.2",
                        "type": "ethernet"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No discovery information found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Perform Network Discovery",
        "description": "Initiates network discovery process to identify network topology and connected devices",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "performNetworkDiscovery",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "description": "Network discovery parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkDiscoveryMessage"
              },
              "example": {
                "type": "NETWORK_DISCOVERY",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0",
                "discoveryType": "lldp",
                "startPoints": [
                  "192.168.1.1"
                ],
                "subnets": [
                  {
                    "address": "192.168.1.0",
                    "prefixLength": 24
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Network discovery completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDiscoveryResponseMessage"
                },
                "example": {
                  "type": "NETWORK_DISCOVERY_RESPONSE",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "schemaVersion": "1.0",
                  "discoveryType": "lldp",
                  "discoveredDevices": [
                    {
                      "device": {
                        "deviceId": "switch-02",
                        "hostname": "access-switch-01",
                        "deviceRoles": [
                          "Switch"
                        ]
                      },
                      "discoveryProtocol": "lldp",
                      "distance": 1,
                      "lastSeen": "2024-01-01T00:00:00Z",
                      "confidence": 1,
                      "connectionDetails": {
                        "localPort": "eth1",
                        "remotePort": "eth0",
                        "linkType": "ethernet",
                        "localAddress": "192.168.1.1",
                        "remoteAddress": "192.168.1.2"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid discovery parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                },
                "example": {
                  "type": "ERROR",
                  "timestamp": "2024-01-01T00:00:03Z",
                  "schemaVersion": "1.0",
                  "status": "error",
                  "error": {
                    "code": 400,
                    "message": "Invalid discovery parameters"
                  },
                  "errorCode": 400,
                  "errorMessage": "Invalid discovery parameters",
                  "context": "Network discovery validation",
                  "causes": [
                    "Invalid subnet range specified"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Idempotency key conflict - request already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/network/options": {
      "get": {
        "summary": "Get network discovery options",
        "operationId": "getNetworkDiscoveryOptions",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Network discovery options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDiscoveryOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No discovery options found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update discovery options",
        "operationId": "updateNetworkDiscoveryOptions",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkDiscoveryOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discovery options updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDiscoveryOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid discovery options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Discovery options not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/network/neighbors/{deviceId}": {
      "get": {
        "summary": "Get device neighbors",
        "operationId": "getDeviceNeighbors",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "lldp",
                "cdp",
                "fdb",
                "bgp_neighbors"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device neighbors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscoveredNeighbor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid deviceId or protocol parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device not found or no neighbors discovered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/network/topology": {
      "get": {
        "summary": "Get network topology",
        "operationId": "getNetworkTopology",
        "tags": [
          "discovery"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Topology discovery depth"
          },
          {
            "name": "protocol",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "lldp",
                "cdp",
                "fdb",
                "bgp_neighbors"
              ]
            },
            "description": "Discovery protocol to use"
          }
        ],
        "responses": {
          "200": {
            "description": "Network topology retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkTopology"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No topology information found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/config/acls": {
      "get": {
        "summary": "Get all ACLs",
        "operationId": "getAllAcls",
        "tags": [
          "acl"
        ],
        "responses": {
          "200": {
            "description": "List of all ACLs retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ACL"
                  }
                },
                "example": [
                  {
                    "type": "extended",
                    "timestamp": "2024-03-15T10:30:00Z",
                    "schemaVersion": "1.0",
                    "aclName": "web-traffic-acl",
                    "description": "Web traffic filtering rules",
                    "rules": [
                      {
                        "ruleId": 10,
                        "description": "Allow HTTP traffic",
                        "matches": {
                          "ip_proto": 6,
                          "tcp_dst": 80,
                          "src_ip": {
                            "address": "192.168.1.0",
                            "prefixLength": 24
                          }
                        },
                        "actions": {
                          "allow": true
                        },
                        "enabled": true
                      },
                      {
                        "ruleId": 20,
                        "description": "Allow HTTPS traffic",
                        "matches": {
                          "ip_proto": 6,
                          "tcp_dst": 443,
                          "src_ip": {
                            "address": "192.168.1.0",
                            "prefixLength": 24
                          }
                        },
                        "actions": {
                          "allow": true
                        },
                        "enabled": true
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new ACL",
        "operationId": "createAcl",
        "tags": [
          "acl"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ACL"
                  }
                ]
              },
              "example": {
                "type": "extended",
                "requestId": "123e4567-e89b-12d3-a456-426614174000",
                "timestamp": "2024-03-15T11:00:00Z",
                "schemaVersion": "1.0",
                "aclName": "web-traffic-acl",
                "description": "New ACL for web traffic",
                "rules": [
                  {
                    "ruleId": 1,
                    "description": "Allow HTTPS traffic",
                    "matches": {
                      "eth_type": 2048,
                      "ip_proto": 6,
                      "dst_ip": {
                        "address": "0.0.0.0",
                        "prefixLength": 0
                      },
                      "tcp_dst": 443
                    },
                    "actions": {
                      "allow": true
                    },
                    "enabled": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ACL created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACL"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/acls/{aclId}": {
      "get": {
        "summary": "Get ACL configuration",
        "operationId": "getAclConfig",
        "tags": [
          "acl"
        ],
        "parameters": [
          {
            "name": "aclId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          }
        ],
        "responses": {
          "200": {
            "description": "ACL configuration retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACL"
                },
                "example": {
                  "aclId": 100,
                  "type": "extended",
                  "timestamp": "2024-03-15T10:30:00Z",
                  "schemaVersion": "1.0",
                  "aclName": "web-traffic-acl",
                  "description": "ACL for web traffic",
                  "rules": [
                    {
                      "ruleId": 1,
                      "description": "Allow HTTP traffic",
                      "matches": {
                        "eth_type": 2048,
                        "ip_proto": 6,
                        "dst_ip": {
                          "address": "0.0.0.0",
                          "prefixLength": 0
                        },
                        "tcp_dst": 80
                      },
                      "actions": {
                        "allow": true
                      },
                      "enabled": true
                    },
                    {
                      "ruleId": 2,
                      "description": "Allow HTTPS traffic",
                      "matches": {
                        "eth_type": 2048,
                        "ip_proto": 6,
                        "dst_ip": {
                          "address": "0.0.0.0",
                          "prefixLength": 0
                        },
                        "tcp_dst": 443
                      },
                      "actions": {
                        "allow": true
                      },
                      "enabled": true
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update ACL configuration",
        "operationId": "updateAclConfig",
        "tags": [
          "acl"
        ],
        "parameters": [
          {
            "name": "aclId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          },
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ACL"
                  }
                ]
              },
              "example": {
                "type": "extended",
                "requestId": "123e4567-e89b-12d3-a456-426614174000",
                "timestamp": "2024-03-15T11:00:00Z",
                "schemaVersion": "1.0",
                "aclName": "web-traffic-acl",
                "description": "Updated ACL for web traffic filtering",
                "rules": [
                  {
                    "ruleId": 1,
                    "description": "Allow HTTP traffic",
                    "matches": {
                      "eth_type": 2048,
                      "ip_proto": 6,
                      "dst_ip": {
                        "address": "0.0.0.0",
                        "prefixLength": 0
                      },
                      "tcp_dst": 80
                    },
                    "actions": {
                      "allow": true
                    },
                    "enabled": true
                  },
                  {
                    "ruleId": 2,
                    "description": "Allow HTTPS traffic",
                    "matches": {
                      "eth_type": 2048,
                      "ip_proto": 6,
                      "dst_ip": {
                        "address": "0.0.0.0",
                        "prefixLength": 0
                      },
                      "tcp_dst": 443
                    },
                    "actions": {
                      "allow": true
                    },
                    "enabled": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ACL configuration updated successfully."
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/acls/device/{deviceId}": {
      "get": {
        "summary": "Get all ACLs for a specific device",
        "operationId": "getDeviceAcls",
        "tags": [
          "acl"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          }
        ],
        "responses": {
          "200": {
            "description": "ACLs retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ACL"
                  }
                },
                "example": [
                  {
                    "type": "extended",
                    "timestamp": "2024-03-15T10:30:00Z",
                    "schemaVersion": "1.0",
                    "aclName": "web-traffic-acl",
                    "description": "Web traffic filtering rules",
                    "rules": [
                      {
                        "ruleId": 1,
                        "description": "Allow HTTP traffic",
                        "matches": {
                          "eth_type": 2048,
                          "ip_proto": 6,
                          "dst_ip": {
                            "address": "0.0.0.0",
                            "prefixLength": 0
                          },
                          "tcp_dst": 80
                        },
                        "actions": {
                          "allow": true
                        },
                        "enabled": true
                      },
                      {
                        "ruleId": 2,
                        "description": "Allow HTTPS traffic",
                        "matches": {
                          "eth_type": 2048,
                          "ip_proto": 6,
                          "dst_ip": {
                            "address": "0.0.0.0",
                            "prefixLength": 0
                          },
                          "tcp_dst": 443
                        },
                        "actions": {
                          "allow": true
                        },
                        "enabled": true
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Device not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "post": {
        "summary": "Create a new ACL for a specific device",
        "operationId": "createDeviceAcl",
        "tags": [
          "acl"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACL"
              },
              "example": {
                "type": "extended",
                "timestamp": "2024-03-15T11:00:00Z",
                "schemaVersion": "1.0",
                "deviceId": "switch-01",
                "aclName": "new-device-acl",
                "description": "Device-specific ACL",
                "rules": [
                  {
                    "ruleId": 40,
                    "description": "Allow management traffic",
                    "matches": {
                      "ip_proto": 6,
                      "tcp_dst": 22,
                      "src_ip": {
                        "address": "192.168.1.0",
                        "prefixLength": 24
                      }
                    },
                    "actions": {
                      "allow": true
                    },
                    "enabled": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ACL created successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Device not found."
          },
          "409": {
            "description": "Conflict - ACL with the same name already exists."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/acls/{deviceId}/{aclName}": {
      "get": {
        "summary": "Get specific ACL",
        "operationId": "getACL",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          },
          {
            "name": "aclName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          }
        ],
        "responses": {
          "200": {
            "description": "ACL details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACL"
                },
                "example": {
                  "type": "extended",
                  "timestamp": "2024-03-15T10:30:00Z",
                  "schemaVersion": "1.0",
                  "aclName": "web-traffic-acl",
                  "description": "ACL for web traffic filtering",
                  "aclType": "extended",
                  "rules": [
                    {
                      "ruleId": 10,
                      "description": "Allow HTTP traffic",
                      "matches": {
                        "ip_proto": 6,
                        "tcp_dst": 80,
                        "src_ip": {
                          "address": "192.168.1.0",
                          "prefixLength": 24
                        }
                      },
                      "actions": {
                        "allow": true,
                        "logging": {
                          "enabled": true,
                          "level": "info"
                        }
                      },
                      "enabled": true
                    },
                    {
                      "ruleId": 20,
                      "description": "Allow HTTPS traffic",
                      "matches": {
                        "ip_proto": 6,
                        "tcp_dst": 443,
                        "src_ip": {
                          "address": "192.168.1.0",
                          "prefixLength": 24
                        }
                      },
                      "actions": {
                        "allow": true,
                        "logging": {
                          "enabled": true,
                          "level": "info"
                        }
                      },
                      "enabled": true
                    }
                  ],
                  "statistics": {
                    "totalHits": 150,
                    "lastUpdated": "2024-03-15T10:30:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Create or update ACL",
        "operationId": "updateACL",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          },
          {
            "name": "aclName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACL"
              },
              "example": {
                "type": "extended",
                "timestamp": "2024-03-15T11:00:00Z",
                "schemaVersion": "1.0",
                "aclName": "web-traffic-acl",
                "description": "Web traffic filtering rules",
                "aclType": "extended",
                "rules": [
                  {
                    "ruleId": 1,
                    "description": "Allow HTTP traffic",
                    "matches": {
                      "ip_proto": 6,
                      "tcp_dst": 80,
                      "src_ip": {
                        "address": "192.168.1.0",
                        "prefixLength": 24
                      }
                    },
                    "actions": {
                      "allow": true,
                      "logging": {
                        "enabled": true,
                        "level": "info"
                      }
                    },
                    "enabled": true
                  },
                  {
                    "ruleId": 2,
                    "description": "Allow HTTPS traffic",
                    "matches": {
                      "ip_proto": 6,
                      "tcp_dst": 443,
                      "src_ip": {
                        "address": "192.168.1.0",
                        "prefixLength": 24
                      }
                    },
                    "actions": {
                      "allow": true,
                      "logging": {
                        "enabled": true,
                        "level": "info"
                      }
                    },
                    "enabled": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ACL updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACL"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete ACL",
        "operationId": "deleteACL",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          },
          {
            "name": "aclName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          }
        ],
        "responses": {
          "204": {
            "description": "ACL deleted successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/acls/{deviceId}/{aclName}/rules": {
      "post": {
        "summary": "Add rule to ACL",
        "operationId": "addACLRule",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          },
          {
            "name": "aclName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLRule"
              },
              "example": {
                "ruleId": 30,
                "description": "Allow HTTPS traffic",
                "matches": {
                  "ip_proto": 6,
                  "tcp_dst": 443,
                  "src_ip": {
                    "address": "192.168.1.0",
                    "prefixLength": 24
                  }
                },
                "actions": {
                  "allow": true,
                  "logging": {
                    "enabled": true,
                    "level": "info"
                  }
                },
                "enabled": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rule added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLRule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/acls/{deviceId}/{aclName}/rules/{ruleId}": {
      "put": {
        "summary": "Update ACL rule",
        "operationId": "updateACLRule",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          },
          {
            "name": "aclName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLRule"
              },
              "example": {
                "ruleId": 1,
                "description": "Updated HTTP traffic rule",
                "matches": {
                  "ip_proto": 6,
                  "tcp_dst": 80
                },
                "actions": {
                  "allow": true,
                  "logging": {
                    "enabled": true,
                    "level": "debug"
                  }
                },
                "enabled": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLRule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete ACL rule",
        "operationId": "deleteACLRule",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          },
          {
            "name": "aclName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "web-traffic-acl"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Rule deleted successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/devices": {
      "get": {
        "summary": "Get all device configurations",
        "operationId": "getAllDeviceConfigs",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of device configurations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Device"
                  }
                },
                "example": [
                  {
                    "deviceId": "switch-01",
                    "deviceRoles": [
                      "Switch"
                    ],
                    "managementIp": "192.168.1.10",
                    "hostname": "core-switch-01",
                    "macAddress": "00:11:22:33:44:55"
                  },
                  {
                    "deviceId": "router-01",
                    "deviceRoles": [
                      "Router"
                    ],
                    "managementIp": "2001:db8::1",
                    "hostname": "edge-router-01"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - No devices found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "post": {
        "summary": "Create or update device configuration",
        "description": "Create a new device or update an existing device configuration",
        "operationId": "createOrUpdateDevice",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "config": {
                        "$ref": "#/components/schemas/DeviceConfigUpdateMessage"
                      }
                    },
                    "required": [
                      "config"
                    ]
                  }
                ]
              },
              "example": {
                "type": "DEVICE_CONFIG_UPDATE",
                "timestamp": "2024-03-15T11:00:00Z",
                "requestId": "123e4567-e89b-12d3-a456-426614174003",
                "config": {
                  "type": "DEVICE_CONFIG_UPDATE",
                  "timestamp": "2024-03-15T11:00:00Z",
                  "schemaVersion": "1.0",
                  "device": {
                    "deviceId": "switch-02",
                    "deviceRoles": [
                      "Switch"
                    ]
                  },
                  "config": {
                    "deviceSettings": {
                      "type": "DEVICE_SETTINGS_UPDATE",
                      "timestamp": "2024-03-15T11:00:00Z",
                      "deviceId": "switch-02",
                      "hostname": "access-switch-02",
                      "managementIp": "192.168.1.12",
                      "snmpCommunity": "public",
                      "ntpServers": [
                        "192.168.1.1",
                        "ntp.example.com"
                      ],
                      "syslogServers": [
                        "syslog.example.com"
                      ],
                      "dnsSettings": {
                        "servers": [
                          "8.8.8.8",
                          "8.8.4.4"
                        ],
                        "domain": "example.com",
                        "searchDomains": [
                          "example.com",
                          "corp.example.com"
                        ]
                      }
                    }
                  },
                  "applyImmediately": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device configuration updated successfully"
          },
          "201": {
            "description": "Device created successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/devices/info/bulk": {
      "post": {
        "summary": "Request information for multiple devices",
        "operationId": "requestBulkDeviceInfo",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "DEVICE_INFO_REQUEST"
                    ],
                    "description": "Must be DEVICE_INFO_REQUEST"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Request timestamp"
                  },
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of device IDs"
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "Schema version"
                  }
                },
                "required": [
                  "type",
                  "devices"
                ]
              },
              "example": {
                "type": "DEVICE_INFO_REQUEST",
                "timestamp": "2024-01-01T00:00:00Z",
                "devices": [
                  "switch-01",
                  "switch-02"
                ],
                "schemaVersion": "1.0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk device information response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/DeviceInfoResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/devices/{deviceId}": {
      "get": {
        "summary": "Get device configuration",
        "operationId": "getDeviceConfig",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSettings"
                },
                "example": {
                  "type": "DEVICE_SETTINGS_UPDATE",
                  "timestamp": "2024-03-15T11:00:00Z",
                  "deviceId": "switch-01",
                  "hostname": "core-switch-01",
                  "managementIp": "2001:db8::10",
                  "snmpCommunity": "public",
                  "ntpServers": [
                    "192.168.1.1",
                    "ntp.example.com"
                  ],
                  "syslogServers": [
                    "syslog.example.com"
                  ],
                  "dnsSettings": {
                    "servers": [
                      "8.8.8.8",
                      "8.8.4.4"
                    ],
                    "domain": "example.com",
                    "searchDomains": [
                      "example.com",
                      "corp.example.com"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Device not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "put": {
        "summary": "Update device configuration",
        "operationId": "updateDeviceConfig",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigUpdateMessage"
              },
              "example": {
                "type": "DEVICE_CONFIG_UPDATE",
                "timestamp": "2024-03-15T11:00:00Z",
                "schemaVersion": "1.0",
                "device": {
                  "deviceId": "switch-01",
                  "deviceRoles": [
                    "Switch"
                  ]
                },
                "config": {
                  "deviceSettings": {
                    "type": "DEVICE_SETTINGS_UPDATE",
                    "timestamp": "2024-03-15T11:00:00Z",
                    "deviceId": "switch-01",
                    "hostname": "core-switch-01-updated",
                    "managementIp": "2001:db8::10",
                    "snmpCommunity": "public",
                    "ntpServers": [
                      "192.168.1.1",
                      "ntp.example.com"
                    ],
                    "syslogServers": [
                      "syslog.example.com"
                    ],
                    "dnsSettings": {
                      "servers": [
                        "8.8.8.8",
                        "8.8.4.4"
                      ],
                      "domain": "example.com",
                      "searchDomains": [
                        "example.com",
                        "corp.example.com"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Device not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/devices/{deviceId}/info": {
      "get": {
        "summary": "Get device information",
        "description": "Query device information using DeviceInfoRequest parameters. The type parameter must be DEVICE_INFO_REQUEST to match the DeviceInfoRequest component schema.",
        "operationId": "getDeviceInfo",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the device to query (from DeviceInfoRequest)"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEVICE_INFO_REQUEST"
              ]
            },
            "description": "Message type, must be DEVICE_INFO_REQUEST (from DeviceInfoRequest)"
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Request timestamp (from BaseMessage)"
          }
        ],
        "responses": {
          "200": {
            "description": "Device information response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "404": {
            "description": "Not Found - Device not found."
          }
        }
      },
      "post": {
        "summary": "Request device information",
        "operationId": "requestDeviceInfo",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceInfoRequest"
              },
              "example": {
                "type": "DEVICE_INFO_REQUEST",
                "timestamp": "2024-01-01T00:00:00Z",
                "deviceId": "switch-01",
                "schemaVersion": "1.0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device information response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInfoResponse"
                },
                "example": {
                  "type": "DEVICE_INFO_RESPONSE",
                  "timestamp": "2024-01-01T00:00:01Z",
                  "deviceId": "switch-01",
                  "schemaVersion": "1.0",
                  "settings": {
                    "type": "DEVICE_INFO_RESPONSE",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "deviceId": "switch-01",
                    "hostname": "core-switch-01"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "404": {
            "description": "Not Found - Device not found."
          }
        }
      }
    },
    "/config/devices/{deviceId}/interfaces": {
      "get": {
        "summary": "Get device interfaces configuration",
        "operationId": "getDeviceInterfaces",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device interfaces configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NetworkInterface"
                      },
                      {
                        "$ref": "#/components/schemas/IPConfig"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/devices/{deviceId}/interfaces/{interfaceId}": {
      "put": {
        "summary": "Update interface configuration",
        "operationId": "updateInterfaceConfig",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interfaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  },
                  {
                    "$ref": "#/components/schemas/IPConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Interface configuration updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/devices/{deviceId}/system": {
      "get": {
        "summary": "Get system settings",
        "operationId": "getSystemSettings",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hostname": {
                      "type": "string"
                    },
                    "dnsSettings": {
                      "$ref": "#/components/schemas/dnsSettings"
                    },
                    "ntpServers": {
                      "$ref": "#/components/schemas/ntpServers"
                    },
                    "syslogServers": {
                      "$ref": "#/components/schemas/syslogServers"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update system settings",
        "operationId": "updateSystemSettings",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "type": "string"
                  },
                  "dnsSettings": {
                    "$ref": "#/components/schemas/dnsSettings"
                  },
                  "ntpServers": {
                    "$ref": "#/components/schemas/ntpServers"
                  },
                  "syslogServers": {
                    "$ref": "#/components/schemas/syslogServers"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System settings updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/switch": {
      "get": {
        "summary": "Get Switch Configuration",
        "description": "Retrieves the configuration of a network switch including features, ports, and capabilities",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "operationId": "getSwitchConfig",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "ID of the switch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Switch configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchDeviceConfig"
                },
                "example": {
                  "deviceId": "switch-01",
                  "deviceModel": "SN-8800-48P",
                  "firmwareVersion": "1.2.3",
                  "datapathId": "00:00:00:00:00:00:00:01",
                  "deviceRoles": [
                    "Switch"
                  ],
                  "numTables": 4,
                  "numPorts": 48,
                  "networkInterfaces": [
                    {
                      "name": "eth0",
                      "description": "Uplink to Core",
                      "enabled": true,
                      "speed": "10Gbps",
                      "type": "ethernet",
                      "mtu": 9000
                    }
                  ],
                  "ports": [
                    {
                      "portId": 1,
                      "name": "eth1",
                      "type": "ethernet",
                      "enabled": true,
                      "speed": "10Gbps",
                      "adminState": "enabled",
                      "operState": "up",
                      "nativeVlan": 1,
                      "maxLearnedMacs": 1000,
                      "stormControl": {
                        "broadcast": 80,
                        "multicast": 80,
                        "unicast": 90
                      }
                    }
                  ],
                  "features": {
                    "stacking": {
                      "enabled": true,
                      "role": "master",
                      "priority": 100
                    },
                    "portChannels": {
                      "maxGroups": 24,
                      "supportedProtocols": [
                        "lacp",
                        "static"
                      ]
                    },
                    "spanningTree": {
                      "enabled": true,
                      "mode": "rstp"
                    }
                  },
                  "deviceConfig": {
                    "hostname": "edge-switch-01",
                    "managementIp": "192.168.1.10",
                    "deviceMode": "STANDALONE",
                    "systemSettings": {
                      "timezone": "UTC",
                      "ntpServers": [
                        "pool.ntp.org"
                      ],
                      "loggingLevel": "INFO"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "404": {
            "description": "Not Found - Device not found."
          }
        }
      },
      "post": {
        "summary": "Update Switch Configuration",
        "description": "Updates the configuration of a network switch",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "operationId": "updateSwitchConfig",
        "requestBody": {
          "description": "Switch configuration update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchDeviceConfig"
              },
              "example": {
                "deviceId": "switch-02",
                "datapathId": "00:00:00:00:00:00:00:02",
                "deviceRoles": [
                  "Switch"
                ],
                "numTables": 4,
                "numPorts": 24,
                "ports": [
                  {
                    "portId": 1,
                    "name": "eth1",
                    "type": "ethernet",
                    "enabled": true,
                    "speed": "1Gbps",
                    "adminState": "enabled",
                    "operState": "up",
                    "nativeVlan": 1,
                    "maxLearnedMacs": 1000,
                    "portSecurity": {
                      "enabled": true,
                      "maxMacAddresses": 10,
                      "violationAction": "protect"
                    }
                  }
                ],
                "features": {
                  "stacking": {
                    "enabled": false
                  },
                  "portChannels": {
                    "maxGroups": 8,
                    "supportedProtocols": [
                      "lacp"
                    ]
                  },
                  "spanningTree": {
                    "enabled": true,
                    "mode": "rstp"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Switch configuration updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "409": {
            "description": "Conflict - Business rule conflict."
          }
        }
      }
    },
    "/config/switches": {
      "get": {
        "summary": "Get all switches",
        "operationId": "getAllSwitches",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all switches retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SwitchDeviceConfig"
                  }
                },
                "example": [
                  {
                    "deviceId": "switch-01",
                    "deviceRoles": [
                      "Switch"
                    ],
                    "datapathId": "00:00:00:00:00:00:00:01",
                    "numTables": 4,
                    "numPorts": 48,
                    "ports": [
                      {
                        "portId": 1,
                        "name": "eth1",
                        "type": "ethernet",
                        "speed": "10Gbps",
                        "enabled": true,
                        "adminState": "enabled"
                      }
                    ]
                  },
                  {
                    "deviceId": "switch-02",
                    "deviceRoles": [
                      "Switch"
                    ],
                    "datapathId": "00:00:00:00:00:00:00:02",
                    "numTables": 4,
                    "numPorts": 24,
                    "ports": [
                      {
                        "portId": 1,
                        "name": "eth1",
                        "type": "ethernet",
                        "speed": "1Gbps",
                        "enabled": true,
                        "adminState": "enabled"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - No switches found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/switches/{deviceId}": {
      "get": {
        "summary": "Get switch configuration",
        "operationId": "getSwitchConfigById",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Switch configuration retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchDeviceConfig"
                },
                "example": {
                  "deviceId": "switch-01",
                  "datapathId": "00:00:00:00:00:00:00:01",
                  "deviceRoles": [
                    "Switch"
                  ],
                  "numTables": 4,
                  "numPorts": 48,
                  "ports": [
                    {
                      "portId": 1,
                      "name": "eth1",
                      "type": "ethernet",
                      "enabled": true,
                      "speed": "10Gbps",
                      "adminState": "enabled",
                      "operState": "up",
                      "nativeVlan": 1,
                      "maxLearnedMacs": 1000,
                      "stormControl": {
                        "broadcast": 80,
                        "multicast": 80,
                        "unicast": 90
                      }
                    }
                  ],
                  "features": {
                    "stacking": {
                      "enabled": true,
                      "role": "master",
                      "priority": 100
                    },
                    "portChannels": {
                      "maxGroups": 24,
                      "supportedProtocols": [
                        "lacp",
                        "static"
                      ]
                    },
                    "spanningTree": {
                      "enabled": true,
                      "mode": "rstp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Switch not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "put": {
        "summary": "Update switch configuration",
        "operationId": "updateSwitchConfigById",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchDeviceConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Switch configuration updated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Switch not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/switches/{deviceId}/features": {
      "get": {
        "summary": "Get switch features",
        "operationId": "getSwitchFeatures",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Switch features retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchFeatures"
                },
                "example": {
                  "stacking": {
                    "enabled": true,
                    "role": "master",
                    "priority": 100
                  },
                  "portChannels": {
                    "maxGroups": 24,
                    "supportedProtocols": [
                      "lacp",
                      "static"
                    ]
                  },
                  "spanningTree": {
                    "enabled": true,
                    "mode": "rstp"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Switch not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "put": {
        "summary": "Update switch features",
        "operationId": "updateSwitchFeatures",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchFeatures"
              },
              "example": {
                "stacking": {
                  "enabled": true,
                  "role": "backup",
                  "priority": 90
                },
                "portChannels": {
                  "maxGroups": 24,
                  "supportedProtocols": [
                    "lacp",
                    "pagp",
                    "static"
                  ]
                },
                "spanningTree": {
                  "enabled": true,
                  "mode": "mstp"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Switch features updated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Switch not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/switches/{deviceId}/ports": {
      "get": {
        "summary": "Get all port configurations",
        "operationId": "getAllPorts",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of port configurations retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortConfig"
                  }
                },
                "example": [
                  {
                    "portId": 1,
                    "name": "eth1",
                    "type": "ethernet",
                    "enabled": true,
                    "speed": "10Gbps",
                    "adminState": "enabled",
                    "operState": "up",
                    "nativeVlan": 1,
                    "maxLearnedMacs": 1000,
                    "stormControl": {
                      "broadcast": 80,
                      "multicast": 80,
                      "unicast": 90
                    }
                  },
                  {
                    "portId": 2,
                    "name": "eth2",
                    "type": "ethernet",
                    "enabled": true,
                    "speed": "10Gbps",
                    "adminState": "enabled",
                    "operState": "up",
                    "nativeVlan": 1,
                    "maxLearnedMacs": 1000
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - No ports found for the switch."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/switches/{deviceId}/ports/{portId}": {
      "get": {
        "summary": "Get port configuration",
        "operationId": "getPortConfig",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Port configuration retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortConfig"
                },
                "example": {
                  "portId": 1,
                  "name": "eth1",
                  "type": "ethernet",
                  "enabled": true,
                  "speed": "10Gbps",
                  "adminState": "enabled",
                  "operState": "up",
                  "nativeVlan": 1,
                  "maxLearnedMacs": 1000,
                  "stormControl": {
                    "broadcast": 80,
                    "multicast": 80,
                    "unicast": 90
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid port ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Port not found for the switch."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "put": {
        "summary": "Update port configuration",
        "operationId": "updatePortConfig",
        "tags": [
          "switch"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortConfig"
              },
              "example": {
                "portId": 1,
                "name": "eth1",
                "type": "ethernet",
                "enabled": true,
                "speed": "10Gbps",
                "adminState": "enabled",
                "nativeVlan": 10,
                "maxLearnedMacs": 2000,
                "stormControl": {
                  "broadcast": 70,
                  "multicast": 70,
                  "unicast": 80
                },
                "portSecurity": {
                  "enabled": true,
                  "maxMacAddresses": 5,
                  "violationAction": "restrict"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Port configuration updated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Port not found for the switch."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/vlan": {
      "get": {
        "summary": "Get VLAN Configuration",
        "description": "Retrieve VLAN configuration details",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "operationId": "getVlanConfig",
        "parameters": [
          {
            "name": "vlanId",
            "in": "query",
            "description": "VLAN identifier",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VLAN configuration details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VLAN"
                },
                "example": {
                  "vlanId": 100,
                  "name": "user-vlan",
                  "description": "VLAN for user traffic",
                  "status": "active",
                  "ports": {
                    "untagged": [
                      {
                        "name": "eth1",
                        "type": "ethernet",
                        "speed": "10Gbps",
                        "enabled": true
                      }
                    ],
                    "tagged": [
                      {
                        "name": "eth2",
                        "type": "ethernet",
                        "speed": "10Gbps",
                        "enabled": true
                      }
                    ]
                  },
                  "properties": {
                    "mtu": 9000,
                    "igmpSnooping": true,
                    "dhcpSnooping": true,
                    "stormControl": {
                      "broadcast": 80,
                      "multicast": 80,
                      "unicast": 90
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create or Update VLAN Configuration",
        "description": "Create a new VLAN or update existing VLAN configuration",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "operationId": "createVlanConfig",
        "requestBody": {
          "description": "VLAN configuration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VLAN"
              },
              "example": {
                "vlanId": 200,
                "name": "guest-vlan",
                "description": "VLAN for guest access",
                "status": "active",
                "ports": {
                  "untagged": [
                    {
                      "name": "eth3",
                      "type": "ethernet",
                      "speed": "1Gbps",
                      "enabled": true
                    }
                  ],
                  "tagged": []
                },
                "properties": {
                  "mtu": 1500,
                  "igmpSnooping": false,
                  "dhcpSnooping": true,
                  "stormControl": {
                    "broadcast": 70,
                    "multicast": 70,
                    "unicast": 80
                  }
                },
                "security": {
                  "macLimiters": {
                    "maxMacAddresses": 100,
                    "violationAction": "protect"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "201": {
            "$ref": "#/components/responses/CreatedSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "409": {
            "$ref": "#/components/responses/BusinessRuleConflictResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update VLAN Configuration",
        "description": "Update existing VLAN configuration",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "operationId": "updateVlanConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/If-Match"
          }
        ],
        "requestBody": {
          "description": "VLAN configuration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VLAN"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "409": {
            "$ref": "#/components/responses/BusinessRuleConflictResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/vlans": {
      "get": {
        "summary": "Get all VLAN configurations",
        "operationId": "getAllVlanConfigs",
        "tags": [
          "vlan"
        ],
        "responses": {
          "200": {
            "description": "List of all VLAN configurations retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VLAN"
                  }
                },
                "example": [
                  {
                    "vlanId": 100,
                    "name": "user-vlan",
                    "description": "VLAN for user traffic",
                    "status": "active",
                    "ports": {
                      "untagged": [
                        {
                          "name": "eth1",
                          "type": "ethernet",
                          "speed": "10Gbps",
                          "enabled": true
                        }
                      ],
                      "tagged": [
                        {
                          "name": "eth2",
                          "type": "ethernet",
                          "speed": "10Gbps",
                          "enabled": true
                        }
                      ]
                    }
                  },
                  {
                    "vlanId": 200,
                    "name": "guest-vlan",
                    "description": "VLAN for guest access",
                    "status": "active",
                    "ports": {
                      "untagged": [
                        {
                          "name": "eth3",
                          "type": "ethernet",
                          "speed": "1Gbps",
                          "enabled": true
                        }
                      ],
                      "tagged": []
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - No VLAN configurations found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/vlans/{deviceId}": {
      "get": {
        "summary": "Get all VLANs for a device",
        "operationId": "getDeviceVLANs",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of VLANs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VLAN"
                  }
                },
                "example": [
                  {
                    "vlanId": 100,
                    "name": "user-vlan",
                    "description": "VLAN for user traffic",
                    "status": "active",
                    "ports": {
                      "untagged": [
                        {
                          "name": "eth1",
                          "type": "ethernet",
                          "speed": "10Gbps",
                          "enabled": true
                        }
                      ],
                      "tagged": [
                        {
                          "name": "eth2",
                          "type": "ethernet",
                          "speed": "10Gbps",
                          "enabled": false
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create new VLAN",
        "operationId": "createVLAN",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VLAN"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VLAN created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VLAN"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "409": {
            "$ref": "#/components/responses/BusinessRuleConflictResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/vlans/{deviceId}/{vlanId}": {
      "get": {
        "summary": "Get VLAN details",
        "operationId": "getVLAN",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VLAN details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VLAN"
                },
                "example": {
                  "vlanId": 100,
                  "name": "user-vlan",
                  "description": "VLAN for user traffic",
                  "status": "active",
                  "ports": {
                    "untagged": [
                      {
                        "name": "eth1",
                        "type": "ethernet",
                        "speed": "10Gbps",
                        "enabled": true
                      }
                    ],
                    "tagged": [
                      {
                        "name": "eth2",
                        "type": "ethernet",
                        "speed": "10Gbps",
                        "enabled": false
                      }
                    ]
                  },
                  "properties": {
                    "mtu": 9000,
                    "igmpSnooping": true,
                    "dhcpSnooping": true
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update VLAN configuration",
        "operationId": "updateVLAN",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VLAN"
              },
              "example": {
                "vlanId": 100,
                "name": "user-vlan-updated",
                "description": "Updated VLAN for user traffic",
                "status": "active",
                "ports": {
                  "untagged": [
                    {
                      "name": "eth1",
                      "type": "ethernet",
                      "speed": "10Gbps",
                      "enabled": true
                    },
                    {
                      "name": "eth3",
                      "type": "ethernet",
                      "speed": "10Gbps",
                      "enabled": true
                    }
                  ],
                  "tagged": [
                    {
                      "name": "eth2",
                      "type": "ethernet",
                      "speed": "10Gbps",
                      "enabled": false
                    }
                  ]
                },
                "properties": {
                  "mtu": 9000,
                  "igmpSnooping": true,
                  "dhcpSnooping": true,
                  "stormControl": {
                    "broadcast": 60,
                    "multicast": 60,
                    "unicast": 70
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "VLAN updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "409": {
            "$ref": "#/components/responses/BusinessRuleConflictResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete VLAN",
        "operationId": "deleteVLAN",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          }
        ],
        "responses": {
          "204": {
            "description": "VLAN deleted successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/vlans/{deviceId}/{vlanId}/ports": {
      "put": {
        "summary": "Update VLAN port assignments",
        "operationId": "updateVLANPorts",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ports"
              },
              "example": {
                "untagged": [
                  {
                    "name": "eth1",
                    "type": "ethernet",
                    "speed": "10Gbps",
                    "enabled": true
                  },
                  {
                    "name": "eth3",
                    "type": "ethernet",
                    "speed": "10Gbps",
                    "enabled": true
                  }
                ],
                "tagged": [
                  {
                    "name": "eth2",
                    "type": "ethernet",
                    "speed": "10Gbps",
                    "enabled": false
                  },
                  {
                    "name": "eth4",
                    "type": "ethernet",
                    "speed": "10Gbps",
                    "enabled": false
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "VLAN ports updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/vlans/{deviceId}/{vlanId}/properties": {
      "put": {
        "summary": "Update VLAN properties",
        "operationId": "updateVLANProperties",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VLANProperties"
              },
              "example": {
                "mtu": 9000,
                "priority": 5,
                "igmpSnooping": true,
                "dhcpSnooping": true,
                "arpInspection": true,
                "stormControl": {
                  "broadcast": 50,
                  "multicast": 50,
                  "unicast": 60
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "VLAN properties updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/vlans/id/{vlanId}": {
      "get": {
        "summary": "Get specific VLAN configuration",
        "operationId": "getVlanConfigById",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "vlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VLAN configuration retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VLAN"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid VLAN ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - VLAN configuration not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "put": {
        "summary": "Update VLAN configuration by ID",
        "operationId": "updateVlanConfigById",
        "tags": [
          "vlan"
        ],
        "parameters": [
          {
            "name": "vlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VLAN"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "VLAN configuration updated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - VLAN configuration not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/routing": {
      "get": {
        "summary": "Get Routing Configuration",
        "description": "Retrieve device routing configuration",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "operationId": "getRoutingConfig",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "Device identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Routing configuration details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingConfig"
                },
                "example": {
                  "staticRoutes": [
                    {
                      "destination": {
                        "address": "192.168.2.0",
                        "prefixLength": 24
                      },
                      "nextHop": "192.168.1.1",
                      "metric": 10,
                      "description": "Route to Branch Office"
                    }
                  ],
                  "bgp": {
                    "asNumber": 65001,
                    "routerId": "192.168.1.1",
                    "neighbors": [
                      {
                        "address": "192.168.1.2",
                        "remoteAs": 65002,
                        "description": "Peer with ISP",
                        "timers": {
                          "keepalive": 30,
                          "holdTime": 90
                        }
                      }
                    ]
                  },
                  "ospf": {
                    "processId": 1,
                    "routerId": "192.168.1.1",
                    "areas": [
                      {
                        "areaId": "0.0.0.0",
                        "type": "normal",
                        "interfaces": [
                          "eth1",
                          "eth2"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update Routing Configuration",
        "description": "Update device routing configuration including static routes and routing protocols",
        "tags": [
          "config"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "operationId": "putRoutingConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/If-Match"
          }
        ],
        "requestBody": {
          "description": "Routing configuration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingConfig"
              },
              "example": {
                "staticRoutes": [
                  {
                    "destination": {
                      "address": "192.168.100.0",
                      "prefixLength": 24
                    },
                    "nextHop": "10.0.0.1",
                    "metric": 100,
                    "interface": {
                      "name": "eth1",
                      "enabled": true
                    },
                    "adminDistance": 1,
                    "description": "Updated route to internal network",
                    "bfd": {
                      "enabled": true,
                      "minTx": 300,
                      "minRx": 300,
                      "multiplier": 3
                    }
                  }
                ],
                "bgp": {
                  "asNumber": 65000,
                  "routerId": "192.168.1.1",
                  "neighbors": [
                    {
                      "address": "192.168.2.1",
                      "remoteAs": 65001,
                      "description": "Updated peer with ISP",
                      "timers": {
                        "keepalive": 30,
                        "holdTime": 90
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse",
            "headers": {
              "ETag": {
                "description": "Entity tag for version tracking",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/routing/all": {
      "get": {
        "summary": "Get all routing configurations",
        "operationId": "getAllRoutingConfigs",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all routing configurations retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutingConfig"
                  }
                },
                "example": [
                  {
                    "staticRoutes": [
                      {
                        "destination": {
                          "address": "192.168.2.0",
                          "prefixLength": 24
                        },
                        "nextHop": "192.168.1.1",
                        "metric": 10,
                        "description": "Route to Branch Office"
                      }
                    ],
                    "bgp": {
                      "asNumber": 65001,
                      "routerId": "192.168.1.1",
                      "neighbors": [
                        {
                          "address": "192.168.1.2",
                          "remoteAs": 65002,
                          "description": "Peer with ISP"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - No routing configurations found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/config/routing/{deviceId}": {
      "get": {
        "summary": "Get complete routing configuration for a device",
        "operationId": "getDeviceRoutingConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complete routing configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update complete routing configuration for a device",
        "operationId": "updateDeviceRoutingConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Routing configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/routing/{deviceId}/bgp": {
      "get": {
        "summary": "Get BGP configuration",
        "operationId": "getBGPConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BGP configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bgp"
                },
                "example": {
                  "asNumber": 65000,
                  "routerId": "192.168.1.1",
                  "neighbors": [
                    {
                      "address": "192.168.2.1",
                      "remoteAs": 65001,
                      "description": "Peer with ISP",
                      "timers": {
                        "keepalive": 30,
                        "holdTime": 90
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update BGP configuration",
        "operationId": "updateBGPConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bgp"
              },
              "example": {
                "asNumber": 65000,
                "routerId": "192.168.1.1",
                "neighbors": [
                  {
                    "address": "192.168.2.1",
                    "remoteAs": 65001,
                    "description": "Updated peer with ISP",
                    "timers": {
                      "keepalive": 60,
                      "holdTime": 180
                    }
                  },
                  {
                    "address": "192.168.3.1",
                    "remoteAs": 65002,
                    "description": "New peer with backup ISP",
                    "timers": {
                      "keepalive": 30,
                      "holdTime": 90
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BGP configuration updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/routing/{deviceId}/bgp/neighbors": {
      "get": {
        "summary": "Get BGP neighbors",
        "operationId": "getBGPNeighbors",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of BGP neighbors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BGPNeighbor"
                  }
                },
                "example": [
                  {
                    "address": "192.168.2.1",
                    "remoteAs": 65001,
                    "description": "Peer with ISP",
                    "timers": {
                      "keepalive": 30,
                      "holdTime": 90
                    }
                  },
                  {
                    "address": "192.168.3.1",
                    "remoteAs": 65002,
                    "description": "Peer with backup ISP",
                    "timers": {
                      "keepalive": 30,
                      "holdTime": 90
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Add BGP neighbor",
        "operationId": "addBGPNeighbor",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BGPNeighbor"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BGP neighbor added successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/routing/{deviceId}/ospf": {
      "get": {
        "summary": "Get OSPF configuration",
        "operationId": "getOSPFConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OSPF configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ospf"
                },
                "example": {
                  "processId": 1,
                  "routerId": "192.168.1.1",
                  "areas": [
                    {
                      "areaId": "0.0.0.0",
                      "type": "normal",
                      "interfaces": [
                        "eth1",
                        "eth2"
                      ]
                    },
                    {
                      "areaId": "0.0.0.1",
                      "type": "stub",
                      "interfaces": [
                        "eth3"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update OSPF configuration",
        "operationId": "updateOSPFConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ospf"
              },
              "example": {
                "processId": 1,
                "routerId": "192.168.1.1",
                "areas": [
                  {
                    "areaId": "0.0.0.0",
                    "type": "normal",
                    "interfaces": [
                      "eth1",
                      "eth2",
                      "eth4"
                    ]
                  },
                  {
                    "areaId": "0.0.0.1",
                    "type": "totally-stub",
                    "interfaces": [
                      "eth3"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OSPF configuration updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/routing/{deviceId}/static": {
      "get": {
        "summary": "Get static routes",
        "operationId": "getStaticRoutes",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of static routes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouteEntry"
                  }
                },
                "example": [
                  {
                    "destination": {
                      "address": "192.168.100.0",
                      "prefixLength": 24
                    },
                    "nextHop": "10.0.0.1",
                    "metric": 100,
                    "interface": {
                      "name": "eth1",
                      "enabled": true
                    },
                    "adminDistance": 1,
                    "description": "Route to internal network"
                  },
                  {
                    "destination": {
                      "address": "172.16.0.0",
                      "prefixLength": 16
                    },
                    "nextHop": "10.0.0.2",
                    "metric": 200,
                    "interface": {
                      "name": "eth2",
                      "enabled": true
                    },
                    "adminDistance": 1,
                    "description": "Route to branch office"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Add static route",
        "operationId": "addStaticRoute",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteEntry"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Static route added successfully"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/routing/{deviceId}/validate": {
      "post": {
        "summary": "Validate routing configuration",
        "operationId": "validateRoutingConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/routing/routes/device/{routeId}": {
      "get": {
        "summary": "Get specific route configuration",
        "operationId": "getRouteConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "routeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Route configuration retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid route ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Route configuration not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "put": {
        "summary": "Update route configuration",
        "operationId": "updateRouteConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "routeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Route configuration updated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Route configuration not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      },
      "delete": {
        "summary": "Delete route configuration",
        "operationId": "deleteRouteConfig",
        "tags": [
          "routing"
        ],
        "security": [
          {
            "configAuth": []
          }
        ],
        "parameters": [
          {
            "name": "routeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Route configuration deleted successfully."
          },
          "400": {
            "description": "Bad Request - Invalid route ID format."
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions."
          },
          "404": {
            "description": "Not Found - Route configuration not found."
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred."
          }
        }
      }
    },
    "/operations/state": {
      "get": {
        "summary": "Get operational state",
        "operationId": "getOperationalState",
        "tags": [
          "operations"
        ],
        "security": [
          {
            "operationsAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operational state retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalState"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Query Device State",
        "tags": [
          "operations"
        ],
        "security": [
          {
            "operationsAuth": []
          }
        ],
        "operationId": "queryDeviceState",
        "requestBody": {
          "description": "State query parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateQueryMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "State query response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateQueryResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/operations/state/{deviceId}": {
      "get": {
        "summary": "Get device operational state",
        "operationId": "getDeviceOperationalState",
        "tags": [
          "operations"
        ],
        "security": [
          {
            "operationsAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device operational state retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceOperationalState"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Query specific device state",
        "operationId": "querySpecificDeviceState",
        "tags": [
          "operations"
        ],
        "security": [
          {
            "operationsAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateQueryMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device state query response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateQueryResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/operations/state/{deviceId}/interfaces": {
      "get": {
        "summary": "Get device interface states",
        "operationId": "getDeviceInterfaceStates",
        "tags": [
          "operations"
        ],
        "security": [
          {
            "operationsAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device interface states retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceOperationalState"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/operations/state/{deviceId}/tables": {
      "get": {
        "summary": "Get table entries",
        "operationId": "getTableEntries",
        "tags": [
          "operations"
        ],
        "security": [
          {
            "operationsAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "arp",
                "mac",
                "route"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table entries information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateQueryResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/operations/state/{deviceId}/reboot": {
      "post": {
        "summary": "Reboot device",
        "operationId": "rebootDevice",
        "tags": [
          "operations"
        ],
        "security": [
          {
            "operationsAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RebootCommandMessage"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Reboot command accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/telemetry/interface_stats": {
      "post": {
        "summary": "Report Interface Statistics",
        "description": "Reports detailed interface statistics including counters, errors, and performance metrics. Used for monitoring interface health and traffic patterns.",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "operationId": "reportInterfaceStats",
        "requestBody": {
          "description": "Interface statistics data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceStatsMessage"
              },
              "example": {
                "type": "INTERFACE_STATS",
                "timestamp": "2024-01-01T00:00:00Z",
                "device": {
                  "deviceId": "switch-01",
                  "deviceRoles": [
                    "Switch"
                  ]
                },
                "interfaceStats": {
                  "eth0": {
                    "name": "eth0",
                    "isUp": true,
                    "enabled": true,
                    "speed": "1Gbps",
                    "counters": {
                      "rxBytes": 1000000,
                      "txBytes": 2000000,
                      "rxErrors": 0,
                      "txErrors": 0
                    }
                  }
                },
                "schemaVersion": "1.0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/telemetry/stats": {
      "get": {
        "summary": "Get interface statistics",
        "operationId": "getInterfaceStats",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter statistics by device ID"
          },
          {
            "name": "interface",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by interface name (optional)"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceStats"
                  }
                },
                "example": [
                  {
                    "name": "eth0",
                    "description": "Primary network interface",
                    "type": "ethernet",
                    "macAddress": "00:11:22:33:44:55",
                    "ipv4Address": "192.168.1.1",
                    "ipv4Subnet": "255.255.255.0",
                    "mtu": 1500,
                    "enabled": true,
                    "operStatus": "up",
                    "adminStatus": "up",
                    "vlanIds": [
                      100,
                      200
                    ],
                    "lastFlapped": 1609459200,
                    "counters": {
                      "rxBytes": 1000000,
                      "rxPackets": 10000,
                      "rxErrors": 0,
                      "txBytes": 2000000,
                      "txPackets": 20000,
                      "txErrors": 0,
                      "multicast": 500,
                      "broadcast": 200
                    }
                  },
                  {
                    "name": "eth1",
                    "description": "Secondary network interface",
                    "type": "ethernet",
                    "macAddress": "00:11:22:33:44:56",
                    "ipv4Address": "192.168.2.1",
                    "ipv4Subnet": "255.255.255.0",
                    "mtu": 1500,
                    "enabled": true,
                    "operStatus": "up",
                    "adminStatus": "up",
                    "vlanIds": [
                      300,
                      400
                    ],
                    "lastFlapped": 1609459200,
                    "counters": {
                      "rxBytes": 500000,
                      "rxPackets": 5000,
                      "rxErrors": 0,
                      "txBytes": 1000000,
                      "txPackets": 10000,
                      "txErrors": 0,
                      "multicast": 200,
                      "broadcast": 100
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No statistics found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/stats/bulk": {
      "post": {
        "summary": "Get statistics for multiple interfaces",
        "operationId": "getBulkStats",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "interfaces": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deviceId": {
                          "type": "string"
                        },
                        "interfaceId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "deviceId",
                        "interfaceId"
                      ]
                    }
                  },
                  "statsTypes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "counters",
                        "qos",
                        "errors"
                      ]
                    }
                  }
                },
                "required": [
                  "interfaces"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/InterfaceStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request body or interface identifiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - One or more interfaces not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/stats/{deviceId}": {
      "get": {
        "summary": "Get device statistics",
        "operationId": "getDeviceStats",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                },
                "example": {
                  "deviceId": "switch-01",
                  "name": "Core Switch 1",
                  "type": "switch",
                  "enabled": true,
                  "operStatus": "up",
                  "adminStatus": "up",
                  "vlanIds": [
                    1,
                    10,
                    20,
                    30,
                    100
                  ],
                  "lastFlapped": 1609459200,
                  "counters": {
                    "rxBytes": 10000000,
                    "rxPackets": 100000,
                    "rxErrors": 5,
                    "rxDropped": 10,
                    "txBytes": 20000000,
                    "txPackets": 200000,
                    "txErrors": 2,
                    "txDropped": 0,
                    "multicast": 5000,
                    "broadcast": 2000
                  },
                  "qosStats": {
                    "queueStats": {
                      "queue0": {
                        "packets": 50000,
                        "bytes": 5000000,
                        "dropped": 0,
                        "queueLength": 0
                      },
                      "queue1": {
                        "packets": 30000,
                        "bytes": 3000000,
                        "dropped": 0,
                        "queueLength": 0
                      }
                    },
                    "dscp": {
                      "0": 80000,
                      "46": 20000
                    }
                  },
                  "errorStats": {
                    "crc": 2,
                    "fragment": 0,
                    "jabber": 0,
                    "alignment": 3,
                    "symbol": 0,
                    "unknown": 0
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device not found or no statistics available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/stats/{deviceId}/interfaces": {
      "get": {
        "summary": "Get interface statistics for device",
        "operationId": "getDeviceInterfaceStats",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interface",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specific interface name (optional)"
          }
        ],
        "responses": {
          "200": {
            "description": "Interface statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device not found or no interface statistics available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/stats/{deviceId}/interfaces/{interfaceId}/counters": {
      "get": {
        "summary": "Get interface counters",
        "operationId": "getInterfaceCounters",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interfaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interface counters retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceCounters"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID or interface ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device or interface not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update interface counters",
        "operationId": "updateInterfaceCounters",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interfaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Counter data to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceCounters"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interface counters updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceCounters"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid counter data or format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device or interface not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Clear interface counters",
        "operationId": "clearInterfaceCounters",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interfaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Interface counters cleared successfully"
          },
          "400": {
            "description": "Bad Request - Invalid device ID or interface ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device or interface not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/stats/{deviceId}/interfaces/{interfaceId}/errors": {
      "get": {
        "summary": "Get interface error statistics",
        "operationId": "getErrorStats",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interfaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Error statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID or interface ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device or interface not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/stats/{deviceId}/interfaces/{interfaceId}/qos": {
      "get": {
        "summary": "Get QoS statistics",
        "operationId": "getQoSStats",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interfaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "QoS statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QoSStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID or interface ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device or interface not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/meters": {
      "get": {
        "summary": "Get meter statistics",
        "operationId": "getMeterStats",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by device ID (optional)"
          },
          {
            "name": "meterId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by meter ID (optional)"
          }
        ],
        "responses": {
          "200": {
            "description": "Meter statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No meter statistics found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/metrics": {
      "get": {
        "summary": "Get Telemetry Metrics",
        "description": "Retrieves telemetry metrics data from devices",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "operationId": "getTelemetryMetrics",
        "responses": {
          "200": {
            "description": "Metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricData"
                  }
                },
                "example": [
                  {
                    "name": "cpu_utilization",
                    "value": 45.2,
                    "unit": "percent",
                    "timestamp": "2024-01-01T12:00:00Z"
                  },
                  {
                    "name": "memory_usage",
                    "value": 3.8,
                    "unit": "GB",
                    "timestamp": "2024-01-01T12:00:00Z"
                  },
                  {
                    "name": "temperature",
                    "value": 38.5,
                    "unit": "celsius",
                    "timestamp": "2024-01-01T12:00:00Z"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Report Telemetry Metrics",
        "description": "Reports device telemetry metrics including resource utilization, environmental data, and performance metrics. This endpoint is used for periodic reporting of device health and performance data.",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "operationId": "reportTelemetryMetrics",
        "requestBody": {
          "description": "Telemetry metrics data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelemetryMessage"
              },
              "example": {
                "type": "TELEMETRY",
                "timestamp": "2024-01-01T00:00:00Z",
                "device": {
                  "deviceId": "switch-01",
                  "deviceRoles": [
                    "Switch"
                  ]
                },
                "metrics": {
                  "packetCount": 1000000,
                  "errorCount": 0,
                  "deviceSpecificMetrics": {
                    "resources": {
                      "cpu": {
                        "usage": 45.5,
                        "temperature": 35.6
                      },
                      "memory": {
                        "total": 16384,
                        "used": 8192,
                        "free": 8192
                      }
                    },
                    "environmental": {
                      "temperature": {
                        "ambient": 25.5
                      },
                      "power": {
                        "consumption": 120.5
                      }
                    }
                  },
                  "timestamp": "2024-01-01T00:00:00Z",
                  "interval": 30,
                  "sequence": 1
                },
                "schemaVersion": "1.0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Telemetry metrics received successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelemetryMessage"
                },
                "example": {
                  "type": "TELEMETRY",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "device": {
                    "deviceId": "switch-01",
                    "deviceRoles": [
                      "Switch"
                    ]
                  },
                  "metrics": {
                    "packetCount": 1000000,
                    "errorCount": 0,
                    "deviceSpecificMetrics": {
                      "resources": {
                        "cpu": {
                          "usage": 45.5,
                          "temperature": 35.6
                        },
                        "memory": {
                          "total": 16384,
                          "used": 8192,
                          "free": 8192
                        }
                      },
                      "environmental": {
                        "temperature": {
                          "ambient": 25.5
                        },
                        "power": {
                          "consumption": 120.5
                        }
                      }
                    },
                    "timestamp": "2024-01-01T00:00:00Z",
                    "interval": 30,
                    "sequence": 1
                  },
                  "schemaVersion": "1.0"
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "schema": {
                  "type": "string"
                },
                "example": "max-age=300"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/telemetry/metrics/bulk": {
      "post": {
        "summary": "Get metrics for multiple devices",
        "operationId": "getBulkMetrics",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of device IDs"
                  },
                  "metricTypes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "resource",
                        "environmental"
                      ]
                    }
                  }
                },
                "required": [
                  "devices"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/DeviceMetrics"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/telemetry/metrics/{deviceId}": {
      "get": {
        "summary": "Get device metrics",
        "operationId": "getDeviceMetrics",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "resource",
                "environmental",
                "all"
              ],
              "default": "all"
            },
            "description": "Type of metrics to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Device metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceMetrics"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/telemetry/metrics/{deviceId}/environmental": {
      "get": {
        "summary": "Get environmental metrics",
        "operationId": "getEnvironmentalMetrics",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environmental metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentalMetrics"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/telemetry/metrics/{deviceId}/resources": {
      "get": {
        "summary": "Get resource metrics",
        "operationId": "getResourceMetrics",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceMetrics"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/telemetry/metrics/{deviceId}/thresholds": {
      "get": {
        "summary": "Get metric thresholds",
        "operationId": "getMetricThresholds",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metric thresholds retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricThresholds"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update metric thresholds",
        "operationId": "updateMetricThresholds",
        "tags": [
          "telemetry"
        ],
        "security": [
          {
            "telemetryAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cpu": {
                    "type": "object",
                    "properties": {
                      "warning": {
                        "type": "number"
                      },
                      "critical": {
                        "type": "number"
                      }
                    }
                  },
                  "memory": {
                    "type": "object",
                    "properties": {
                      "warning": {
                        "type": "number"
                      },
                      "critical": {
                        "type": "number"
                      }
                    }
                  },
                  "temperature": {
                    "type": "object",
                    "properties": {
                      "warning": {
                        "type": "number"
                      },
                      "critical": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thresholds updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/pipeline/flows": {
      "get": {
        "summary": "Get all flow entries",
        "description": "Retrieves all flow entries across all devices and tables",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "getFlows",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "Optional filter by device ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "in": "query",
            "description": "Optional filter by table ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlowEntry"
                  }
                },
                "example": [
                  {
                    "type": "FLOW_ENTRY",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "deviceId": "switch-01",
                    "tableId": 0,
                    "priority": 100,
                    "match": {
                      "in_port": 1,
                      "eth_type": 2048,
                      "ip_proto": 6,
                      "ipv4_dst": "192.168.1.100"
                    },
                    "actions": {
                      "action": "forward",
                      "output_port": 2
                    },
                    "packetCounter": 1250,
                    "byteCounter": 125000
                  },
                  {
                    "type": "FLOW_ENTRY",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "deviceId": "switch-02",
                    "tableId": 1,
                    "priority": 90,
                    "match": {
                      "in_port": 1,
                      "eth_type": 34525,
                      "ipv6_dst": "2001:db8::1"
                    },
                    "actions": {
                      "action": "forward",
                      "output_port": 3
                    },
                    "packetCounter": 500,
                    "byteCounter": 45000
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new flow entry",
        "description": "Creates a new flow entry in the specified table",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "createFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "description": "Flow entry to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/FlowEntry"
                  }
                ]
              },
              "example": {
                "type": "FLOW_ENTRY",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0.0",
                "requestId": "req-12345",
                "deviceId": "switch-01",
                "tableId": 0,
                "priority": 110,
                "match": {
                  "in_port": 1,
                  "eth_type": 2048,
                  "ip_proto": 17,
                  "ipv4_dst": "192.168.1.200",
                  "udp_dst": 53
                },
                "actions": {
                  "action": "forward",
                  "output_port": 5
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Flow entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowEntry"
                },
                "example": {
                  "type": "FLOW_ENTRY",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "deviceId": "switch-01",
                  "tableId": 0,
                  "priority": 110,
                  "match": {
                    "in_port": 1,
                    "eth_type": 2048,
                    "ip_proto": 17,
                    "ipv4_dst": "192.168.1.200",
                    "udp_dst": 53
                  },
                  "actions": {
                    "action": "forward",
                    "output_port": 5
                  },
                  "packetCounter": 0,
                  "byteCounter": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/config/pipeline/flows": {
      "get": {
        "summary": "Get Flow Entries",
        "description": "Retrieves flow entries from pipeline match-action tables",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "getFlowEntries",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "ID of the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "in": "query",
            "description": "ID of the match-action table",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlowEntry"
                  }
                },
                "example": [
                  {
                    "type": "FLOW_ENTRY",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "deviceId": "switch-01",
                    "tableId": 0,
                    "priority": 100,
                    "match": {
                      "in_port": 1,
                      "eth_type": 2048,
                      "ip_proto": 6,
                      "ipv4_dst": "192.168.1.100"
                    },
                    "actions": {
                      "action": "forward",
                      "output_port": 2
                    },
                    "packetCounter": 1250,
                    "byteCounter": 125000
                  },
                  {
                    "type": "FLOW_ENTRY",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "deviceId": "switch-01",
                    "tableId": 0,
                    "priority": 90,
                    "match": {
                      "in_port": 1,
                      "eth_type": 2048
                    },
                    "actions": {
                      "action": "forward",
                      "output_port": 3
                    },
                    "packetCounter": 500,
                    "byteCounter": 45000
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          }
        }
      },
      "post": {
        "summary": "Update Flow Entries",
        "description": "Updates flow entries in the pipeline match-action tables",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "updateFlowEntries",
        "requestBody": {
          "description": "Flow entries to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlowEntry"
              },
              "example": {
                "type": "FLOW_ENTRY",
                "timestamp": "2024-01-01T00:00:00Z",
                "deviceId": "switch-01",
                "tableId": 0,
                "priority": 100,
                "match": {
                  "in_port": 1,
                  "eth_type": 2048,
                  "ip_proto": 6,
                  "ipv4_dst": "192.168.1.100"
                },
                "actions": {
                  "action": "forward",
                  "output_port": 4
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "409": {
            "$ref": "#/components/responses/BusinessRuleConflictResponse"
          }
        }
      }
    },
    "/config/pipeline/tables": {
      "get": {
        "summary": "Get Match-Action Tables",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "getMatchActionTables",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "ID of the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of match-action tables",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchActionTable"
                  }
                },
                "example": [
                  {
                    "type": "MATCH_ACTION_TABLE",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "deviceId": "switch-01",
                    "tableId": 0,
                    "name": "Port ACL Table",
                    "nextTableId": 1,
                    "flowEntries": []
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          }
        }
      },
      "post": {
        "summary": "Create Match-Action Table",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "createMatchActionTable",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "description": "Match-action table to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/MatchActionTable"
                  }
                ]
              },
              "example": {
                "type": "MATCH_ACTION_TABLE",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0.0",
                "requestId": "req-12345",
                "deviceId": "switch-01",
                "tableId": 2,
                "name": "New ACL Table",
                "nextTableId": 3,
                "flowEntries": []
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Match-action table created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchActionTable"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          }
        }
      }
    },
    "/config/pipeline": {
      "get": {
        "summary": "Get Pipeline Configuration",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "getPipelineConfig",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineConfig"
                },
                "example": {
                  "type": "PIPELINE_CONFIG",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "switchId": "switch-01",
                  "tables": [
                    {
                      "type": "MATCH_ACTION_TABLE",
                      "timestamp": "2024-01-01T00:00:00Z",
                      "schemaVersion": "1.0.0",
                      "deviceId": "switch-01",
                      "tableId": 0,
                      "name": "Port ACL Table",
                      "nextTableId": 1,
                      "flowEntries": []
                    },
                    {
                      "type": "MATCH_ACTION_TABLE",
                      "timestamp": "2024-01-01T00:00:00Z",
                      "schemaVersion": "1.0.0",
                      "deviceId": "switch-01",
                      "tableId": 1,
                      "name": "VLAN Table",
                      "nextTableId": 2,
                      "flowEntries": []
                    }
                  ],
                  "vlans": [
                    {
                      "vlanId": 100,
                      "name": "Management VLAN",
                      "description": "VLAN for management traffic",
                      "ports": {
                        "untagged": [],
                        "tagged": []
                      }
                    }
                  ],
                  "acls": []
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          }
        }
      },
      "post": {
        "summary": "Update Pipeline Configuration",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "operationId": "updatePipelineConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "description": "Pipeline configuration to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/PipelineConfig"
                  }
                ]
              },
              "example": {
                "type": "PIPELINE_CONFIG",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0.0",
                "requestId": "req-12345",
                "switchId": "switch-01",
                "tables": [
                  {
                    "type": "MATCH_ACTION_TABLE",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "schemaVersion": "1.0.0",
                    "deviceId": "switch-01",
                    "tableId": 0,
                    "name": "Updated Port ACL Table",
                    "nextTableId": 1,
                    "flowEntries": []
                  }
                ],
                "vlans": [
                  {
                    "vlanId": 100,
                    "name": "Management VLAN",
                    "description": "VLAN for management traffic",
                    "ports": {
                      "untagged": [],
                      "tagged": []
                    }
                  }
                ],
                "acls": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          }
        }
      }
    },
    "/tables": {
      "get": {
        "summary": "Get all pipeline match-action tables",
        "operationId": "getPipelineTables",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "Filter tables by device ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline match-action tables retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchActionTable"
                  }
                },
                "example": [
                  {
                    "type": "MATCH_ACTION_TABLE",
                    "timestamp": "2023-01-01T00:00:00Z",
                    "schemaVersion": "1.0.0",
                    "deviceId": "switch-01",
                    "tableId": 0,
                    "name": "L2 Forwarding",
                    "nextTableId": 1
                  },
                  {
                    "type": "MATCH_ACTION_TABLE",
                    "timestamp": "2023-01-01T00:00:00Z",
                    "schemaVersion": "1.0.0",
                    "deviceId": "switch-01",
                    "tableId": 1,
                    "name": "L3 Routing",
                    "nextTableId": 2
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new match-action table",
        "operationId": "createTable",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/MatchActionTable"
                  }
                ]
              },
              "example": {
                "type": "MATCH_ACTION_TABLE",
                "timestamp": "2023-01-01T00:00:00Z",
                "schemaVersion": "1.0.0",
                "deviceId": "switch-01",
                "tableId": 3,
                "name": "QoS Processing",
                "nextTableId": 4,
                "requestId": "req-12345"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Table created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchActionTable"
                },
                "example": {
                  "type": "MATCH_ACTION_TABLE",
                  "timestamp": "2023-01-01T00:00:00Z",
                  "schemaVersion": "1.0.0",
                  "deviceId": "switch-01",
                  "tableId": 3,
                  "name": "QoS Processing",
                  "nextTableId": 4,
                  "requestId": "req-12345"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/PermissionCheckFailedResponse"
          },
          "409": {
            "description": "Idempotency conflict - request with this key was already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/tables/{tableId}": {
      "get": {
        "summary": "Get specific pipeline match-action table",
        "operationId": "getPipelineTable",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "description": "ID of the table to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline match-action table retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchActionTable"
                },
                "example": {
                  "type": "MATCH_ACTION_TABLE",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "schemaVersion": "1.0.0",
                  "deviceId": "switch-01",
                  "tableId": 1,
                  "name": "VLAN Table",
                  "nextTableId": 2,
                  "flowEntries": [
                    {
                      "type": "FLOW_ENTRY",
                      "timestamp": "2024-01-01T00:00:00Z",
                      "deviceId": "switch-01",
                      "tableId": 1,
                      "priority": 100,
                      "match": {
                        "in_port": 1,
                        "eth_type": 2048
                      },
                      "actions": {
                        "action": "forward",
                        "output_port": 2
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid table ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Pipeline table not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a match-action table",
        "operationId": "updateTable",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "description": "ID of the table to update",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchActionTable"
              },
              "example": {
                "type": "MATCH_ACTION_TABLE",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0.0",
                "deviceId": "switch-01",
                "tableId": 1,
                "name": "Updated VLAN Table",
                "nextTableId": 2,
                "flowEntries": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchActionTable"
                },
                "example": {
                  "type": "MATCH_ACTION_TABLE",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "schemaVersion": "1.0.0",
                  "deviceId": "switch-01",
                  "tableId": 1,
                  "name": "Updated VLAN Table",
                  "nextTableId": 2,
                  "flowEntries": []
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid table configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Table not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tables/{tableId}/pipeline": {
      "post": {
        "summary": "Update pipeline configuration for a table",
        "operationId": "updateTablePipelineConfig",
        "tags": [
          "pipeline"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "description": "ID of the table to update pipeline configuration",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineUpdateMessage"
              },
              "example": {
                "type": "PIPELINE_UPDATE",
                "timestamp": "2024-01-01T00:00:00Z",
                "schemaVersion": "1.0.0",
                "operationType": "add",
                "flowEntries": [
                  {
                    "type": "FLOW_ENTRY",
                    "timestamp": "2024-01-01T00:00:00Z",
                    "deviceId": "switch-01",
                    "tableId": 1,
                    "priority": 100,
                    "match": {
                      "in_port": 1,
                      "eth_type": 2048
                    },
                    "actions": {
                      "action": "forward",
                      "output_port": 2
                    }
                  }
                ],
                "applyImmediately": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pipeline configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineConfig"
                },
                "example": {
                  "type": "PIPELINE_CONFIG",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "switchId": "switch-01",
                  "tables": [
                    {
                      "type": "MATCH_ACTION_TABLE",
                      "timestamp": "2024-01-01T00:00:00Z",
                      "schemaVersion": "1.0.0",
                      "deviceId": "switch-01",
                      "tableId": 1,
                      "name": "VLAN Table",
                      "nextTableId": 2,
                      "flowEntries": [
                        {
                          "type": "FLOW_ENTRY",
                          "timestamp": "2024-01-01T00:00:00Z",
                          "deviceId": "switch-01",
                          "tableId": 1,
                          "priority": 100,
                          "match": {
                            "in_port": 1,
                            "eth_type": 2048
                          },
                          "actions": {
                            "action": "forward",
                            "output_port": 2
                          }
                        }
                      ]
                    }
                  ],
                  "vlans": [
                    {
                      "vlanId": 100,
                      "name": "Management VLAN",
                      "description": "VLAN for management traffic",
                      "ports": {
                        "untagged": [],
                        "tagged": []
                      }
                    }
                  ],
                  "acls": []
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid pipeline configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Table not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/security/devices/{deviceId}/roles": {
      "get": {
        "summary": "Get device roles",
        "operationId": "getDeviceRoles",
        "tags": [
          "security"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleUpdateMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update device roles",
        "operationId": "updateDeviceRoles",
        "tags": [
          "security"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RoleUpdateMessage"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device roles updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID or role configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Idempotency conflict.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/security/roles": {
      "get": {
        "summary": "Get all roles",
        "operationId": "getRoles",
        "tags": [
          "security"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                },
                "example": [
                  {
                    "name": "admin",
                    "permissions": [
                      "read:devices",
                      "write:devices",
                      "read:config",
                      "write:config",
                      "read:security",
                      "write:security"
                    ]
                  },
                  {
                    "name": "operator",
                    "permissions": [
                      "read:devices",
                      "read:config",
                      "write:config:limited"
                    ]
                  },
                  {
                    "name": "viewer",
                    "permissions": [
                      "read:devices",
                      "read:config"
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No roles found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new role",
        "operationId": "createRole",
        "tags": [
          "security"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKey"
          },
          {
            "$ref": "#/components/parameters/ClientTimestamp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RoleUpdateMessage"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid role configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Role already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdempotencyConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/security/roles/{roleName}": {
      "get": {
        "summary": "Get role details",
        "operationId": "getRole",
        "tags": [
          "security"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid role ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update role",
        "operationId": "updateRole",
        "tags": [
          "security"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid role configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete role",
        "operationId": "deleteRole",
        "tags": [
          "security"
        ],
        "security": [
          {
            "coreAuth": []
          }
        ],
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role deleted successfully"
          },
          "400": {
            "description": "Bad Request - Invalid role ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions or role in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "summary": "Get list of devices by role",
        "operationId": "getDevices",
        "tags": [
          "core"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DeviceRoleEnum"
            },
            "description": "Filter devices by role",
            "example": "Switch"
          }
        ],
        "responses": {
          "200": {
            "description": "List of devices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Device"
                  }
                },
                "example": [
                  {
                    "deviceId": "switch-01",
                    "hostname": "core-switch-01",
                    "managementIp": "192.168.1.10",
                    "macAddress": "00:11:22:33:44:55",
                    "deviceRoles": [
                      "Switch"
                    ]
                  },
                  {
                    "deviceId": "router-01",
                    "hostname": "edge-router-01",
                    "managementIp": "192.168.1.1",
                    "macAddress": "00:11:22:33:44:66",
                    "deviceRoles": [
                      "Router"
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DataValidationFailedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UserNotAuthenticatedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Register a new device",
        "operationId": "registerDevice",
        "tags": [
          "core"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              },
              "example": {
                "deviceId": "switch-03",
                "hostname": "access-switch-03",
                "managementIp": "192.168.1.13",
                "macAddress": "00:11:22:33:44:77",
                "deviceRoles": [
                  "Switch"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Device registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Device already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/devices/{deviceId}": {
      "get": {
        "summary": "Get device details",
        "operationId": "getDevice",
        "tags": [
          "core"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "switch-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Device details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                },
                "example": {
                  "deviceId": "switch-01",
                  "hostname": "core-switch-01",
                  "managementIp": "192.168.1.10",
                  "macAddress": "00:11:22:33:44:55",
                  "deviceRoles": [
                    "Switch"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid device ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Device not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "200": {
        "$ref": "#/components/responses/SuccessResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "201": {
        "$ref": "#/components/responses/CreatedSuccessResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "400": {
        "$ref": "#/components/responses/DataValidationFailedResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "401": {
        "$ref": "#/components/responses/UserNotAuthenticatedResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "403": {
        "$ref": "#/components/responses/PermissionCheckFailedResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "404": {
        "$ref": "#/components/responses/ResourceNotFoundResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "405": {
        "$ref": "#/components/responses/MethodNotSupportedResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "409": {
        "$ref": "#/components/responses/BusinessRuleConflictResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "415": {
        "$ref": "#/components/responses/UnsupportedDataRequestFormatResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "500": {
        "$ref": "#/components/responses/InternalServerErrorResponse",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "SuccessResponse": {
        "description": "Request Successful"
      },
      "CreatedSuccessResponse": {
        "description": "Created Successfully"
      },
      "DataValidationFailedResponse": {
        "description": "Data Validation Failed"
      },
      "UserNotAuthenticatedResponse": {
        "description": "User Not Authenticated"
      },
      "PermissionCheckFailedResponse": {
        "description": "Permission Check Failed"
      },
      "ResourceNotFoundResponse": {
        "description": "Resource Not Found"
      },
      "MethodNotSupportedResponse": {
        "description": "Method Not Supported"
      },
      "BusinessRuleConflictResponse": {
        "description": "Business Rule Conflict"
      },
      "UnsupportedDataRequestFormatResponse": {
        "description": "Unsupported Data Request Format"
      },
      "InternalServerErrorResponse": {
        "description": "Internal Server Error"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "Will be deprecated in future"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "will be deprecated in future"
      },
      "unassignedAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for unassigned role - Fix this"
      },
      "coreAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for core role"
      },
      "configAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for config role"
      },
      "telemetryAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for telemetry role"
      },
      "operationsAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for operations role"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/oauth/token",
            "scopes": {
              "h3net:all": "Full access to all API endpoints"
            }
          }
        }
      }
    },
    "schemas": {
      "HealthStatusMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "HEALTH_STATUS"
                ],
                "example": "HEALTH_STATUS"
              },
              "status": {
                "$ref": "#/components/schemas/Status"
              },
              "uptime": {
                "type": "string",
                "format": "duration",
                "example": "P30DT10H"
              },
              "lastChecked": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "components": {
                "type": "object",
                "properties": {
                  "database": {
                    "type": "string",
                    "enum": [
                      "healthy",
                      "degraded",
                      "unhealthy"
                    ],
                    "example": "healthy"
                  },
                  "api": {
                    "type": "string",
                    "enum": [
                      "healthy",
                      "degraded",
                      "unhealthy"
                    ],
                    "example": "healthy"
                  },
                  "telemetry": {
                    "type": "string",
                    "enum": [
                      "healthy",
                      "degraded",
                      "unhealthy"
                    ],
                    "example": "healthy"
                  }
                },
                "example": {
                  "database": "healthy",
                  "api": "healthy",
                  "telemetry": "healthy"
                }
              },
              "metrics": {
                "type": "object",
                "properties": {
                  "activeConnections": {
                    "type": "integer",
                    "example": 42
                  },
                  "cpuUsage": {
                    "type": "number",
                    "example": 25.5
                  },
                  "memoryUsage": {
                    "type": "number",
                    "example": 60.2
                  }
                },
                "example": {
                  "activeConnections": 42,
                  "cpuUsage": 25.5,
                  "memoryUsage": 60.2
                }
              }
            },
            "required": [
              "status",
              "lastChecked"
            ]
          }
        ],
        "example": {
          "type": "HEALTH_STATUS",
          "timestamp": "2023-10-01T12:00:00Z",
          "schemaVersion": "1.0",
          "status": {
            "type": "STATUS",
            "timestamp": "2023-10-01T12:00:00Z",
            "state": "healthy"
          },
          "uptime": "P30DT10H",
          "lastChecked": "2023-10-01T11:55:00Z",
          "components": {
            "database": "healthy",
            "api": "healthy",
            "telemetry": "healthy"
          },
          "metrics": {
            "activeConnections": 42,
            "cpuUsage": 25.5,
            "memoryUsage": 60.2
          }
        }
      },
      "HelloMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "type": "object",
            "properties": {
              "messageType": {
                "type": "string",
                "enum": [
                  "HELLO"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/Device"
              },
              "message": {
                "type": "string",
                "description": "Optional greeting or additional information."
              }
            },
            "required": [
              "device"
            ]
          }
        ]
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid request parameters"
          },
          "details": {
            "type": "object",
            "description": "Additional error details",
            "additionalProperties": true,
            "example": {
              "field": "deviceId",
              "reason": "Required field missing"
            }
          }
        },
        "required": [
          "code",
          "message"
        ],
        "example": {
          "code": 400,
          "message": "Invalid request parameters",
          "details": {
            "field": "deviceId",
            "reason": "Required field missing"
          }
        }
      },
      "BaseErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/ErrorMessage"
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorDetail"
                },
                "example": [
                  {
                    "code": "INVALID_REQUEST",
                    "target": "deviceId",
                    "message": "Required field missing"
                  }
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ],
        "example": {
          "type": "RESPONSE",
          "timestamp": "2023-10-01T12:00:00Z",
          "schemaVersion": "1.0",
          "status": "error",
          "requestId": "123e4567-e89b-12d3-a456-426614174000",
          "error": {
            "code": 400,
            "message": "Invalid request parameters"
          },
          "errors": [
            {
              "code": "INVALID_REQUEST",
              "target": "deviceId",
              "message": "Required field missing"
            }
          ]
        }
      },
      "BaseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "success",
                  "error",
                  "pending"
                ],
                "description": "Response status",
                "example": "success"
              },
              "requestId": {
                "type": "string",
                "description": "Original request ID",
                "example": "123e4567-e89b-12d3-a456-426614174000"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "example": {
          "type": "RESPONSE",
          "timestamp": "2023-10-01T12:00:00Z",
          "schemaVersion": "1.0",
          "status": "success",
          "requestId": "123e4567-e89b-12d3-a456-426614174000"
        }
      },
      "ResponseMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "RESPONSE"
                ],
                "example": "RESPONSE"
              },
              "status": {
                "type": "string",
                "enum": [
                  "success",
                  "failure"
                ],
                "example": "success"
              },
              "message": {
                "type": "string",
                "description": "Optional details about the response.",
                "example": "Operation completed successfully"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "example": {
          "type": "RESPONSE",
          "timestamp": "2023-10-01T12:00:00Z",
          "schemaVersion": "1.0",
          "status": "success",
          "message": "Operation completed successfully"
        }
      },
      "EventNotificationMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "type": "object",
            "properties": {
              "eventType": {
                "type": "string",
                "enum": [
                  "CONFIG_CHANGE",
                  "STATE_CHANGE",
                  "ALARM",
                  "THRESHOLD_BREACH",
                  "SECURITY_EVENT"
                ],
                "description": "Type of event notification",
                "example": "CONFIG_CHANGE"
              },
              "severity": {
                "type": "string",
                "enum": [
                  "info",
                  "warning",
                  "error",
                  "critical"
                ],
                "description": "Event severity level",
                "example": "info"
              },
              "source": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string",
                    "example": "switch-01"
                  },
                  "component": {
                    "type": "string",
                    "example": "interface"
                  }
                },
                "required": [
                  "deviceId"
                ],
                "example": {
                  "deviceId": "switch-01",
                  "component": "interface"
                }
              },
              "description": {
                "type": "string",
                "description": "Event description",
                "example": "Interface eth0 configuration changed"
              },
              "data": {
                "type": "object",
                "description": "Event-specific data",
                "additionalProperties": true,
                "example": {
                  "interface": "eth0",
                  "changes": [
                    "speed",
                    "mtu"
                  ]
                }
              }
            },
            "required": [
              "eventType",
              "severity",
              "source",
              "description"
            ]
          }
        ],
        "example": {
          "type": "EVENT_NOTIFICATION",
          "timestamp": "2023-10-01T12:00:00Z",
          "schemaVersion": "1.0",
          "eventType": "CONFIG_CHANGE",
          "severity": "info",
          "source": {
            "deviceId": "switch-01",
            "component": "interface"
          },
          "description": "Interface eth0 configuration changed",
          "data": {
            "interface": "eth0",
            "changes": [
              "speed",
              "mtu"
            ]
          }
        }
      },
      "DeviceRoleEnum": {
        "type": "string",
        "enum": [
          "Switch",
          "Router",
          "L2 Switch",
          "Firewall",
          "Wireless Access Point",
          "VoIP",
          "Load Balancer",
          "VPN Gateway",
          "UTM",
          "PDU"
        ],
        "example": "Switch"
      },
      "BaseMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Message type identifier",
            "example": "EVENT_NOTIFICATION"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "schemaVersion": {
            "type": "string",
            "description": "Schema version",
            "example": "1.0"
          }
        },
        "required": [
          "type",
          "timestamp",
          "schemaVersion"
        ],
        "example": {
          "type": "EVENT_NOTIFICATION",
          "timestamp": "2023-10-01T12:00:00Z",
          "schemaVersion": "1.0"
        }
      },
      "IPAddress": {
        "type": "string",
        "format": "ip",
        "description": "Represents either an IPv4 or IPv6 address",
        "example": {
          "ipv4": {
            "value": "192.168.1.1"
          },
          "ipv6": {
            "value": "2001:db8::1"
          }
        }
      },
      "IPAddressWithPrefix": {
        "type": "object",
        "description": "IP address with network prefix length (CIDR notation)",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/IPAddress",
            "description": "IP address portion"
          },
          "prefixLength": {
            "type": "integer",
            "minimum": 0,
            "maximum": 128,
            "description": "Network prefix length (0-32 for IPv4, 0-128 for IPv6)",
            "example": 24
          }
        },
        "required": [
          "address",
          "prefixLength"
        ],
        "example": {
          "ipv4": {
            "value": {
              "address": "192.168.1.0",
              "prefixLength": 24
            }
          },
          "ipv6": {
            "value": {
              "address": "2001:db8::",
              "prefixLength": 64
            }
          }
        }
      },
      "MACAddress": {
        "type": "string",
        "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
        "description": "MAC address in format XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX",
        "example": "00:1A:2B:3C:4D:5E"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time",
        "description": "ISO 8601 formatted timestamp with timezone",
        "example": "2023-10-01T12:00:00Z",
        "x-go-type": "string"
      },
      "CapabilityRequestMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CAPABILITY_REQUEST"
                ]
              },
              "requestedCapabilities": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "detail": {
                "type": "string",
                "enum": [
                  "basic",
                  "detailed",
                  "full"
                ]
              }
            }
          }
        ],
        "example": {
          "type": "CAPABILITY_REQUEST",
          "timestamp": "2024-01-01T00:00:00Z",
          "schemaVersion": "1.0",
          "requestedCapabilities": [
            "routingSupport",
            "firewallSupport",
            "vpnSupport"
          ],
          "detail": "detailed"
        }
      },
      "CapabilityQueryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CAPABILITY_QUERY_RESPONSE"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/Device"
              },
              "capabilities": {
                "$ref": "#/components/schemas/Capabilities"
              },
              "interfaces": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NetworkInterface"
                }
              },
              "supportedTables": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "extendedCapabilities": {
                "type": "object",
                "additionalProperties": true
              },
              "constraints": {
                "type": "object",
                "properties": {
                  "maxFlowEntries": {
                    "type": "integer"
                  },
                  "maxTables": {
                    "type": "integer"
                  },
                  "maxVlans": {
                    "type": "integer"
                  }
                }
              }
            },
            "required": [
              "device",
              "capabilities",
              "interfaces"
            ]
          }
        ],
        "example": {
          "type": "CAPABILITY_QUERY_RESPONSE",
          "timestamp": "2024-01-01T00:00:01Z",
          "schemaVersion": "1.0",
          "status": "success",
          "device": {
            "deviceId": "switch-01",
            "hostname": "core-switch-01",
            "deviceRoles": [
              "Switch"
            ]
          },
          "capabilities": {
            "routingSupport": true,
            "firewallSupport": false,
            "vpnSupport": false,
            "loadBalancing": false,
            "qosSupport": true,
            "ipv6Support": true,
            "mplsSupport": false,
            "sflowSupport": true,
            "netflowSupport": false,
            "features": {
              "stacking": true,
              "portChannels": true
            },
            "supportedProtocols": [
              "lldp",
              "stp",
              "lacp"
            ],
            "hardwareCapabilities": {
              "tcamSize": 8192,
              "bufferSize": 32768,
              "forwardingCapacity": "400Gbps"
            }
          },
          "interfaces": [
            {
              "name": "eth0",
              "type": "ethernet",
              "speed": "1Gbps",
              "enabled": true
            }
          ],
          "supportedTables": [
            "acl",
            "mac",
            "route"
          ],
          "constraints": {
            "maxFlowEntries": 10000,
            "maxTables": 8,
            "maxVlans": 4094
          }
        }
      },
      "NetworkDiscoveryMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NETWORK_DISCOVERY"
                ]
              },
              "discoveryType": {
                "type": "string",
                "enum": [
                  "lldp",
                  "cdp",
                  "fdb",
                  "bgp_neighbors"
                ]
              },
              "startPoints": {
                "type": "array",
                "description": "Starting points for discovery",
                "items": {
                  "$ref": "#/components/schemas/IPAddress"
                }
              },
              "subnets": {
                "type": "array",
                "description": "Subnets to discover",
                "items": {
                  "$ref": "#/components/schemas/IPAddressWithPrefix"
                }
              }
            },
            "required": [
              "discoveryType"
            ]
          }
        ],
        "example": {
          "type": "NETWORK_DISCOVERY",
          "timestamp": "2024-01-01T00:00:00Z",
          "schemaVersion": "1.0",
          "discoveryType": "lldp",
          "startPoints": [
            "192.168.1.1"
          ],
          "subnets": [
            {
              "address": "192.168.1.0",
              "prefixLength": 24
            }
          ]
        }
      },
      "NetworkDiscoveryResponseMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NETWORK_DISCOVERY_RESPONSE"
                ]
              },
              "discoveryType": {
                "type": "string",
                "enum": [
                  "lldp",
                  "cdp",
                  "fdb",
                  "bgp_neighbors"
                ]
              },
              "discoveredDevices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DiscoveredNeighbor"
                }
              },
              "topology": {
                "type": "object",
                "description": "Network topology information",
                "properties": {
                  "links": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "source": {
                          "$ref": "#/components/schemas/IPAddress"
                        },
                        "target": {
                          "$ref": "#/components/schemas/IPAddress"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "discoveryType",
              "discoveredDevices"
            ]
          }
        ],
        "example": {
          "type": "NETWORK_DISCOVERY_RESPONSE",
          "timestamp": "2024-01-01T00:00:00Z",
          "schemaVersion": "1.0",
          "discoveryType": "lldp",
          "discoveredDevices": [
            {
              "device": {
                "deviceId": "switch-02",
                "hostname": "access-switch-01",
                "deviceRoles": [
                  "Switch"
                ]
              },
              "discoveryProtocol": "lldp",
              "distance": 1,
              "lastSeen": "2024-01-01T00:00:00Z",
              "confidence": 1,
              "connectionDetails": {
                "localPort": "eth1",
                "remotePort": "eth0",
                "linkType": "ethernet",
                "localAddress": "192.168.1.1",
                "remoteAddress": "192.168.1.2"
              }
            }
          ],
          "topology": {
            "links": [
              {
                "source": "192.168.1.1",
                "target": "192.168.1.2",
                "type": "ethernet"
              }
            ]
          }
        }
      },
      "DeviceSettings": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DEVICE_INFO_REQUEST",
              "DEVICE_INFO_RESPONSE",
              "DEVICE_SETTINGS_UPDATE"
            ],
            "description": "Type of device configuration message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the message"
          },
          "deviceId": {
            "type": "string",
            "description": "Unique identifier of the device"
          },
          "hostname": {
            "type": "string"
          },
          "managementIp": {
            "$ref": "#/components/schemas/IPAddress"
          },
          "snmpCommunity": {
            "type": "string"
          },
          "ntpServers": {
            "type": "array",
            "description": "List of NTP servers (can be IP addresses or FQDNs)",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IPAddress"
                },
                {
                  "$ref": "#/components/schemas/Hostname"
                }
              ]
            }
          },
          "syslogServers": {
            "type": "array",
            "description": "List of syslog servers",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IPAddress"
                },
                {
                  "$ref": "#/components/schemas/Hostname"
                }
              ]
            }
          },
          "dnsSettings": {
            "type": "object",
            "description": "DNS configuration",
            "properties": {
              "servers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IPAddress"
                }
              },
              "domain": {
                "type": "string"
              },
              "searchDomains": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "type",
          "timestamp",
          "deviceId",
          "hostname"
        ]
      },
      "DeviceConfigUpdateMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DEVICE_CONFIG_UPDATE"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/Device"
              },
              "config": {
                "type": "object",
                "properties": {
                  "deviceSettings": {
                    "$ref": "#/components/schemas/DeviceSettings"
                  },
                  "interfaces": {
                    "type": "object",
                    "additionalProperties": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NetworkInterface"
                        },
                        {
                          "$ref": "#/components/schemas/IPConfig"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "deviceSettings"
                ]
              },
              "applyImmediately": {
                "type": "boolean"
              }
            },
            "required": [
              "device",
              "config"
            ]
          }
        ]
      },
      "SwitchDevice": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          },
          "deviceModel": {
            "type": "string"
          },
          "firmwareVersion": {
            "type": "string"
          },
          "networkInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-NetworkInterface"
            }
          },
          "deviceConfig": {
            "$ref": "#/components/schemas/SwitchConfiguration"
          }
        },
        "required": [
          "deviceId"
        ]
      },
      "PortConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-NetworkInterface"
          },
          {
            "properties": {
              "portId": {
                "type": "integer"
              },
              "nativeVlan": {
                "type": "integer"
              },
              "aclIn": {
                "type": "string"
              },
              "maxLearnedMacs": {
                "type": "integer"
              },
              "dynamicVlan": {
                "type": "boolean"
              },
              "stormControl": {
                "type": "object",
                "description": "Storm control settings",
                "properties": {
                  "broadcast": {
                    "type": "integer"
                  },
                  "multicast": {
                    "type": "integer"
                  },
                  "unicast": {
                    "type": "integer"
                  }
                }
              },
              "portSecurity": {
                "type": "object",
                "description": "Port security settings",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "maxMacAddresses": {
                    "type": "integer"
                  },
                  "violationAction": {
                    "type": "string",
                    "enum": [
                      "protect",
                      "restrict",
                      "shutdown"
                    ]
                  }
                }
              }
            },
            "required": [
              "portId"
            ]
          }
        ]
      },
      "VLAN": {
        "type": "object",
        "properties": {
          "vlanId": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "suspend"
            ]
          },
          "ports": {
            "type": "object",
            "properties": {
              "untagged": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NetworkInterface"
                }
              },
              "tagged": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NetworkInterface"
                }
              }
            }
          },
          "aclIn": {
            "type": "string",
            "description": "Ingress ACL applied to VLAN"
          },
          "aclOut": {
            "type": "string",
            "description": "Egress ACL applied to VLAN"
          },
          "vVLANRouterMac": {
            "type": "string",
            "description": "MAC address for the VLAN's router interface"
          },
          "interVLANRoutingVips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPConfig"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/VLANProperties"
          },
          "security": {
            "$ref": "#/components/schemas/VLANSecurity"
          },
          "qos": {
            "type": "object",
            "description": "QoS settings for the VLAN",
            "properties": {
              "priority": {
                "type": "integer"
              },
              "bandwidthLimit": {
                "type": "integer"
              },
              "dscp": {
                "type": "integer"
              }
            }
          }
        },
        "required": [
          "vlanId",
          "name",
          "ports"
        ]
      },
      "ACL": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "aclName": {
                "type": "string",
                "description": "Name of the ACL",
                "example": "web-traffic-acl"
              },
              "description": {
                "type": "string",
                "description": "Human-readable description of the ACL",
                "example": "Web traffic filtering rules"
              },
              "type": {
                "type": "string",
                "enum": [
                  "standard",
                  "extended",
                  "mac",
                  "ipv6"
                ],
                "description": "Type of ACL",
                "example": "extended"
              },
              "rules": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ACLRule"
                },
                "description": "List of rules in this ACL"
              },
              "statistics": {
                "type": "object",
                "properties": {
                  "totalHits": {
                    "type": "integer",
                    "description": "Total number of hits across all rules",
                    "example": 5280
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of the last statistics update",
                    "example": "2023-10-01T12:05:00Z"
                  }
                },
                "example": {
                  "totalHits": 5280,
                  "lastUpdated": "2023-10-01T12:05:00Z"
                }
              }
            },
            "required": [
              "aclName",
              "rules"
            ]
          }
        ],
        "example": {
          "type": "ACL_CONFIG",
          "timestamp": "2023-10-01T12:00:00Z",
          "schemaVersion": "1.0",
          "aclName": "web-traffic-acl",
          "description": "Web traffic filtering rules",
          "aclType": "extended",
          "rules": [
            {
              "ruleId": 1,
              "description": "Allow HTTP traffic",
              "matches": {
                "ip_proto": 6,
                "tcp_dst": 80,
                "src_ip": {
                  "address": "192.168.1.0",
                  "prefixLength": 24
                }
              },
              "actions": {
                "allow": true
              },
              "enabled": true
            },
            {
              "ruleId": 2,
              "description": "Allow HTTPS traffic",
              "matches": {
                "ip_proto": 6,
                "tcp_dst": 443,
                "src_ip": {
                  "address": "192.168.1.0",
                  "prefixLength": 24
                }
              },
              "actions": {
                "allow": true
              },
              "enabled": true
            }
          ],
          "statistics": {
            "totalHits": 5280,
            "lastUpdated": "2023-10-01T12:05:00Z"
          }
        }
      },
      "RoutingConfig": {
        "type": "object",
        "properties": {
          "staticRoutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteEntry"
            }
          },
          "bgp": {
            "type": "object",
            "properties": {
              "asNumber": {
                "type": "integer"
              },
              "routerId": {
                "$ref": "#/components/schemas/IPAddress"
              },
              "neighbors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BGPNeighbor"
                }
              }
            }
          },
          "ospf": {
            "type": "object",
            "properties": {
              "processId": {
                "type": "integer"
              },
              "routerId": {
                "$ref": "#/components/schemas/IPAddress"
              },
              "areas": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "areaId": {
                      "$ref": "#/components/schemas/IPAddress"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "normal",
                        "stub",
                        "nssa",
                        "totally-stub"
                      ]
                    },
                    "interfaces": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "areaId"
                  ]
                }
              }
            }
          }
        }
      },
      "PipelineConfig": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "switchId": {
            "type": "string"
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchActionTable"
            }
          },
          "vlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VLAN"
            }
          },
          "acls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ACL"
            }
          }
        },
        "required": [
          "switchId",
          "tables"
        ],
        "example": {
          "type": "PIPELINE_CONFIG",
          "timestamp": "2024-01-01T00:00:00Z",
          "switchId": "switch-01",
          "tables": [
            {
              "type": "MATCH_ACTION_TABLE",
              "timestamp": "2024-01-01T00:00:00Z",
              "schemaVersion": "1.0.0",
              "deviceId": "switch-01",
              "tableId": 0,
              "name": "Port ACL Table",
              "nextTableId": 1,
              "flowEntries": []
            }
          ],
          "vlans": [],
          "acls": []
        }
      },
      "PipelineUpdateMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PIPELINE_UPDATE"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "schemaVersion": {
            "type": "string"
          },
          "pipelineConfig": {
            "$ref": "#/components/schemas/PipelineConfig"
          },
          "operationType": {
            "type": "string",
            "enum": [
              "add",
              "update",
              "delete"
            ],
            "description": "Defines the type of operation for flow rule management"
          },
          "flowEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowEntry"
            },
            "description": "List of flow entries to be added, updated, or deleted"
          },
          "applyImmediately": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "timestamp",
          "operationType",
          "flowEntries",
          "schemaVersion",
          "applyImmediately"
        ],
        "example": {
          "type": "PIPELINE_UPDATE",
          "timestamp": "2024-01-01T00:00:00Z",
          "schemaVersion": "1.0.0",
          "operationType": "add",
          "flowEntries": [
            {
              "type": "FLOW_ENTRY",
              "timestamp": "2024-01-01T00:00:00Z",
              "deviceId": "switch-01",
              "tableId": 0,
              "priority": 100,
              "match": {
                "in_port": 1,
                "eth_type": 2048
              },
              "actions": {
                "action": "forward",
                "output_port": 2
              }
            }
          ],
          "applyImmediately": true
        }
      },
      "MatchActionTable": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "schemaVersion": {
            "type": "string",
            "description": "Schema version"
          },
          "deviceId": {
            "type": "string",
            "description": "Device identifier"
          },
          "tableId": {
            "type": "integer",
            "minimum": 0,
            "description": "Unique table identifier for this device"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Human-readable table name"
          },
          "nextTableId": {
            "type": "integer",
            "minimum": 0,
            "description": "ID of the next table in the chain"
          },
          "requestId": {
            "type": "string",
            "description": "Request identifier for tracking"
          },
          "flowEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowEntry"
            },
            "default": []
          }
        },
        "required": [
          "deviceId",
          "tableId",
          "name"
        ],
        "example": {
          "type": "MATCH_ACTION_TABLE",
          "timestamp": "2024-01-01T00:00:00Z",
          "schemaVersion": "1.0.0",
          "deviceId": "switch-01",
          "tableId": 0,
          "name": "Port ACL Table",
          "nextTableId": 1,
          "flowEntries": []
        }
      },
      "FlowEntry": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "deviceId": {
            "type": "string",
            "description": "Device identifier"
          },
          "tableId": {
            "type": "integer",
            "minimum": 0,
            "description": "Table identifier"
          },
          "priority": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535,
            "description": "Flow entry priority, higher values take precedence"
          },
          "match": {
            "$ref": "#/components/schemas/FlowMatch"
          },
          "actions": {
            "$ref": "#/components/schemas/FlowAction"
          },
          "nextTable": {
            "type": "integer",
            "description": "Identifier of the next table to evaluate if this entry matches"
          },
          "packetCounter": {
            "type": "integer",
            "description": "Count of packets matched by this flow entry"
          },
          "byteCounter": {
            "type": "integer",
            "description": "Total bytes matched by this flow entry"
          }
        },
        "required": [
          "deviceId",
          "tableId",
          "priority",
          "match",
          "actions"
        ],
        "example": {
          "type": "FLOW_ENTRY",
          "timestamp": "2024-01-01T00:00:00Z",
          "deviceId": "switch-01",
          "tableId": 0,
          "priority": 100,
          "match": {
            "in_port": 1,
            "eth_type": 2048,
            "ip_proto": 6,
            "ipv4_dst": "192.168.1.100",
            "tcp_dst": 80
          },
          "actions": {
            "action": "forward",
            "output_port": 2
          },
          "packetCounter": 1250,
          "byteCounter": 125000
        }
      },
      "TelemetryMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TELEMETRY"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "schemaVersion": {
            "type": "string",
            "description": "Schema version"
          },
          "device": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string"
              },
              "deviceRoles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "deviceId",
              "deviceRoles"
            ]
          },
          "metrics": {
            "type": "object",
            "properties": {
              "packetCount": {
                "type": "integer"
              },
              "errorCount": {
                "type": "integer"
              },
              "deviceSpecificMetrics": {
                "$ref": "#/components/schemas/DeviceMetrics"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "interval": {
                "type": "integer"
              },
              "sequence": {
                "type": "integer"
              }
            },
            "required": [
              "packetCount",
              "errorCount"
            ]
          }
        },
        "required": [
          "type",
          "timestamp",
          "device",
          "metrics"
        ],
        "example": {
          "type": "TELEMETRY",
          "timestamp": "2024-01-01T12:00:00Z",
          "schemaVersion": "1.0",
          "device": {
            "deviceId": "switch-core-01",
            "deviceRoles": [
              "Switch",
              "Core"
            ]
          },
          "metrics": {
            "packetCount": 1250000,
            "errorCount": 25,
            "deviceSpecificMetrics": {
              "vlanStats": {
                "vlan100": {
                  "rxPackets": 15000,
                  "txPackets": 12500
                }
              },
              "firewallHits": 1250,
              "resources": {
                "cpu": {
                  "usage": 65.3,
                  "load": 1.25,
                  "temperature": 42.8
                },
                "memory": {
                  "total": 16384,
                  "used": 8192,
                  "free": 8192
                }
              }
            },
            "timestamp": "2024-01-01T12:00:00Z",
            "interval": 300,
            "sequence": 42
          }
        }
      },
      "MeterConfig": {
        "type": "object",
        "properties": {
          "meterId": {
            "type": "integer"
          },
          "rate": {
            "type": "integer",
            "description": "Rate in kbps"
          },
          "burst_size": {
            "type": "integer",
            "description": "Burst size in bytes"
          },
          "action": {
            "type": "string",
            "enum": [
              "drop",
              "remark",
              "police"
            ],
            "description": "Meter action when threshold is exceeded"
          }
        },
        "required": [
          "meterId",
          "rate",
          "burst_size",
          "action"
        ]
      },
      "InterfaceStatsMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "INTERFACE_STATS"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/Device"
              },
              "interfaceStats": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InterfaceStats"
                }
              },
              "collectionTimestamp": {
                "type": "string",
                "format": "date-time"
              },
              "interval": {
                "type": "integer",
                "description": "Collection interval in seconds"
              },
              "aggregated": {
                "type": "boolean",
                "description": "Whether stats are aggregated"
              },
              "schemaVersion": {
                "type": "string",
                "description": "Schema version"
              }
            },
            "required": [
              "device",
              "interfaceStats",
              "schemaVersion"
            ]
          }
        ]
      },
      "StateQueryMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "STATE_QUERY"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/schemas-DeviceSettings"
              },
              "query": {
                "$ref": "#/components/schemas/StateQuery"
              }
            },
            "required": [
              "device",
              "query"
            ]
          }
        ],
        "example": {
          "type": "STATE_QUERY",
          "timestamp": "2024-03-15T10:30:00Z",
          "schemaVersion": "1.0",
          "device": {
            "deviceId": "switch-01"
          },
          "query": {
            "queryType": "interface_status"
          }
        }
      },
      "StateQueryResponseMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "STATE_QUERY_RESPONSE"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/Device"
              },
              "query": {
                "$ref": "#/components/schemas/StateQuery"
              },
              "data": {
                "type": "object"
              }
            },
            "required": [
              "device",
              "query",
              "data"
            ]
          }
        ],
        "example": {
          "type": "STATE_QUERY_RESPONSE",
          "timestamp": "2024-03-15T10:30:05Z",
          "schemaVersion": "1.0",
          "device": {
            "deviceId": "switch-01",
            "hostname": "core-switch-01",
            "deviceRoles": [
              "Switch"
            ]
          },
          "query": {
            "queryType": "interface_status"
          },
          "data": {
            "interfaces": [
              {
                "name": "eth0",
                "operStatus": "up",
                "adminStatus": "up",
                "lastChange": "2024-03-01T08:15:00Z",
                "speed": "1Gbps",
                "duplex": "full",
                "mtu": 1500
              },
              {
                "name": "eth1",
                "operStatus": "up",
                "adminStatus": "up",
                "lastChange": "2024-03-01T08:15:00Z",
                "speed": "10Gbps",
                "duplex": "full",
                "mtu": 9000
              }
            ]
          }
        }
      },
      "RoleUpdateMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ROLE_UPDATE"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/Device"
              },
              "newRoles": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "required": [
              "device",
              "newRoles"
            ]
          }
        ],
        "example": {
          "type": "ROLE_UPDATE",
          "timestamp": "2024-03-15T10:30:00Z",
          "schemaVersion": "1.0",
          "device": {
            "deviceId": "switch-01",
            "hostname": "core-switch-01",
            "deviceRoles": [
              "Switch"
            ]
          },
          "newRoles": [
            {
              "name": "operator",
              "permissions": [
                "read:devices",
                "read:config",
                "write:config:limited"
              ]
            },
            {
              "name": "viewer",
              "permissions": [
                "read:devices",
                "read:config"
              ]
            }
          ]
        }
      },
      "HealthStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "HEALTH_STATUS"
                ]
              },
              "status": {
                "$ref": "#/components/schemas/HealthStatusMessage"
              }
            }
          }
        ]
      },
      "HelloResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": [
              "type",
              "timestamp",
              "status"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "HELLO_RESPONSE"
                ]
              },
              "server_id": {
                "type": "string"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "schemaVersion": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "success"
                ]
              },
              "message": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "BaseRequest": {
        "type": "object",
        "required": [
          "type",
          "timestamp",
          "requestId"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "x-go-type": "string"
          },
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "Client-generated request ID for tracking"
          }
        }
      },
      "IdempotencyConflictError": {
        "type": "object",
        "required": [
          "type",
          "timestamp",
          "errorCode",
          "errorMessage",
          "originalRequest"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "IDEMPOTENCY_CONFLICT"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "x-go-type": "string"
          },
          "errorCode": {
            "type": "integer",
            "enum": [
              409
            ]
          },
          "errorMessage": {
            "type": "string"
          },
          "originalRequest": {
            "type": "object",
            "description": "Details of the original request that used this idempotency key"
          },
          "originalResponse": {
            "type": "object",
            "description": "Response from the original request"
          }
        }
      },
      "NetworkInterface": {
        "type": "object",
        "description": "Network interface configuration and status information",
        "properties": {
          "name": {
            "type": "string",
            "description": "Interface name/identifier",
            "example": "eth0"
          },
          "description": {
            "type": "string",
            "description": "Human-readable interface description",
            "example": "Uplink to Core Switch"
          },
          "enabled": {
            "type": "boolean",
            "description": "Administrative state of the interface",
            "example": true
          },
          "speed": {
            "$ref": "#/components/schemas/InterfaceSpeed",
            "description": "Interface speed setting"
          },
          "type": {
            "type": "string",
            "enum": [
              "ethernet",
              "fiber",
              "wireless",
              "loopback",
              "vlan",
              "tunnel"
            ],
            "description": "Interface type/media"
          },
          "mtu": {
            "type": "integer",
            "minimum": 64,
            "maximum": 9216,
            "description": "Maximum Transmission Unit in bytes",
            "example": 1500
          },
          "mac": {
            "$ref": "#/components/schemas/MACAddress",
            "description": "MAC address of the interface"
          },
          "state": {
            "$ref": "#/components/schemas/InterfaceState",
            "description": "Operational state of the interface"
          },
          "adminState": {
            "$ref": "#/components/schemas/AdminState",
            "description": "Administrative state of the interface"
          }
        },
        "required": [
          "name",
          "enabled"
        ]
      },
      "Hostname": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?([.][a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*$",
        "maxLength": 253,
        "description": "Valid hostname according to RFC 1123",
        "example": "example-host"
      },
      "Device": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "Unique identifier for the device",
            "example": "switch-01"
          },
          "hostname": {
            "$ref": "#/components/schemas/Hostname"
          },
          "managementIp": {
            "$ref": "#/components/schemas/IPAddress"
          },
          "macAddress": {
            "$ref": "#/components/schemas/MACAddress"
          },
          "deviceRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceRoleEnum"
            },
            "example": [
              "Switch"
            ]
          }
        },
        "required": [
          "deviceId",
          "deviceRoles"
        ],
        "example": {
          "deviceId": "switch-01",
          "hostname": "core-switch-01",
          "managementIp": "192.168.1.10",
          "macAddress": "00:11:22:33:44:55",
          "deviceRoles": [
            "Switch"
          ]
        }
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "INVALID_REQUEST",
              "AUTH_FAILURE",
              "RESOURCE_CONFLICT"
            ],
            "example": "INVALID_REQUEST"
          },
          "target": {
            "type": "string",
            "example": "deviceId"
          },
          "message": {
            "type": "string",
            "example": "Required field missing"
          }
        },
        "example": {
          "code": "INVALID_REQUEST",
          "target": "deviceId",
          "message": "Required field missing"
        }
      },
      "Status": {
        "type": "object",
        "description": "Status information with type and timestamp",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "STATUS"
            ],
            "example": "STATUS"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "state": {
            "type": "string",
            "enum": [
              "healthy",
              "degraded",
              "unhealthy"
            ],
            "description": "Current state of the component or system",
            "example": "healthy"
          }
        },
        "required": [
          "type",
          "timestamp",
          "state"
        ],
        "example": {
          "type": "STATUS",
          "timestamp": "2023-10-01T12:00:00Z",
          "state": "healthy"
        }
      },
      "Capabilities": {
        "type": "object",
        "description": "Device capabilities and features",
        "properties": {
          "routingSupport": {
            "type": "boolean"
          },
          "firewallSupport": {
            "type": "boolean"
          },
          "vpnSupport": {
            "type": "boolean"
          },
          "loadBalancing": {
            "type": "boolean"
          },
          "qosSupport": {
            "type": "boolean"
          },
          "ipv6Support": {
            "type": "boolean"
          },
          "mplsSupport": {
            "type": "boolean"
          },
          "sflowSupport": {
            "type": "boolean"
          },
          "netflowSupport": {
            "type": "boolean"
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "supportedProtocols": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hardwareCapabilities": {
            "type": "object",
            "properties": {
              "tcamSize": {
                "type": "integer"
              },
              "bufferSize": {
                "type": "integer"
              },
              "forwardingCapacity": {
                "type": "string"
              }
            }
          }
        },
        "example": {
          "routingSupport": true,
          "firewallSupport": false,
          "vpnSupport": false,
          "loadBalancing": true,
          "qosSupport": true,
          "ipv6Support": true,
          "mplsSupport": false,
          "sflowSupport": true,
          "netflowSupport": false,
          "features": {
            "stacking": true,
            "portChannels": true,
            "vxlan": false
          },
          "supportedProtocols": [
            "lldp",
            "stp",
            "lacp",
            "ospf"
          ],
          "hardwareCapabilities": {
            "tcamSize": 8192,
            "bufferSize": 32768,
            "forwardingCapacity": "400Gbps"
          }
        }
      },
      "InterfaceSpeed": {
        "type": "string",
        "description": "Interface speed in standard units",
        "enum": [
          "10Mbps",
          "100Mbps",
          "1Gbps",
          "2.5Gbps",
          "5Gbps",
          "10Gbps",
          "25Gbps",
          "40Gbps",
          "100Gbps"
        ],
        "example": "10Gbps"
      },
      "InterfaceState": {
        "type": "string",
        "enum": [
          "up",
          "down",
          "testing",
          "unknown",
          "dormant",
          "notPresent",
          "lowerLayerDown"
        ],
        "description": "Interface operational states as per IF-MIB"
      },
      "AdminState": {
        "type": "string",
        "enum": [
          "enabled",
          "disabled"
        ],
        "description": "Administrative state"
      },
      "DiscoveredNeighbor": {
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "discoveryProtocol": {
            "type": "string",
            "enum": [
              "lldp",
              "cdp",
              "fdb",
              "bgp_neighbors"
            ]
          },
          "distance": {
            "type": "integer",
            "description": "Hops from start point"
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "description": "Last time device was discovered"
          },
          "confidence": {
            "type": "number",
            "description": "Discovery confidence score"
          },
          "connectionDetails": {
            "type": "object",
            "description": "Connection information",
            "properties": {
              "localPort": {
                "type": "string"
              },
              "remotePort": {
                "type": "string"
              },
              "linkType": {
                "type": "string"
              },
              "localAddress": {
                "$ref": "#/components/schemas/IPAddress"
              },
              "remoteAddress": {
                "$ref": "#/components/schemas/IPAddress"
              }
            }
          }
        },
        "required": [
          "device",
          "discoveryProtocol"
        ],
        "example": {
          "device": {
            "deviceId": "switch-02",
            "hostname": "access-switch-01",
            "deviceRoles": [
              "Switch"
            ]
          },
          "discoveryProtocol": "lldp",
          "distance": 1,
          "lastSeen": "2024-01-01T00:00:00Z",
          "confidence": 1,
          "connectionDetails": {
            "localPort": "eth1",
            "remotePort": "eth0",
            "linkType": "ethernet",
            "localAddress": "192.168.1.1",
            "remoteAddress": "192.168.1.2"
          }
        }
      },
      "NetworkDiscoveryOptions": {
        "type": "object",
        "properties": {
          "depth": {
            "type": "integer",
            "description": "Discovery depth limit"
          },
          "protocols": {
            "type": "array",
            "description": "Specific protocols to use for discovery",
            "items": {
              "type": "string",
              "enum": [
                "lldp",
                "cdp",
                "fdb",
                "bgp_neighbors"
              ]
            }
          },
          "timeout": {
            "type": "integer",
            "description": "Discovery timeout in seconds"
          },
          "retries": {
            "type": "integer",
            "description": "Number of discovery retries"
          },
          "filters": {
            "type": "object",
            "description": "Discovery filters",
            "properties": {
              "deviceTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceRoleEnum"
                }
              },
              "subnets": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "depth": 3,
          "protocols": [
            "lldp",
            "cdp"
          ],
          "timeout": 60,
          "retries": 2,
          "filters": {
            "deviceTypes": [
              "Switch",
              "Router"
            ],
            "subnets": [
              "192.168.1.0/24",
              "10.0.0.0/8"
            ]
          }
        }
      },
      "NetworkTopology": {
        "type": "object",
        "description": "Network topology information",
        "properties": {
          "nodes": {
            "type": "array",
            "description": "Network nodes/devices",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "links": {
            "type": "array",
            "description": "Network links between devices",
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "description": "Source device ID"
                },
                "target": {
                  "type": "string",
                  "description": "Target device ID"
                },
                "sourcePort": {
                  "type": "string",
                  "description": "Source port name"
                },
                "targetPort": {
                  "type": "string",
                  "description": "Target port name"
                },
                "linkType": {
                  "type": "string",
                  "description": "Type of link"
                },
                "discoveryProtocol": {
                  "type": "string",
                  "enum": [
                    "lldp",
                    "cdp",
                    "fdb",
                    "bgp_neighbors"
                  ],
                  "description": "Protocol used to discover this link"
                }
              },
              "required": [
                "source",
                "target"
              ]
            }
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last topology update"
          }
        },
        "required": [
          "nodes",
          "links"
        ],
        "example": {
          "nodes": [
            {
              "deviceId": "switch-01",
              "hostname": "core-switch-01",
              "deviceRoles": [
                "Switch",
                "Router"
              ],
              "managementIp": "192.168.1.1"
            },
            {
              "deviceId": "switch-02",
              "hostname": "access-switch-01",
              "deviceRoles": [
                "Switch"
              ],
              "managementIp": "192.168.1.2"
            },
            {
              "deviceId": "router-01",
              "hostname": "edge-router-01",
              "deviceRoles": [
                "Router"
              ],
              "managementIp": "192.168.1.3"
            }
          ],
          "links": [
            {
              "source": "switch-01",
              "target": "switch-02",
              "sourcePort": "eth1/1",
              "targetPort": "eth0/1",
              "linkType": "ethernet",
              "discoveryProtocol": "lldp"
            },
            {
              "source": "switch-01",
              "target": "router-01",
              "sourcePort": "eth1/2",
              "targetPort": "eth0/1",
              "linkType": "ethernet",
              "discoveryProtocol": "lldp"
            }
          ],
          "lastUpdated": "2024-01-01T12:00:00Z"
        }
      },
      "ACLMatch": {
        "type": "object",
        "description": "ACL match criteria",
        "properties": {
          "eth_type": {
            "type": "integer",
            "description": "Ethernet type",
            "example": 2048
          },
          "ip_proto": {
            "type": "integer",
            "description": "IP protocol number",
            "example": 6
          },
          "src_ip": {
            "$ref": "#/components/schemas/IPAddressWithPrefix",
            "description": "Source IP address with prefix",
            "example": {
              "address": "192.168.1.0",
              "prefixLength": 24
            }
          },
          "dst_ip": {
            "$ref": "#/components/schemas/IPAddressWithPrefix",
            "description": "Destination IP address with prefix",
            "example": {
              "address": "10.0.0.0",
              "prefixLength": 8
            }
          },
          "tcp_src": {
            "type": "integer",
            "description": "TCP source port",
            "example": 80
          },
          "tcp_dst": {
            "type": "integer",
            "description": "TCP destination port",
            "example": 443
          },
          "udp_src": {
            "type": "integer",
            "description": "UDP source port",
            "example": 53
          },
          "udp_dst": {
            "type": "integer",
            "description": "UDP destination port",
            "example": 53
          },
          "icmp_type": {
            "type": "integer",
            "description": "ICMP message type",
            "example": 8
          },
          "icmp_code": {
            "type": "integer",
            "description": "ICMP message code",
            "example": 0
          },
          "icmpv6_type": {
            "type": "integer",
            "description": "ICMPv6 message type",
            "example": 128
          },
          "icmpv6_code": {
            "type": "integer",
            "description": "ICMPv6 message code",
            "example": 0
          },
          "vlan_id": {
            "type": "integer",
            "description": "VLAN ID",
            "example": 100
          },
          "dscp": {
            "type": "integer",
            "description": "Differentiated Services Code Point",
            "example": 46
          },
          "tcp_flags": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "FIN",
                "SYN",
                "RST",
                "PSH",
                "ACK",
                "URG"
              ]
            },
            "description": "TCP flags to match",
            "example": [
              "SYN",
              "ACK"
            ]
          }
        },
        "example": {
          "ip_proto": 6,
          "src_ip": {
            "address": "192.168.1.0",
            "prefixLength": 24
          },
          "tcp_dst": 443,
          "tcp_flags": [
            "SYN"
          ]
        }
      },
      "ACLAction": {
        "type": "object",
        "description": "ACL action configuration",
        "properties": {
          "allow": {
            "type": "boolean",
            "description": "Allow traffic matching this rule",
            "example": true
          },
          "deny": {
            "type": "boolean",
            "description": "Deny traffic matching this rule",
            "example": false
          },
          "mirror": {
            "type": "integer",
            "description": "Mirror traffic to specified port",
            "example": 5
          },
          "output": {
            "type": "integer",
            "description": "Output port for matching traffic",
            "example": 1
          },
          "ratelimit": {
            "type": "object",
            "properties": {
              "rate": {
                "type": "integer",
                "description": "Rate limit in packets per second",
                "example": 1000
              },
              "burst": {
                "type": "integer",
                "description": "Burst size in packets",
                "example": 100
              }
            },
            "example": {
              "rate": 1000,
              "burst": 100
            }
          },
          "redirect": {
            "type": "object",
            "properties": {
              "interface": {
                "type": "string",
                "description": "Interface to redirect traffic to",
                "example": "eth1"
              },
              "nextHop": {
                "type": "string",
                "description": "Next hop IP address",
                "example": "192.168.2.1"
              }
            },
            "example": {
              "interface": "eth1",
              "nextHop": "192.168.2.1"
            }
          },
          "logging": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Enable logging for this rule",
                "example": true
              },
              "level": {
                "type": "string",
                "enum": [
                  "emergency",
                  "alert",
                  "critical",
                  "error",
                  "warning",
                  "notice",
                  "info",
                  "debug"
                ],
                "description": "Logging level",
                "example": "info"
              }
            },
            "example": {
              "enabled": true,
              "level": "info"
            }
          }
        },
        "example": {
          "allow": true,
          "logging": {
            "enabled": true,
            "level": "info"
          }
        }
      },
      "ACLRule": {
        "type": "object",
        "description": "ACL rule definition",
        "properties": {
          "ruleId": {
            "type": "integer",
            "description": "Unique identifier for the rule",
            "example": 10
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the rule",
            "example": "Allow HTTPS traffic from internal network"
          },
          "matches": {
            "$ref": "#/components/schemas/ACLMatch",
            "description": "Match criteria for this rule"
          },
          "actions": {
            "$ref": "#/components/schemas/ACLAction",
            "description": "Actions to take for matching traffic"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the rule is enabled",
            "example": true
          },
          "hitCount": {
            "type": "integer",
            "description": "Number of times this rule has been matched",
            "example": 1250
          },
          "lastHit": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the last match",
            "example": "2023-10-01T12:00:00Z"
          }
        },
        "required": [
          "ruleId",
          "matches",
          "actions"
        ],
        "example": {
          "ruleId": 10,
          "description": "Allow HTTPS traffic from internal network",
          "matches": {
            "ip_proto": 6,
            "src_ip": {
              "address": "192.168.1.0",
              "prefixLength": 24
            },
            "tcp_dst": 443
          },
          "actions": {
            "allow": true,
            "logging": {
              "enabled": true,
              "level": "info"
            }
          },
          "enabled": true,
          "hitCount": 1250,
          "lastHit": "2023-10-01T12:00:00Z"
        }
      },
      "IPConfig": {
        "type": "object",
        "description": "IP configuration for an interface",
        "properties": {
          "primary": {
            "$ref": "#/components/schemas/IPAddressWithPrefix",
            "description": "Primary IP address configuration",
            "example": {
              "address": "192.168.1.1",
              "prefixLength": 24
            }
          },
          "secondary": {
            "type": "array",
            "description": "Secondary IP addresses",
            "items": {
              "$ref": "#/components/schemas/IPAddressWithPrefix"
            },
            "example": [
              {
                "address": "192.168.1.2",
                "prefixLength": 24
              }
            ]
          },
          "virtualIPs": {
            "type": "array",
            "description": "Virtual IP addresses for VRRP/HSRP",
            "items": {
              "$ref": "#/components/schemas/IPAddressWithPrefix"
            },
            "example": [
              {
                "address": "192.168.1.3",
                "prefixLength": 24
              }
            ]
          },
          "dhcp": {
            "type": "boolean",
            "description": "Whether DHCP is enabled",
            "default": false
          },
          "autoconfig": {
            "type": "boolean",
            "description": "Whether IPv6 autoconfig is enabled",
            "default": false
          }
        },
        "required": [
          "primary"
        ]
      },
      "DeviceInfoResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DEVICE_INFO_RESPONSE"
                ],
                "description": "Must be DEVICE_INFO_RESPONSE"
              },
              "deviceId": {
                "type": "string"
              },
              "settings": {
                "$ref": "#/components/schemas/DeviceSettings"
              }
            },
            "required": [
              "type",
              "deviceId",
              "settings"
            ]
          }
        ]
      },
      "DeviceInfoRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DEVICE_INFO_REQUEST"
                ],
                "description": "Must be DEVICE_INFO_REQUEST"
              },
              "deviceId": {
                "type": "string"
              },
              "devices": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of device IDs to query"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "dnsSettings": {
        "type": "object",
        "description": "DNS configuration",
        "properties": {
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPAddress"
            }
          },
          "domain": {
            "type": "string"
          },
          "searchDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ntpServers": {
        "type": "array",
        "description": "List of NTP servers (can be IP addresses or FQDNs)",
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/IPAddress"
            },
            {
              "$ref": "#/components/schemas/Hostname"
            }
          ]
        }
      },
      "syslogServers": {
        "type": "array",
        "description": "List of syslog servers",
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/IPAddress"
            },
            {
              "$ref": "#/components/schemas/Hostname"
            }
          ]
        }
      },
      "schemas-NetworkInterface": {
        "type": "object",
        "description": "Network interface configuration and status",
        "properties": {
          "name": {
            "type": "string",
            "description": "Interface name",
            "example": "eth0"
          },
          "type": {
            "type": "string",
            "enum": [
              "ethernet",
              "wifi",
              "virtual",
              "loopback",
              "tunnel"
            ],
            "description": "Interface type",
            "example": "ethernet"
          },
          "description": {
            "type": "string",
            "description": "Interface description",
            "example": "Uplink to Core Switch"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the interface is enabled",
            "example": true
          },
          "ipAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPAddressWithPrefix"
            }
          },
          "macAddress": {
            "$ref": "#/components/schemas/MACAddress"
          },
          "mtu": {
            "type": "integer",
            "minimum": 68,
            "maximum": 65535,
            "description": "Maximum Transmission Unit",
            "example": 1500
          },
          "speed": {
            "$ref": "#/components/schemas/InterfaceSpeed"
          },
          "duplex": {
            "type": "string",
            "enum": [
              "full",
              "half",
              "auto"
            ],
            "description": "Interface duplex mode",
            "example": "full"
          }
        },
        "required": [
          "name",
          "type",
          "enabled"
        ],
        "example": {
          "name": "eth0",
          "type": "ethernet",
          "enabled": true,
          "mtu": 1500,
          "speed": "10Gbps",
          "duplex": "full"
        }
      },
      "SystemSettings": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string"
          },
          "ntpServers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "loggingLevel": {
            "type": "string",
            "enum": [
              "DEBUG",
              "INFO",
              "WARNING",
              "ERROR"
            ]
          }
        }
      },
      "SwitchConfiguration": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string"
          },
          "managementIp": {
            "type": "string",
            "format": "ipv4"
          },
          "deviceMode": {
            "type": "string",
            "enum": [
              "STANDALONE",
              "STACKED"
            ]
          },
          "systemSettings": {
            "$ref": "#/components/schemas/SystemSettings"
          }
        }
      },
      "SpanningTreeConfig": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "mode": {
            "type": "string",
            "enum": [
              "stp",
              "rstp",
              "mstp"
            ]
          }
        }
      },
      "SwitchFeatures": {
        "type": "object",
        "description": "Optional switch features and capabilities",
        "properties": {
          "stacking": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "role": {
                "type": "string",
                "enum": [
                  "master",
                  "backup",
                  "member"
                ]
              },
              "priority": {
                "type": "integer"
              }
            }
          },
          "portChannels": {
            "type": "object",
            "properties": {
              "maxGroups": {
                "type": "integer"
              },
              "supportedProtocols": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "lacp",
                    "pagp",
                    "static"
                  ]
                }
              }
            }
          },
          "spanningTree": {
            "$ref": "#/components/schemas/SpanningTreeConfig"
          }
        }
      },
      "SwitchDeviceConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SwitchDevice"
          },
          {
            "properties": {
              "datapathId": {
                "type": "string"
              },
              "numTables": {
                "type": "integer"
              },
              "numPorts": {
                "type": "integer"
              },
              "ports": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PortConfig"
                }
              },
              "features": {
                "$ref": "#/components/schemas/SwitchFeatures"
              },
              "powerSupplies": {
                "type": "array",
                "description": "Power supply information",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              },
              "fans": {
                "type": "array",
                "description": "Fan information",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "speed": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "required": [
              "datapathId",
              "numTables",
              "numPorts"
            ]
          }
        ]
      },
      "VLANProperties": {
        "type": "object",
        "description": "Extended VLAN properties",
        "properties": {
          "mtu": {
            "type": "integer"
          },
          "priority": {
            "type": "integer"
          },
          "igmpSnooping": {
            "type": "boolean"
          },
          "dhcpSnooping": {
            "type": "boolean"
          },
          "arpInspection": {
            "type": "boolean"
          },
          "stormControl": {
            "type": "object",
            "properties": {
              "broadcast": {
                "type": "integer"
              },
              "multicast": {
                "type": "integer"
              },
              "unicast": {
                "type": "integer"
              }
            }
          }
        }
      },
      "VLANSecurity": {
        "type": "object",
        "description": "VLAN security settings",
        "properties": {
          "privateVlan": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "primary",
                  "isolated",
                  "community"
                ]
              },
              "primaryVlan": {
                "type": "integer"
              },
              "secondaryVlans": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          "macLimiters": {
            "type": "object",
            "properties": {
              "maxMacAddresses": {
                "type": "integer"
              },
              "violationAction": {
                "type": "string",
                "enum": [
                  "protect",
                  "restrict",
                  "shutdown"
                ]
              }
            }
          }
        }
      },
      "ports": {
        "type": "object",
        "properties": {
          "untagged": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          },
          "tagged": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          }
        }
      },
      "RouteEntry": {
        "type": "object",
        "description": "Route entry configuration",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/IPAddressWithPrefix"
          },
          "nextHop": {
            "$ref": "#/components/schemas/IPAddress"
          },
          "metric": {
            "type": "integer"
          },
          "interface": {
            "$ref": "#/components/schemas/NetworkInterface"
          },
          "adminDistance": {
            "type": "integer"
          },
          "tag": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "track": {
            "type": "integer"
          },
          "bfd": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "minTx": {
                "type": "integer"
              },
              "minRx": {
                "type": "integer"
              },
              "multiplier": {
                "type": "integer"
              }
            }
          }
        },
        "required": [
          "destination"
        ]
      },
      "BGPNeighbor": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/IPAddress"
          },
          "remoteAs": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "localAddress": {
            "$ref": "#/components/schemas/IPAddress"
          },
          "timers": {
            "type": "object",
            "properties": {
              "keepalive": {
                "type": "integer"
              },
              "holdTime": {
                "type": "integer"
              }
            }
          }
        },
        "required": [
          "address",
          "remoteAs"
        ]
      },
      "bgp": {
        "type": "object",
        "properties": {
          "asNumber": {
            "type": "integer"
          },
          "routerId": {
            "$ref": "#/components/schemas/IPAddress"
          },
          "neighbors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BGPNeighbor"
            }
          }
        }
      },
      "ospf": {
        "type": "object",
        "properties": {
          "processId": {
            "type": "integer"
          },
          "routerId": {
            "$ref": "#/components/schemas/IPAddress"
          },
          "areas": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "areaId": {
                  "$ref": "#/components/schemas/IPAddress"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "normal",
                    "stub",
                    "nssa",
                    "totally-stub"
                  ]
                },
                "interfaces": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "areaId"
              ]
            }
          }
        }
      },
      "InterfaceOperationalState": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "operStatus": {
            "type": "string",
            "enum": [
              "up",
              "down",
              "testing",
              "unknown",
              "dormant",
              "notPresent"
            ]
          },
          "adminStatus": {
            "type": "string",
            "enum": [
              "up",
              "down",
              "testing"
            ]
          },
          "lastChange": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "operStatus",
          "adminStatus"
        ],
        "example": {
          "name": "eth0",
          "operStatus": "up",
          "adminStatus": "up",
          "lastChange": "2024-03-01T08:15:00Z"
        }
      },
      "DeviceOperationalState": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "online",
              "offline",
              "error",
              "maintenance",
              "rebooting"
            ]
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time"
          },
          "uptime": {
            "type": "string"
          },
          "interfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterfaceOperationalState"
            }
          }
        },
        "required": [
          "deviceId",
          "status"
        ],
        "example": {
          "deviceId": "switch-01",
          "status": "online",
          "lastSeen": "2024-03-15T10:30:00Z",
          "uptime": "30d 12h 45m",
          "interfaces": [
            {
              "name": "eth0",
              "operStatus": "up",
              "adminStatus": "up",
              "lastChange": "2024-03-01T08:15:00Z"
            },
            {
              "name": "eth1",
              "operStatus": "up",
              "adminStatus": "up",
              "lastChange": "2024-03-01T08:15:00Z"
            },
            {
              "name": "eth2",
              "operStatus": "down",
              "adminStatus": "up",
              "lastChange": "2024-03-14T22:10:00Z"
            }
          ]
        }
      },
      "OperationalState": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "error",
              "maintenance"
            ]
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceOperationalState"
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "status",
          "timestamp"
        ],
        "example": {
          "status": "active",
          "devices": [
            {
              "deviceId": "switch-01",
              "status": "online",
              "lastSeen": "2024-03-15T10:30:00Z",
              "uptime": "30d 12h 45m",
              "interfaces": [
                {
                  "name": "eth0",
                  "operStatus": "up",
                  "adminStatus": "up",
                  "lastChange": "2024-03-01T08:15:00Z"
                }
              ]
            },
            {
              "deviceId": "router-01",
              "status": "online",
              "lastSeen": "2024-03-15T10:29:00Z",
              "uptime": "15d 8h 20m",
              "interfaces": [
                {
                  "name": "eth0",
                  "operStatus": "up",
                  "adminStatus": "up",
                  "lastChange": "2024-03-10T14:22:00Z"
                }
              ]
            }
          ],
          "timestamp": "2024-03-15T10:30:00Z"
        }
      },
      "schemas-DeviceSettings": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "Unique identifier for network device",
            "example": "switch-01"
          }
        },
        "example": {
          "deviceId": "switch-01",
          "hostname": "core-switch-01",
          "managementIp": "192.168.1.10"
        }
      },
      "StateQuery": {
        "type": "object",
        "properties": {
          "queryType": {
            "type": "string",
            "enum": [
              "interface_status",
              "table_entries",
              "arp_table",
              "mac_address_table",
              "route_table",
              "optics",
              "environment",
              "bgp_neighbors",
              "lldp_neighbors",
              "firewallRules",
              "vlans"
            ]
          }
        },
        "required": [
          "queryType"
        ],
        "example": {
          "queryType": "interface_status"
        }
      },
      "RebootCommandMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "REBOOT_COMMAND"
                ]
              },
              "device": {
                "$ref": "#/components/schemas/Device"
              },
              "force": {
                "type": "boolean"
              },
              "scheduledTime": {
                "type": "string",
                "format": "date-time",
                "description": "Optional scheduled time for reboot"
              }
            },
            "required": [
              "device"
            ]
          }
        ],
        "example": {
          "type": "REBOOT_COMMAND",
          "timestamp": "2024-03-15T10:30:00Z",
          "schemaVersion": "1.0",
          "device": {
            "deviceId": "switch-01",
            "hostname": "core-switch-01",
            "deviceRoles": [
              "Switch"
            ]
          },
          "force": false,
          "scheduledTime": "2024-03-16T02:00:00Z"
        }
      },
      "InterfaceCounters": {
        "type": "object",
        "description": "Interface counter statistics",
        "properties": {
          "rxBytes": {
            "type": "number"
          },
          "rxPackets": {
            "type": "number"
          },
          "rxErrors": {
            "type": "number"
          },
          "rxDropped": {
            "type": "number"
          },
          "rxOverruns": {
            "type": "number"
          },
          "rxFrame": {
            "type": "number"
          },
          "txBytes": {
            "type": "number"
          },
          "txPackets": {
            "type": "number"
          },
          "txErrors": {
            "type": "number"
          },
          "txDropped": {
            "type": "number"
          },
          "txOverruns": {
            "type": "number"
          },
          "txCollisions": {
            "type": "number"
          },
          "multicast": {
            "type": "number"
          },
          "broadcast": {
            "type": "number"
          }
        },
        "example": {
          "rxBytes": 5000000,
          "rxPackets": 50000,
          "rxErrors": 0,
          "rxDropped": 2,
          "rxOverruns": 0,
          "rxFrame": 0,
          "txBytes": 6000000,
          "txPackets": 60000,
          "txErrors": 0,
          "txDropped": 0,
          "txOverruns": 0,
          "txCollisions": 0,
          "multicast": 1000,
          "broadcast": 500
        }
      },
      "QoSStats": {
        "type": "object",
        "description": "QoS-related statistics",
        "properties": {
          "queueStats": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "packets": {
                  "type": "number"
                },
                "bytes": {
                  "type": "number"
                },
                "dropped": {
                  "type": "number"
                },
                "queueLength": {
                  "type": "number"
                }
              }
            }
          },
          "dscp": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        }
      },
      "ErrorStats": {
        "type": "object",
        "description": "Detailed error statistics",
        "properties": {
          "crc": {
            "type": "number"
          },
          "fragment": {
            "type": "number"
          },
          "jabber": {
            "type": "number"
          },
          "alignment": {
            "type": "number"
          },
          "symbol": {
            "type": "number"
          },
          "unknown": {
            "type": "number"
          }
        }
      },
      "InterfaceStats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkInterface"
          },
          {
            "properties": {
              "operStatus": {
                "type": "string",
                "enum": [
                  "up",
                  "down",
                  "testing",
                  "unknown",
                  "dormant",
                  "notPresent"
                ]
              },
              "adminStatus": {
                "type": "string",
                "enum": [
                  "up",
                  "down",
                  "testing"
                ]
              },
              "vlanIds": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "lastFlapped": {
                "type": "number"
              },
              "counters": {
                "$ref": "#/components/schemas/InterfaceCounters"
              },
              "qosStats": {
                "$ref": "#/components/schemas/QoSStats"
              },
              "errorStats": {
                "$ref": "#/components/schemas/ErrorStats"
              },
              "opticalStats": {
                "type": "object",
                "description": "Optical interface statistics",
                "properties": {
                  "rxPower": {
                    "type": "number"
                  },
                  "txPower": {
                    "type": "number"
                  },
                  "temperature": {
                    "type": "number"
                  },
                  "voltage": {
                    "type": "number"
                  },
                  "bias": {
                    "type": "number"
                  }
                }
              },
              "rateStats": {
                "type": "object",
                "description": "Rate-based statistics",
                "properties": {
                  "inputRate": {
                    "type": "number"
                  },
                  "outputRate": {
                    "type": "number"
                  },
                  "inputPacketRate": {
                    "type": "number"
                  },
                  "outputPacketRate": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ],
        "example": {
          "name": "eth0",
          "description": "Primary network interface",
          "type": "ethernet",
          "macAddress": "00:11:22:33:44:55",
          "ipv4Address": "192.168.1.1",
          "ipv4Subnet": "255.255.255.0",
          "ipv6Address": "fe80::1",
          "ipv6PrefixLength": 64,
          "mtu": 1500,
          "enabled": true,
          "operStatus": "up",
          "adminStatus": "up",
          "vlanIds": [
            100,
            200
          ],
          "lastFlapped": 1609459200,
          "counters": {
            "rxBytes": 1000000,
            "rxPackets": 10000,
            "rxErrors": 0,
            "rxDropped": 5,
            "rxOverruns": 0,
            "rxFrame": 0,
            "txBytes": 2000000,
            "txPackets": 20000,
            "txErrors": 0,
            "txDropped": 0,
            "txOverruns": 0,
            "txCollisions": 0,
            "multicast": 500,
            "broadcast": 200
          },
          "qosStats": {
            "queueStats": {
              "queue0": {
                "packets": 5000,
                "bytes": 500000,
                "dropped": 0,
                "queueLength": 0
              },
              "queue1": {
                "packets": 3000,
                "bytes": 300000,
                "dropped": 0,
                "queueLength": 0
              }
            },
            "dscp": {
              "0": 8000,
              "46": 2000
            }
          },
          "errorStats": {
            "crc": 0,
            "fragment": 0,
            "jabber": 0,
            "alignment": 0,
            "symbol": 0,
            "unknown": 0
          },
          "opticalStats": {
            "rxPower": -5.2,
            "txPower": 0.5,
            "temperature": 35,
            "voltage": 3.3,
            "bias": 30
          },
          "rateStats": {
            "inputRate": 1000,
            "outputRate": 2000,
            "inputPacketRate": 10,
            "outputPacketRate": 20
          }
        }
      },
      "DeviceStatistics": {
        "type": "object",
        "description": "Device statistics",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "Device identifier"
          },
          "name": {
            "type": "string",
            "description": "Device name"
          },
          "type": {
            "type": "string",
            "description": "Device type"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the device is enabled"
          },
          "operStatus": {
            "type": "string",
            "enum": [
              "up",
              "down",
              "testing",
              "unknown",
              "dormant",
              "notPresent"
            ],
            "description": "Device operational status"
          },
          "adminStatus": {
            "type": "string",
            "enum": [
              "up",
              "down",
              "testing"
            ],
            "description": "Device administrative status"
          },
          "vlanIds": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of VLAN IDs"
          },
          "lastFlapped": {
            "type": "number",
            "description": "Last time the device flapped"
          },
          "counters": {
            "$ref": "#/components/schemas/InterfaceCounters"
          },
          "qosStats": {
            "$ref": "#/components/schemas/QoSStats"
          },
          "errorStats": {
            "$ref": "#/components/schemas/ErrorStats"
          },
          "opticalStats": {
            "type": "object",
            "description": "Optical device statistics",
            "properties": {
              "rxPower": {
                "type": "number",
                "description": "Received optical power"
              },
              "txPower": {
                "type": "number",
                "description": "Transmitted optical power"
              },
              "temperature": {
                "type": "number",
                "description": "Device temperature"
              },
              "voltage": {
                "type": "number",
                "description": "Device voltage"
              },
              "bias": {
                "type": "number",
                "description": "Device bias"
              }
            }
          },
          "rateStats": {
            "type": "object",
            "description": "Rate-based device statistics",
            "properties": {
              "inputRate": {
                "type": "number",
                "description": "Input rate"
              },
              "outputRate": {
                "type": "number",
                "description": "Output rate"
              },
              "inputPacketRate": {
                "type": "number",
                "description": "Input packet rate"
              },
              "outputPacketRate": {
                "type": "number",
                "description": "Output packet rate"
              }
            }
          }
        },
        "example": {
          "deviceId": "switch-01",
          "name": "Core Switch 1",
          "type": "switch",
          "enabled": true,
          "operStatus": "up",
          "adminStatus": "up",
          "vlanIds": [
            1,
            10,
            20,
            30,
            100
          ],
          "lastFlapped": 1609459200,
          "counters": {
            "rxBytes": 10000000,
            "rxPackets": 100000,
            "rxErrors": 5,
            "rxDropped": 10,
            "rxOverruns": 0,
            "rxFrame": 0,
            "txBytes": 20000000,
            "txPackets": 200000,
            "txErrors": 2,
            "txDropped": 0,
            "txOverruns": 0,
            "txCollisions": 0,
            "multicast": 5000,
            "broadcast": 2000
          },
          "qosStats": {
            "queueStats": {
              "queue0": {
                "packets": 50000,
                "bytes": 5000000,
                "dropped": 0,
                "queueLength": 0
              },
              "queue1": {
                "packets": 30000,
                "bytes": 3000000,
                "dropped": 0,
                "queueLength": 0
              }
            },
            "dscp": {
              "0": 80000,
              "46": 20000
            }
          },
          "errorStats": {
            "crc": 2,
            "fragment": 0,
            "jabber": 0,
            "alignment": 3,
            "symbol": 0,
            "unknown": 0
          },
          "opticalStats": {
            "rxPower": -4.8,
            "txPower": 0.7,
            "temperature": 38.5,
            "voltage": 3.3,
            "bias": 32
          },
          "rateStats": {
            "inputRate": 10000,
            "outputRate": 20000,
            "inputPacketRate": 100,
            "outputPacketRate": 200
          }
        }
      },
      "MeterStats": {
        "type": "object",
        "description": "Meter statistics",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "Device identifier"
          },
          "meterId": {
            "type": "string",
            "description": "Meter identifier"
          },
          "name": {
            "type": "string",
            "description": "Meter name"
          },
          "type": {
            "type": "string",
            "enum": [
              "bytes",
              "packets",
              "flows"
            ],
            "description": "Type of meter"
          },
          "rate": {
            "type": "number",
            "description": "Current rate"
          },
          "burstSize": {
            "type": "number",
            "description": "Burst size"
          },
          "bands": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "rate": {
                  "type": "number",
                  "description": "Band rate"
                },
                "burstSize": {
                  "type": "number",
                  "description": "Band burst size"
                },
                "packetCount": {
                  "type": "number",
                  "description": "Number of packets processed by this band"
                },
                "byteCount": {
                  "type": "number",
                  "description": "Number of bytes processed by this band"
                }
              }
            }
          },
          "packetCount": {
            "type": "number",
            "description": "Total packet count"
          },
          "byteCount": {
            "type": "number",
            "description": "Total byte count"
          },
          "duration": {
            "type": "number",
            "description": "Duration in seconds"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "deviceId",
          "meterId"
        ]
      },
      "MetricData": {
        "type": "object",
        "description": "Generic metric data structure",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "value",
          "timestamp"
        ]
      },
      "ResourceMetrics": {
        "type": "object",
        "description": "System resource metrics",
        "properties": {
          "cpu": {
            "type": "object",
            "properties": {
              "usage": {
                "type": "number"
              },
              "load": {
                "type": "number"
              },
              "temperature": {
                "type": "number"
              }
            }
          },
          "memory": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "used": {
                "type": "number"
              },
              "free": {
                "type": "number"
              },
              "buffers": {
                "type": "number"
              }
            }
          },
          "storage": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "used": {
                "type": "number"
              },
              "free": {
                "type": "number"
              }
            }
          }
        },
        "example": {
          "cpu": {
            "usage": 65.3,
            "load": 1.25,
            "temperature": 42.8
          },
          "memory": {
            "total": 16384,
            "used": 8192,
            "free": 8192,
            "buffers": 2048
          },
          "storage": {
            "total": 512000,
            "used": 256000,
            "free": 256000
          }
        }
      },
      "EnvironmentalMetrics": {
        "type": "object",
        "description": "Environmental monitoring metrics",
        "properties": {
          "temperature": {
            "type": "object",
            "properties": {
              "ambient": {
                "type": "number"
              },
              "components": {
                "type": "object",
                "additionalProperties": {
                  "type": "number"
                }
              }
            }
          },
          "power": {
            "type": "object",
            "properties": {
              "consumption": {
                "type": "number"
              },
              "efficiency": {
                "type": "number"
              },
              "sources": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "output": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "fans": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "speed": {
                  "type": "number"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "temperature": {
            "ambient": 24.5,
            "components": {
              "cpu": 45.2,
              "memory": 38.7,
              "psu": 32.1
            }
          },
          "power": {
            "consumption": 120.5,
            "efficiency": 0.85,
            "sources": [
              {
                "id": "psu1",
                "status": "active",
                "output": 95.3
              },
              {
                "id": "psu2",
                "status": "standby",
                "output": 25.2
              }
            ]
          },
          "fans": [
            {
              "id": "fan1",
              "speed": 2500,
              "status": "normal"
            },
            {
              "id": "fan2",
              "speed": 2600,
              "status": "normal"
            }
          ]
        }
      },
      "DeviceMetrics": {
        "type": "object",
        "properties": {
          "vlanStats": {
            "type": "object",
            "additionalProperties": true
          },
          "routeStats": {
            "type": "object",
            "additionalProperties": true
          },
          "firewallHits": {
            "type": "integer"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceMetrics"
          },
          "environmental": {
            "$ref": "#/components/schemas/EnvironmentalMetrics"
          },
          "customMetrics": {
            "type": "object",
            "description": "Vendor-specific or custom metrics",
            "additionalProperties": true
          }
        },
        "example": {
          "vlanStats": {
            "vlan100": {
              "rxPackets": 15000,
              "txPackets": 12500
            },
            "vlan200": {
              "rxPackets": 8000,
              "txPackets": 7200
            }
          },
          "routeStats": {
            "activeRoutes": 120,
            "droppedPackets": 25
          },
          "firewallHits": 1250,
          "resources": {
            "cpu": {
              "usage": 65.3,
              "load": 1.25,
              "temperature": 42.8
            },
            "memory": {
              "total": 16384,
              "used": 8192,
              "free": 8192,
              "buffers": 2048
            },
            "storage": {
              "total": 512000,
              "used": 256000,
              "free": 256000
            }
          },
          "environmental": {
            "temperature": {
              "ambient": 24.5,
              "components": {
                "cpu": 45.2,
                "memory": 38.7,
                "psu": 32.1
              }
            },
            "power": {
              "consumption": 120.5,
              "efficiency": 0.85,
              "sources": [
                {
                  "id": "psu1",
                  "status": "active",
                  "output": 95.3
                }
              ]
            },
            "fans": [
              {
                "id": "fan1",
                "speed": 2500,
                "status": "normal"
              }
            ]
          },
          "customMetrics": {
            "vendorSpecific": {
              "qosMetric": 98.5,
              "packetLoss": 0.02
            }
          }
        }
      },
      "MetricThresholds": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "object",
            "properties": {
              "warning": {
                "type": "number"
              },
              "critical": {
                "type": "number"
              }
            }
          },
          "memory": {
            "type": "object",
            "properties": {
              "warning": {
                "type": "number"
              },
              "critical": {
                "type": "number"
              }
            }
          },
          "temperature": {
            "type": "object",
            "properties": {
              "warning": {
                "type": "number"
              },
              "critical": {
                "type": "number"
              }
            }
          }
        }
      },
      "FlowMatch": {
        "type": "object",
        "description": "Match fields for flow entries supporting both IPv4 and IPv6",
        "properties": {
          "in_port": {
            "type": "integer"
          },
          "eth_src": {
            "type": "string"
          },
          "eth_dst": {
            "type": "string"
          },
          "eth_type": {
            "type": "integer",
            "description": "Ethernet type (2048 - 0x0800 for IPv4, 34525 - 0x86DD for IPv6)",
            "enum": [
              2048,
              34525
            ]
          },
          "ip_proto": {
            "type": "integer",
            "description": "IP protocol number"
          },
          "ipv4_src": {
            "type": "string",
            "description": "IPv4 source address"
          },
          "ipv4_dst": {
            "type": "string",
            "description": "IPv4 destination address"
          },
          "ipv6_src": {
            "type": "string",
            "description": "IPv6 source address"
          },
          "ipv6_dst": {
            "type": "string",
            "description": "IPv6 destination address"
          },
          "ipv6_nd_target": {
            "type": "string",
            "description": "IPv6 neighbor discovery target address"
          },
          "ipv6_nd_sll": {
            "type": "string",
            "description": "IPv6 neighbor discovery source link-layer address"
          },
          "ipv6_nd_tll": {
            "type": "string",
            "description": "IPv6 neighbor discovery target link-layer address"
          },
          "vlan_vid": {
            "type": "integer",
            "description": "VLAN ID"
          },
          "tcp_src": {
            "type": "integer"
          },
          "tcp_dst": {
            "type": "integer"
          },
          "udp_src": {
            "type": "integer"
          },
          "udp_dst": {
            "type": "integer"
          },
          "icmpv6_type": {
            "type": "integer",
            "description": "ICMPv6 type"
          },
          "icmpv6_code": {
            "type": "integer",
            "description": "ICMPv6 code"
          }
        },
        "example": {
          "in_port": 1,
          "eth_type": 2048,
          "ip_proto": 6,
          "ipv4_dst": "192.168.1.100",
          "tcp_dst": 80
        }
      },
      "FlowAction": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "forward",
              "drop",
              "modify",
              "flood",
              "set_vlan",
              "strip_vlan"
            ]
          },
          "output_port": {
            "type": "integer"
          },
          "vlan_action": {
            "type": "string",
            "enum": [
              "push",
              "pop",
              "modify"
            ],
            "description": "Action related to VLAN handling"
          }
        },
        "required": [
          "action"
        ],
        "example": {
          "action": "forward",
          "output_port": 2
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "permissions"
        ],
        "example": {
          "name": "admin",
          "permissions": [
            "read:devices",
            "write:devices",
            "read:config",
            "write:config",
            "read:security",
            "write:security"
          ]
        }
      }
    },
    "parameters": {
      "If-Match": {
        "name": "If-Match",
        "in": "header",
        "description": "ETag for optimistic concurrency control",
        "schema": {
          "type": "string"
        }
      },
      "pageSize": {
        "name": "pageSize",
        "in": "query",
        "schema": {
          "type": "integer",
          "maximum": 100
        }
      },
      "IdempotencyKey": {
        "name": "Idempotency-Key",
        "in": "header",
        "description": "Unique key for idempotent request handling",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        }
      },
      "ClientTimestamp": {
        "name": "X-Client-Timestamp",
        "in": "header",
        "description": "Client-side timestamp for request ordering (RFC3339 format)",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "ETag": {
        "description": "Entity tag for version tracking",
        "schema": {
          "type": "string"
        }
      },
      "RateLimit-Limit": {
        "description": "Request limit per minute",
        "schema": {
          "type": "integer"
        }
      },
      "RateLimit-Remaining": {
        "description": "Number of requests remaining in the current rate limit window",
        "schema": {
          "type": "integer"
        }
      }
    }
  },
  "x-idempotency": {
    "retryStrategy": {
      "maxRetries": 3,
      "initialDelayMs": 1000,
      "maxDelayMs": 5000,
      "backoffMultiplier": 2,
      "retryableStatusCodes": [
        408,
        429,
        500,
        502,
        503,
        504
      ]
    },
    "keyTTLSeconds": 86400,
    "conflictHandling": "return-original-response"
  }
}